
Finger_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008938  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008b10  08008b10  00018b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b64  08008b64  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08008b64  08008b64  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b64  08008b64  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b64  08008b64  00018b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b68  08008b68  00018b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08008b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  20000030  08008b9c  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08008b9c  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cefc  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8f  00000000  00000000  0003cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00040cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001690  00000000  00000000  00042558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b024  00000000  00000000  00043be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d221  00000000  00000000  0006ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001150da  00000000  00000000  0008be2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a0f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006910  00000000  00000000  001a0f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000030 	.word	0x20000030
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008af8 	.word	0x08008af8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000034 	.word	0x20000034
 8000214:	08008af8 	.word	0x08008af8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2220      	movs	r2, #32
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f007 ff93 	bl	8008ae8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bcc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd8:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000bde:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bf0:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf6:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2c:	4817      	ldr	r0, [pc, #92]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000c2e:	f003 f887 	bl	8003d40 <HAL_ADC_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000c38:	f001 fd61 	bl	80026fe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	4811      	ldr	r0, [pc, #68]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000c48:	f003 fea2 	bl	8004990 <HAL_ADCEx_MultiModeConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c52:	f001 fd54 	bl	80026fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_ADC1_Init+0xec>)
 8000c58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c62:	237f      	movs	r3, #127	; 0x7f
 8000c64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c66:	2304      	movs	r3, #4
 8000c68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC1_Init+0xe8>)
 8000c74:	f003 fa26 	bl	80040c4 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c7e:	f001 fd3e 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3730      	adds	r7, #48	; 0x30
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000004c 	.word	0x2000004c
 8000c90:	14f00020 	.word	0x14f00020

08000c94 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2220      	movs	r2, #32
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f007 ff1b 	bl	8008ae8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cb2:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <MX_ADC3_Init+0xe8>)
 8000cb6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cbe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc6:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cda:	2204      	movs	r2, #4
 8000cdc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d04:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d1a:	4817      	ldr	r0, [pc, #92]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000d1c:	f003 f810 	bl	8003d40 <HAL_ADC_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000d26:	f001 fcea 	bl	80026fe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4810      	ldr	r0, [pc, #64]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000d36:	f003 fe2b 	bl	8004990 <HAL_ADCEx_MultiModeConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000d40:	f001 fcdd 	bl	80026fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_ADC3_Init+0xec>)
 8000d46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d50:	237f      	movs	r3, #127	; 0x7f
 8000d52:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d54:	2304      	movs	r3, #4
 8000d56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_ADC3_Init+0xe4>)
 8000d62:	f003 f9af 	bl	80040c4 <HAL_ADC_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000d6c:	f001 fcc7 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3730      	adds	r7, #48	; 0x30
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200000b8 	.word	0x200000b8
 8000d7c:	50000400 	.word	0x50000400
 8000d80:	14f00020 	.word	0x14f00020

08000d84 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f007 fea9 	bl	8008ae8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000d96:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000d98:	4a32      	ldr	r2, [pc, #200]	; (8000e64 <MX_ADC4_Init+0xe0>)
 8000d9a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d9c:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000d9e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000da2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 2;
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de2:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000e00:	f002 ff9e 	bl	8003d40 <HAL_ADC_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000e0a:	f001 fc78 	bl	80026fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_ADC4_Init+0xe4>)
 8000e10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e12:	2306      	movs	r3, #6
 8000e14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000e16:	2303      	movs	r3, #3
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1a:	237f      	movs	r3, #127	; 0x7f
 8000e1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000e2c:	f003 f94a 	bl	80040c4 <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000e36:	f001 fc62 	bl	80026fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_ADC4_Init+0xe8>)
 8000e3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e3e:	230c      	movs	r3, #12
 8000e40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <MX_ADC4_Init+0xdc>)
 8000e48:	f003 f93c 	bl	80040c4 <HAL_ADC_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_ADC4_Init+0xd2>
  {
    Error_Handler();
 8000e52:	f001 fc54 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000124 	.word	0x20000124
 8000e64:	50000500 	.word	0x50000500
 8000e68:	14f00020 	.word	0x14f00020
 8000e6c:	cb840000 	.word	0xcb840000

08000e70 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b0a2      	sub	sp, #136	; 0x88
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	2254      	movs	r2, #84	; 0x54
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f007 fe29 	bl	8008ae8 <memset>
  if(adcHandle->Instance==ADC1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e9e:	d135      	bne.n	8000f0c <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ea4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ea6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000eaa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 fed7 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ebc:	f001 fc1f 	bl	80026fe <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ec0:	4b6d      	ldr	r3, [pc, #436]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	4a6c      	ldr	r2, [pc, #432]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000ec6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ecc:	4b6a      	ldr	r3, [pc, #424]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b67      	ldr	r3, [pc, #412]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	4a66      	ldr	r2, [pc, #408]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee4:	4b64      	ldr	r3, [pc, #400]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ef0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f02:	4619      	mov	r1, r3
 8000f04:	485d      	ldr	r0, [pc, #372]	; (800107c <HAL_ADC_MspInit+0x20c>)
 8000f06:	f004 ff4b 	bl	8005da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000f0a:	e0b1      	b.n	8001070 <HAL_ADC_MspInit+0x200>
  else if(adcHandle->Instance==ADC3)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a5b      	ldr	r2, [pc, #364]	; (8001080 <HAL_ADC_MspInit+0x210>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d13e      	bne.n	8000f94 <HAL_ADC_MspInit+0x124>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000f1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000f20:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 fe9c 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_ADC_MspInit+0xc6>
      Error_Handler();
 8000f32:	f001 fbe4 	bl	80026fe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000f36:	4b53      	ldr	r3, [pc, #332]	; (8001084 <HAL_ADC_MspInit+0x214>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4a51      	ldr	r2, [pc, #324]	; (8001084 <HAL_ADC_MspInit+0x214>)
 8000f3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000f40:	4b50      	ldr	r3, [pc, #320]	; (8001084 <HAL_ADC_MspInit+0x214>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10b      	bne.n	8000f60 <HAL_ADC_MspInit+0xf0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	4a4a      	ldr	r2, [pc, #296]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f54:	4b48      	ldr	r3, [pc, #288]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b45      	ldr	r3, [pc, #276]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	4a44      	ldr	r2, [pc, #272]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6c:	4b42      	ldr	r3, [pc, #264]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	483b      	ldr	r0, [pc, #236]	; (800107c <HAL_ADC_MspInit+0x20c>)
 8000f8e:	f004 ff07 	bl	8005da0 <HAL_GPIO_Init>
}
 8000f92:	e06d      	b.n	8001070 <HAL_ADC_MspInit+0x200>
  else if(adcHandle->Instance==ADC4)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a3b      	ldr	r2, [pc, #236]	; (8001088 <HAL_ADC_MspInit+0x218>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d168      	bne.n	8001070 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000fa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000fa8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 fe58 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_ADC_MspInit+0x14e>
      Error_Handler();
 8000fba:	f001 fba0 	bl	80026fe <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000fbe:	4b31      	ldr	r3, [pc, #196]	; (8001084 <HAL_ADC_MspInit+0x214>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a2f      	ldr	r2, [pc, #188]	; (8001084 <HAL_ADC_MspInit+0x214>)
 8000fc6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	; (8001084 <HAL_ADC_MspInit+0x214>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d10b      	bne.n	8000fe8 <HAL_ADC_MspInit+0x178>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd4:	4a28      	ldr	r2, [pc, #160]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <HAL_ADC_MspInit+0x208>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001004:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	2303      	movs	r3, #3
 8001008:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001012:	4619      	mov	r1, r3
 8001014:	4819      	ldr	r0, [pc, #100]	; (800107c <HAL_ADC_MspInit+0x20c>)
 8001016:	f004 fec3 	bl	8005da0 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel1;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_ADC_MspInit+0x21c>)
 800101c:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_ADC_MspInit+0x220>)
 800101e:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_ADC_MspInit+0x21c>)
 8001022:	2226      	movs	r2, #38	; 0x26
 8001024:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_ADC_MspInit+0x21c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_ADC_MspInit+0x21c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_ADC_MspInit+0x21c>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_ADC_MspInit+0x21c>)
 800103a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103e:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_ADC_MspInit+0x21c>)
 8001042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001046:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001048:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_ADC_MspInit+0x21c>)
 800104a:	2220      	movs	r2, #32
 800104c:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_ADC_MspInit+0x21c>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <HAL_ADC_MspInit+0x21c>)
 8001056:	f003 fecd 	bl	8004df4 <HAL_DMA_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_ADC_MspInit+0x1f4>
      Error_Handler();
 8001060:	f001 fb4d 	bl	80026fe <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <HAL_ADC_MspInit+0x21c>)
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_ADC_MspInit+0x21c>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001070:	bf00      	nop
 8001072:	3788      	adds	r7, #136	; 0x88
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400
 8001080:	50000400 	.word	0x50000400
 8001084:	200001f0 	.word	0x200001f0
 8001088:	50000500 	.word	0x50000500
 800108c:	20000190 	.word	0x20000190
 8001090:	40020008 	.word	0x40020008

08001094 <calibration>:
 *      Author: nir
 */
#include "calibration.h"

// Calibration function for motor control
void calibration(MAX22200_StatusReg* stat_reg, Motor* motors[]) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    // Define and initialize counters and calibration variables
    uint32_t last_counter_value[3] = {0};
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
    uint32_t stable_start_time[3] = {0};
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
    uint32_t current_time = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    Calibration_State state = STATE_INIT;  // Start at the initial state
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    while (1) {
        switch (state) {
 80010c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d8fb      	bhi.n	80010c0 <calibration+0x2c>
 80010c8:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <calibration+0x3c>)
 80010ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ce:	bf00      	nop
 80010d0:	080010e1 	.word	0x080010e1
 80010d4:	080011ed 	.word	0x080011ed
 80010d8:	080012a9 	.word	0x080012a9
 80010dc:	080012bf 	.word	0x080012bf
            case STATE_INIT:
                // Initial configuration for all motors
                for (int i = 0; i < 3; ++i) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
 80010e4:	e07b      	b.n	80011de <calibration+0x14a>
                    Motor_setDirection(i+1, SLEEP, stat_reg);
 80010e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e8:	3301      	adds	r3, #1
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fe96 	bl	8002e20 <Motor_setDirection>
                    Set_VDRnCDR(&motors[i]->cfg1_, 0);//Go to CDR mode Current Drive
 80010f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	330c      	adds	r3, #12
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f001 ff1c 	bl	8002f40 <Set_VDRnCDR>
                    Set_VDRnCDR(&motors[i]->cfg2_, 0);//Go to CDR mode Current Drive
 8001108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3310      	adds	r3, #16
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f001 ff12 	bl	8002f40 <Set_VDRnCDR>
                    Set_HIT(&motors[i]->cfg1_, 40);
 800111c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	4413      	add	r3, r2
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	330c      	adds	r3, #12
 8001128:	2128      	movs	r1, #40	; 0x28
 800112a:	4618      	mov	r0, r3
 800112c:	f001 feee 	bl	8002f0c <Set_HIT>
                    Set_HIT(&motors[i]->cfg2_, 40);
 8001130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3310      	adds	r3, #16
 800113c:	2128      	movs	r1, #40	; 0x28
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fee4 	bl	8002f0c <Set_HIT>
                    Set_HOLD(&motors[i]->cfg1_, 40);
 8001144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	4413      	add	r3, r2
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	330c      	adds	r3, #12
 8001150:	2128      	movs	r1, #40	; 0x28
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fec0 	bl	8002ed8 <Set_HOLD>
                    Set_HOLD(&motors[i]->cfg2_, 40);
 8001158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3310      	adds	r3, #16
 8001164:	2128      	movs	r1, #40	; 0x28
 8001166:	4618      	mov	r0, r3
 8001168:	f001 feb6 	bl	8002ed8 <Set_HOLD>
                    Motor_writeCfgRegister(&motors[i]->cfg1_, motors[i]->channel1_);
 800116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	4413      	add	r3, r2
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f103 000c 	add.w	r0, r3, #12
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	4413      	add	r3, r2
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	f001 fdb4 	bl	8002cf4 <Motor_writeCfgRegister>
                    Motor_writeCfgRegister(&motors[i]->cfg2_, motors[i]->channel2_);
 800118c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f103 0010 	add.w	r0, r3, #16
 800119a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4619      	mov	r1, r3
 80011a8:	f001 fda4 	bl	8002cf4 <Motor_writeCfgRegister>
                    Motor_setDirection(i+1, DOWN, stat_reg);
 80011ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ae:	3301      	adds	r3, #1
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fe33 	bl	8002e20 <Motor_setDirection>
                    last_counter_value[i] = counter[i];
 80011ba:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <calibration+0x258>)
 80011bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	3338      	adds	r3, #56	; 0x38
 80011c8:	443b      	add	r3, r7
 80011ca:	f843 2c20 	str.w	r2, [r3, #-32]
                    motor_stable[i] = 0;
 80011ce:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <calibration+0x25c>)
 80011d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d2:	2100      	movs	r1, #0
 80011d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (int i = 0; i < 3; ++i) {
 80011d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011da:	3301      	adds	r3, #1
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
 80011de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	dd80      	ble.n	80010e6 <calibration+0x52>
                }
                state = STATE_CALIBRATION;  // Move to calibration state
 80011e4:	2301      	movs	r3, #1
 80011e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80011ea:	e07a      	b.n	80012e2 <calibration+0x24e>

            case STATE_CALIBRATION:
                // Calibration process
                current_time = HAL_GetTick();
 80011ec:	f002 fba0 	bl	8003930 <HAL_GetTick>
 80011f0:	6278      	str	r0, [r7, #36]	; 0x24
                for (int i = 0; i < 3; ++i) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f6:	e044      	b.n	8001282 <calibration+0x1ee>
                    if (!motor_stable[i]) {
 80011f8:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <calibration+0x25c>)
 80011fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d13b      	bne.n	800127c <calibration+0x1e8>
                        if (counter[i] != last_counter_value[i]) {
 8001204:	4a39      	ldr	r2, [pc, #228]	; (80012ec <calibration+0x258>)
 8001206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	3338      	adds	r3, #56	; 0x38
 8001212:	443b      	add	r3, r7
 8001214:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001218:	429a      	cmp	r2, r3
 800121a:	d011      	beq.n	8001240 <calibration+0x1ac>
                            // Counter value changed, update last value and start time
                            last_counter_value[i] = counter[i];
 800121c:	4a33      	ldr	r2, [pc, #204]	; (80012ec <calibration+0x258>)
 800121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	3338      	adds	r3, #56	; 0x38
 800122a:	443b      	add	r3, r7
 800122c:	f843 2c20 	str.w	r2, [r3, #-32]
                            stable_start_time[i] = current_time;
 8001230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	3338      	adds	r3, #56	; 0x38
 8001236:	443b      	add	r3, r7
 8001238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123a:	f843 2c2c 	str.w	r2, [r3, #-44]
 800123e:	e01d      	b.n	800127c <calibration+0x1e8>
                        } else if ((current_time - stable_start_time[i]) >= 250) {
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	3338      	adds	r3, #56	; 0x38
 8001246:	443b      	add	r3, r7
 8001248:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800124c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2bf9      	cmp	r3, #249	; 0xf9
 8001252:	d913      	bls.n	800127c <calibration+0x1e8>
                            // Counter has been stable for at least 1 seconds
                            counter_calibration[i] = counter[i];
 8001254:	4a25      	ldr	r2, [pc, #148]	; (80012ec <calibration+0x258>)
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800125c:	4925      	ldr	r1, [pc, #148]	; (80012f4 <calibration+0x260>)
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                            motor_stable[i] = 1;
 8001264:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <calibration+0x25c>)
 8001266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001268:	2101      	movs	r1, #1
 800126a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                            Motor_setDirection(i+1, BREAK, stat_reg);
 800126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001270:	3301      	adds	r3, #1
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	2103      	movs	r1, #3
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fdd2 	bl	8002e20 <Motor_setDirection>
                for (int i = 0; i < 3; ++i) {
 800127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127e:	3301      	adds	r3, #1
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001284:	2b02      	cmp	r3, #2
 8001286:	ddb7      	ble.n	80011f8 <calibration+0x164>
                        }
                    }
                }
                // If all motors are stable(stopped), move to stability check state
                if (motor_stable[0] && motor_stable[1] && motor_stable[2]) {
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <calibration+0x25c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d027      	beq.n	80012e0 <calibration+0x24c>
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <calibration+0x25c>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d023      	beq.n	80012e0 <calibration+0x24c>
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <calibration+0x25c>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01f      	beq.n	80012e0 <calibration+0x24c>
                    state = STATE_STABILITY_CHECK;
 80012a0:	2302      	movs	r3, #2
 80012a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
                break;
 80012a6:	e01b      	b.n	80012e0 <calibration+0x24c>

            case STATE_STABILITY_CHECK:
                // Check the stability of each motor and finalize calibration if stable
                HAL_Delay(500);
 80012a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ac:	f002 fb4c 	bl	8003948 <HAL_Delay>
                calibrated = true;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <calibration+0x264>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
                state = STATE_BREAK;  // Move to break state
 80012b6:	2303      	movs	r3, #3
 80012b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80012bc:	e011      	b.n	80012e2 <calibration+0x24e>

            case STATE_BREAK:
                // Break state to stop all motors
                for (int i = 0; i < 3; ++i) {
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c2:	e009      	b.n	80012d8 <calibration+0x244>
                    Motor_setDirection(i+1, BREAK, stat_reg);
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	3301      	adds	r3, #1
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	2103      	movs	r1, #3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fda7 	bl	8002e20 <Motor_setDirection>
                for (int i = 0; i < 3; ++i) {
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	3301      	adds	r3, #1
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	2b02      	cmp	r3, #2
 80012dc:	ddf2      	ble.n	80012c4 <calibration+0x230>
                }
                return;  // Exit function
 80012de:	e001      	b.n	80012e4 <calibration+0x250>
                break;
 80012e0:	bf00      	nop
        switch (state) {
 80012e2:	e6ed      	b.n	80010c0 <calibration+0x2c>
        }
    }
}
 80012e4:	3738      	adds	r7, #56	; 0x38
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000340 	.word	0x20000340
 80012f0:	20000358 	.word	0x20000358
 80012f4:	2000034c 	.word	0x2000034c
 80012f8:	20000364 	.word	0x20000364

080012fc <control_init>:
int PWM_ZERO;
uint8_t out[3]={0,0,0};
float friction_compensation = 0.0;

// Initialize a PID controller
void control_init(pid_control* self, float kp, float ki, float kd,float kv, int32_t setpoint, double setvel, Control_State state) {
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6278      	str	r0, [r7, #36]	; 0x24
 8001304:	ed87 0a08 	vstr	s0, [r7, #32]
 8001308:	edc7 0a07 	vstr	s1, [r7, #28]
 800130c:	ed87 1a06 	vstr	s2, [r7, #24]
 8001310:	edc7 1a05 	vstr	s3, [r7, #20]
 8001314:	6139      	str	r1, [r7, #16]
 8001316:	ed87 2b02 	vstr	d2, [r7, #8]
 800131a:	4613      	mov	r3, r2
 800131c:	71fb      	strb	r3, [r7, #7]
    // Set the PID parameters
    self->kp = kp;
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	6a3a      	ldr	r2, [r7, #32]
 8001322:	601a      	str	r2, [r3, #0]
    self->ki = ki;
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	605a      	str	r2, [r3, #4]
    self->kd = kd;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	609a      	str	r2, [r3, #8]
    self->kv = kv;
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	60da      	str	r2, [r3, #12]
    self->kd_imp=0;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
    self->kp_imp=0.01;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	4a22      	ldr	r2, [pc, #136]	; (80013cc <control_init+0xd0>)
 8001342:	611a      	str	r2, [r3, #16]
    self->integral = 0;
 8001344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    self->previous_error = 0;
 8001352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    self->position_error=0;
 8001360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    self->setpoint = setpoint;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
    self->setvel = setvel;
 8001374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001376:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800137a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    self->max_control_signal=self->kp * 100000 + self->ki * 100000;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013d0 <control_init+0xd4>
 8001388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001392:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80013d0 <control_init+0xd4>
 8001396:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	ee17 0a90 	vmov	r0, s15
 80013a2:	f7ff f89d 	bl	80004e0 <__aeabi_f2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ac:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    self->min_control_signal=-self->max_control_signal;
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80013b6:	4614      	mov	r4, r2
 80013b8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	e9c3 4512 	strd	r4, r5, [r3, #72]	; 0x48
}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	3c23d70a 	.word	0x3c23d70a
 80013d0:	47c35000 	.word	0x47c35000

080013d4 <compute_impedance>:

    return output;
}

// Compute the impedance
double compute_impedance(pid_control* self, int32_t current_position) {
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    // Set the damping coefficient and stiffness
    double damping_coefficient = self->kd_imp; // B
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f87c 	bl	80004e0 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double stiffness = self->kp_imp; // K
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f873 	bl	80004e0 <__aeabi_f2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Calculate the displacement (current_position - setpoint)
    double displacement = -1*(double)(current_position - self->setpoint);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f856 	bl	80004bc <__aeabi_i2d>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4611      	mov	r1, r2
 8001416:	61b9      	str	r1, [r7, #24]
 8001418:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800141c:	61fb      	str	r3, [r7, #28]

    // Calculate the velocity (current_position - previous_position)
    double velocity = (double)(current_position - self->previous_position);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f848 	bl	80004bc <__aeabi_i2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Store current_position as previous_position for next iteration
    self->previous_position = current_position;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	655a      	str	r2, [r3, #84]	; 0x54

    // Calculate the force (or torque in rotational systems)
    double output = damping_coefficient * (velocity-self->setvel) + stiffness * displacement;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001440:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001444:	f7fe feec 	bl	8000220 <__aeabi_dsub>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001454:	f7ff f89c 	bl	8000590 <__aeabi_dmul>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4614      	mov	r4, r2
 800145e:	461d      	mov	r5, r3
 8001460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001464:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001468:	f7ff f892 	bl	8000590 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4620      	mov	r0, r4
 8001472:	4629      	mov	r1, r5
 8001474:	f7fe fed6 	bl	8000224 <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return output;
 8001480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001484:	ec43 2b17 	vmov	d7, r2, r3
}
 8001488:	eeb0 0a47 	vmov.f32	s0, s14
 800148c:	eef0 0a67 	vmov.f32	s1, s15
 8001490:	3730      	adds	r7, #48	; 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bdb0      	pop	{r4, r5, r7, pc}

08001496 <set_desired_position>:

// Set the desired position
void set_desired_position(pid_control* self, int32_t position) {
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
    self->setpoint = position;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <set_current_position>:

// Set the current position
void set_current_position(pid_control* self, int32_t position) {
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
    self->current_position = position;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <set_motor_speed>:
    return compute_pid(pid, pid->current_position);
}

// Set the motor speed
int set_motor_speed(pid_control* self,float control_signal,int mode,int motor)
{
 80014d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	ed87 0a02 	vstr	s0, [r7, #8]
 80014de:	6079      	str	r1, [r7, #4]
 80014e0:	603a      	str	r2, [r7, #0]
	self->state=CONTROL_SET_MOTOR_SPEED;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2204      	movs	r2, #4
 80014e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	// friction compensation for
	if (control_signal > 0)
 80014ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	dd04      	ble.n	8001502 <set_motor_speed+0x32>
		friction_compensation = FRICTION; // Change this to the friction value in positive direction
 80014f8:	4b87      	ldr	r3, [pc, #540]	; (8001718 <set_motor_speed+0x248>)
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e00a      	b.n	8001518 <set_motor_speed+0x48>
	else if (control_signal < 0)
 8001502:	edd7 7a02 	vldr	s15, [r7, #8]
 8001506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150e:	d503      	bpl.n	8001518 <set_motor_speed+0x48>
		friction_compensation = -FRICTION; // Change this to the friction value in negative direction
 8001510:	4b81      	ldr	r3, [pc, #516]	; (8001718 <set_motor_speed+0x248>)
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
	if(mode)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01c      	beq.n	8001558 <set_motor_speed+0x88>
	{
		self->max_control_signal = self->kp_imp * 100000 ;//+ self->ki * 100000;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	edd3 7a04 	vldr	s15, [r3, #16]
 8001524:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800171c <set_motor_speed+0x24c>
 8001528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152c:	ee17 0a90 	vmov	r0, s15
 8001530:	f7fe ffd6 	bl	80004e0 <__aeabi_f2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		    self->min_control_signal = -self->max_control_signal;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001544:	4690      	mov	r8, r2
 8001546:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	e9c3 8912 	strd	r8, r9, [r3, #72]	; 0x48
		    PWM_ZERO=0;
 8001550:	4b73      	ldr	r3, [pc, #460]	; (8001720 <set_motor_speed+0x250>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e024      	b.n	80015a2 <set_motor_speed+0xd2>
	}
	else{
		  self->max_control_signal = self->kp * 100000 + self->ki * 100000;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800171c <set_motor_speed+0x24c>
 8001562:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	edd3 7a01 	vldr	s15, [r3, #4]
 800156c:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800171c <set_motor_speed+0x24c>
 8001570:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001578:	ee17 0a90 	vmov	r0, s15
 800157c:	f7fe ffb0 	bl	80004e0 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	68f9      	ldr	r1, [r7, #12]
 8001586:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		    self->min_control_signal = -self->max_control_signal;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001590:	4614      	mov	r4, r2
 8001592:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	e9c3 4512 	strd	r4, r5, [r3, #72]	; 0x48
		    PWM_ZERO=20;
 800159c:	4b60      	ldr	r3, [pc, #384]	; (8001720 <set_motor_speed+0x250>)
 800159e:	2214      	movs	r2, #20
 80015a0:	601a      	str	r2, [r3, #0]

	}

    // Clamp the control signal to the min and max values
    if (control_signal < self->min_control_signal) {
 80015a2:	68b8      	ldr	r0, [r7, #8]
 80015a4:	f7fe ff9c 	bl	80004e0 <__aeabi_f2d>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80015ae:	f7ff fa61 	bl	8000a74 <__aeabi_dcmplt>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d009      	beq.n	80015cc <set_motor_speed+0xfc>
        control_signal = self->min_control_signal;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fa9f 	bl	8000b04 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	e013      	b.n	80015f4 <set_motor_speed+0x124>
    } else if (control_signal > self->max_control_signal) {
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7fe ff87 	bl	80004e0 <__aeabi_f2d>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80015d8:	f7ff fa6a 	bl	8000ab0 <__aeabi_dcmpgt>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <set_motor_speed+0x124>
        control_signal = self->max_control_signal;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fa8a 	bl	8000b04 <__aeabi_d2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	60bb      	str	r3, [r7, #8]
    }

    // Map the control signal to a PWM value
      float pwm_value;
      if (control_signal > 0) {
 80015f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	dd1c      	ble.n	800163c <set_motor_speed+0x16c>
          pwm_value = mapfloat(control_signal, 0, self->max_control_signal, PWM_ZERO, MAX_PWM);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff fa7a 	bl	8000b04 <__aeabi_d2f>
 8001610:	4602      	mov	r2, r0
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <set_motor_speed+0x250>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8001724 <set_motor_speed+0x254>
 8001622:	eef0 1a67 	vmov.f32	s3, s15
 8001626:	ee01 2a10 	vmov	s2, r2
 800162a:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8001728 <set_motor_speed+0x258>
 800162e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001632:	f000 f881 	bl	8001738 <mapfloat>
 8001636:	ed87 0a05 	vstr	s0, [r7, #20]
 800163a:	e01c      	b.n	8001676 <set_motor_speed+0x1a6>
      } else {
          pwm_value = mapfloat(control_signal, self->min_control_signal, 0, MIN_PWM, -PWM_ZERO);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fa5d 	bl	8000b04 <__aeabi_d2f>
 800164a:	4602      	mov	r2, r0
 800164c:	4b34      	ldr	r3, [pc, #208]	; (8001720 <set_motor_speed+0x250>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	425b      	negs	r3, r3
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	eeb0 2a67 	vmov.f32	s4, s15
 800165e:	eddf 1a33 	vldr	s3, [pc, #204]	; 800172c <set_motor_speed+0x25c>
 8001662:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001728 <set_motor_speed+0x258>
 8001666:	ee00 2a90 	vmov	s1, r2
 800166a:	ed97 0a02 	vldr	s0, [r7, #8]
 800166e:	f000 f863 	bl	8001738 <mapfloat>
 8001672:	ed87 0a05 	vstr	s0, [r7, #20]
      }
      if((pwm_value>1 || pwm_value <-1) && motor!=0)
 8001676:	edd7 7a05 	vldr	s15, [r7, #20]
 800167a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800167e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	dc08      	bgt.n	800169a <set_motor_speed+0x1ca>
 8001688:	edd7 7a05 	vldr	s15, [r7, #20]
 800168c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	d51c      	bpl.n	80016d4 <set_motor_speed+0x204>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d019      	beq.n	80016d4 <set_motor_speed+0x204>
      {
    	  pwm_value += friction_compensation;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <set_motor_speed+0x248>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	edc7 7a05 	vstr	s15, [r7, #20]
		  PWM_ZERO += friction_compensation;
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <set_motor_speed+0x250>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <set_motor_speed+0x248>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016cc:	ee17 2a90 	vmov	r2, s15
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <set_motor_speed+0x250>)
 80016d2:	601a      	str	r2, [r3, #0]
      }

    // Ensure PWM value stays within bounds
    if (pwm_value < MIN_PWM) {
 80016d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800172c <set_motor_speed+0x25c>
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d502      	bpl.n	80016ec <set_motor_speed+0x21c>
        pwm_value = MIN_PWM;
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <set_motor_speed+0x260>)
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e00a      	b.n	8001702 <set_motor_speed+0x232>
    } else if (pwm_value > MAX_PWM) {
 80016ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001724 <set_motor_speed+0x254>
 80016f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	dd01      	ble.n	8001702 <set_motor_speed+0x232>
        pwm_value = MAX_PWM;
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <set_motor_speed+0x264>)
 8001700:	617b      	str	r3, [r7, #20]
    }

    // Set the PWM duty cycle to control the motor speed
    return (int) pwm_value;
 8001702:	edd7 7a05 	vldr	s15, [r7, #20]
 8001706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170a:	ee17 3a90 	vmov	r3, s15
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001718:	200001fc 	.word	0x200001fc
 800171c:	47c35000 	.word	0x47c35000
 8001720:	200001f4 	.word	0x200001f4
 8001724:	42c80000 	.word	0x42c80000
 8001728:	00000000 	.word	0x00000000
 800172c:	c2c80000 	.word	0xc2c80000
 8001730:	c2c80000 	.word	0xc2c80000
 8001734:	42c80000 	.word	0x42c80000

08001738 <mapfloat>:

// Map a float value from one range to another
float mapfloat(float x, float in_min, float in_max, float out_min, float out_max)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001742:	edc7 0a04 	vstr	s1, [r7, #16]
 8001746:	ed87 1a03 	vstr	s2, [r7, #12]
 800174a:	edc7 1a02 	vstr	s3, [r7, #8]
 800174e:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001752:	ed97 7a05 	vldr	s14, [r7, #20]
 8001756:	edd7 7a04 	vldr	s15, [r7, #16]
 800175a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800175e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001762:	edd7 7a02 	vldr	s15, [r7, #8]
 8001766:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800176a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800176e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001772:	edd7 7a04 	vldr	s15, [r7, #16]
 8001776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800177a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800177e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001786:	eeb0 0a67 	vmov.f32	s0, s15
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	0000      	movs	r0, r0
	...

08001798 <impedance_step>:
		    }
}

// Perform a step of the impedance control
void impedance_step(MAX22200_StatusReg* stat_reg,pid_control* pids[],Motor* motors[])
{
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
    // Loop over all motors
	for(int i=0;i<3;i++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e1a1      	b.n	8001aee <impedance_step+0x356>
	    {
			pids[i]->state=CONTROL_IMPEDANCE;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4413      	add	r3, r2
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2202      	movs	r2, #2
 80017b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	        // Set the current position and desired position
	        set_current_position(pids[i],counter[i]);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	4413      	add	r3, r2
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	497e      	ldr	r1, [pc, #504]	; (80019c0 <impedance_step+0x228>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017cc:	4619      	mov	r1, r3
 80017ce:	4610      	mov	r0, r2
 80017d0:	f7ff fe6f 	bl	80014b2 <set_current_position>
	        uint32_t pos_ticks=pos[i]*(ticks_per_rev / (2 * M_PI));
 80017d4:	4a7b      	ldr	r2, [pc, #492]	; (80019c4 <impedance_step+0x22c>)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fe6d 	bl	80004bc <__aeabi_i2d>
 80017e2:	4604      	mov	r4, r0
 80017e4:	460d      	mov	r5, r1
 80017e6:	a174      	add	r1, pc, #464	; (adr r1, 80019b8 <impedance_step+0x220>)
 80017e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	f7fe fd18 	bl	8000224 <__adddf3>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	4972      	ldr	r1, [pc, #456]	; (80019c8 <impedance_step+0x230>)
 80017fe:	f7fe fff1 	bl	80007e4 <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fec1 	bl	8000590 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f955 	bl	8000ac4 <__aeabi_d2uiz>
 800181a:	4603      	mov	r3, r0
 800181c:	613b      	str	r3, [r7, #16]
			set_desired_position(pids[i], pos_ticks);
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	4413      	add	r3, r2
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fe32 	bl	8001496 <set_desired_position>

			// Compute the impedance and set the motor speed
		   outputs[i]=compute_impedance(pids[i], pids[i]->current_position);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	4413      	add	r3, r2
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff fdc3 	bl	80013d4 <compute_impedance>
 800184e:	eeb0 7a40 	vmov.f32	s14, s0
 8001852:	eef0 7a60 	vmov.f32	s15, s1
 8001856:	4a5d      	ldr	r2, [pc, #372]	; (80019cc <impedance_step+0x234>)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4413      	add	r3, r2
 800185e:	ed83 7b00 	vstr	d7, [r3]
		   pwm_outputs[i]=set_motor_speed(pids[i],(float)outputs[i],1,i);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	4413      	add	r3, r2
 800186a:	681c      	ldr	r4, [r3, #0]
 800186c:	4a57      	ldr	r2, [pc, #348]	; (80019cc <impedance_step+0x234>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4413      	add	r3, r2
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f942 	bl	8000b04 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	2101      	movs	r1, #1
 8001886:	ee00 3a10 	vmov	s0, r3
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fe20 	bl	80014d0 <set_motor_speed>
 8001890:	4602      	mov	r2, r0
 8001892:	494f      	ldr	r1, [pc, #316]	; (80019d0 <impedance_step+0x238>)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	        // Check the motor position and set the direction accordingly
	        if(pwm_outputs[i]>PWM_ZERO)
 800189a:	4a4d      	ldr	r2, [pc, #308]	; (80019d0 <impedance_step+0x238>)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018a2:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <impedance_step+0x23c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	f340 809c 	ble.w	80019e4 <impedance_step+0x24c>
	        {
	            // Check if the motor is at or above its max position
	            if ((i == 0 && counter[i] >= 97000) || (i != 0 && counter[i] >= 109000))
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d107      	bne.n	80018c2 <impedance_step+0x12a>
 80018b2:	4a43      	ldr	r2, [pc, #268]	; (80019c0 <impedance_step+0x228>)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	4a47      	ldr	r2, [pc, #284]	; (80019d8 <impedance_step+0x240>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	f200 8112 	bhi.w	8001ae6 <impedance_step+0x34e>
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <impedance_step+0x140>
 80018c8:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <impedance_step+0x228>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	4a42      	ldr	r2, [pc, #264]	; (80019dc <impedance_step+0x244>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	f200 8107 	bhi.w	8001ae6 <impedance_step+0x34e>
	                // Motor is at or above its max position, so we shouldn't try to move it further
	                continue;
	            }

	            // Set the motor direction to UP
	            out[i]=pwm_outputs[i];
 80018d8:	4a3d      	ldr	r2, [pc, #244]	; (80019d0 <impedance_step+0x238>)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	b2d9      	uxtb	r1, r3
 80018e2:	4a3f      	ldr	r2, [pc, #252]	; (80019e0 <impedance_step+0x248>)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	4413      	add	r3, r2
 80018e8:	460a      	mov	r2, r1
 80018ea:	701a      	strb	r2, [r3, #0]
	            Set_HIT(&motors[i]->cfg1_, out[i]);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f103 020c 	add.w	r2, r3, #12
 80018fa:	4939      	ldr	r1, [pc, #228]	; (80019e0 <impedance_step+0x248>)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	440b      	add	r3, r1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	4610      	mov	r0, r2
 8001906:	f001 fb01 	bl	8002f0c <Set_HIT>
	            Set_HIT(&motors[i]->cfg2_, out[i]);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f103 0210 	add.w	r2, r3, #16
 8001918:	4931      	ldr	r1, [pc, #196]	; (80019e0 <impedance_step+0x248>)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	440b      	add	r3, r1
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f001 faf2 	bl	8002f0c <Set_HIT>
	            Set_HOLD(&motors[i]->cfg1_, out[i]);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f103 020c 	add.w	r2, r3, #12
 8001936:	492a      	ldr	r1, [pc, #168]	; (80019e0 <impedance_step+0x248>)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	440b      	add	r3, r1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f001 fac9 	bl	8002ed8 <Set_HOLD>
	            Set_HOLD(&motors[i]->cfg2_, out[i]);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f103 0210 	add.w	r2, r3, #16
 8001954:	4922      	ldr	r1, [pc, #136]	; (80019e0 <impedance_step+0x248>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	440b      	add	r3, r1
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	4610      	mov	r0, r2
 8001960:	f001 faba 	bl	8002ed8 <Set_HOLD>
	            Motor_writeCfgRegister(&motors[i]->cfg1_, motors[i]->channel1_);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f103 000c 	add.w	r0, r3, #12
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4619      	mov	r1, r3
 8001980:	f001 f9b8 	bl	8002cf4 <Motor_writeCfgRegister>
	            Motor_writeCfgRegister(&motors[i]->cfg2_, motors[i]->channel2_);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f103 0010 	add.w	r0, r3, #16
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4619      	mov	r1, r3
 80019a0:	f001 f9a8 	bl	8002cf4 <Motor_writeCfgRegister>
	            Motor_setDirection(i+1, UP,stat_reg);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	2102      	movs	r1, #2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 fa37 	bl	8002e20 <Motor_setDirection>
 80019b2:	e099      	b.n	8001ae8 <impedance_step+0x350>
 80019b4:	f3af 8000 	nop.w
 80019b8:	54442d18 	.word	0x54442d18
 80019bc:	400921fb 	.word	0x400921fb
 80019c0:	20000340 	.word	0x20000340
 80019c4:	2000000c 	.word	0x2000000c
 80019c8:	40b00000 	.word	0x40b00000
 80019cc:	20000370 	.word	0x20000370
 80019d0:	20000388 	.word	0x20000388
 80019d4:	200001f4 	.word	0x200001f4
 80019d8:	00017ae7 	.word	0x00017ae7
 80019dc:	0001a9c7 	.word	0x0001a9c7
 80019e0:	200001f8 	.word	0x200001f8
	        }
	        else if (pwm_outputs[i]<-PWM_ZERO)
 80019e4:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <impedance_step+0x368>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019ec:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <impedance_step+0x36c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	425b      	negs	r3, r3
 80019f2:	429a      	cmp	r2, r3
 80019f4:	da6f      	bge.n	8001ad6 <impedance_step+0x33e>
	        {
	            // Set the motor direction to DOWN
	            out[i]=-pwm_outputs[i];
 80019f6:	4a42      	ldr	r2, [pc, #264]	; (8001b00 <impedance_step+0x368>)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	425b      	negs	r3, r3
 8001a02:	b2d9      	uxtb	r1, r3
 8001a04:	4a40      	ldr	r2, [pc, #256]	; (8001b08 <impedance_step+0x370>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	4413      	add	r3, r2
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	701a      	strb	r2, [r3, #0]
	            Set_HIT(&motors[i]->cfg1_, out[i]);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f103 020c 	add.w	r2, r3, #12
 8001a1c:	493a      	ldr	r1, [pc, #232]	; (8001b08 <impedance_step+0x370>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	440b      	add	r3, r1
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f001 fa70 	bl	8002f0c <Set_HIT>
	            Set_HIT(&motors[i]->cfg2_, out[i]);
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f103 0210 	add.w	r2, r3, #16
 8001a3a:	4933      	ldr	r1, [pc, #204]	; (8001b08 <impedance_step+0x370>)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	440b      	add	r3, r1
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4610      	mov	r0, r2
 8001a46:	f001 fa61 	bl	8002f0c <Set_HIT>
	            Set_HOLD(&motors[i]->cfg1_, out[i]);
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f103 020c 	add.w	r2, r3, #12
 8001a58:	492b      	ldr	r1, [pc, #172]	; (8001b08 <impedance_step+0x370>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f001 fa38 	bl	8002ed8 <Set_HOLD>
	            Set_HOLD(&motors[i]->cfg2_, out[i]);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f103 0210 	add.w	r2, r3, #16
 8001a76:	4924      	ldr	r1, [pc, #144]	; (8001b08 <impedance_step+0x370>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	440b      	add	r3, r1
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f001 fa29 	bl	8002ed8 <Set_HOLD>
	            Motor_writeCfgRegister(&motors[i]->cfg1_, motors[i]->channel1_);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f103 000c 	add.w	r0, r3, #12
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f001 f927 	bl	8002cf4 <Motor_writeCfgRegister>
	            Motor_writeCfgRegister(&motors[i]->cfg2_, motors[i]->channel2_);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f103 0010 	add.w	r0, r3, #16
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f001 f917 	bl	8002cf4 <Motor_writeCfgRegister>
	            Motor_setDirection(i+1, DOWN,stat_reg);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 f9a6 	bl	8002e20 <Motor_setDirection>
 8001ad4:	e008      	b.n	8001ae8 <impedance_step+0x350>
	        }
	        else
	        {
	            // Set the motor direction to BREAK
	            Motor_setDirection(i+1, BREAK,stat_reg);
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	2103      	movs	r1, #3
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 f99e 	bl	8002e20 <Motor_setDirection>
 8001ae4:	e000      	b.n	8001ae8 <impedance_step+0x350>
	                continue;
 8001ae6:	bf00      	nop
	for(int i=0;i<3;i++)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	f77f ae5a 	ble.w	80017aa <impedance_step+0x12>
	        }
	    }
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bdb0      	pop	{r4, r5, r7, pc}
 8001b00:	20000388 	.word	0x20000388
 8001b04:	200001f4 	.word	0x200001f4
 8001b08:	200001f8 	.word	0x200001f8

08001b0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_DMA_Init+0x50>)
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <MX_DMA_Init+0x50>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6493      	str	r3, [r2, #72]	; 0x48
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_DMA_Init+0x50>)
 8001b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_DMA_Init+0x50>)
 8001b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <MX_DMA_Init+0x50>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6493      	str	r3, [r2, #72]	; 0x48
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_DMA_Init+0x50>)
 8001b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	200b      	movs	r0, #11
 8001b48:	f003 f91b 	bl	8004d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b4c:	200b      	movs	r0, #11
 8001b4e:	f003 f932 	bl	8004db6 <HAL_NVIC_EnableIRQ>

}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000

08001b60 <encoder_init>:
 * Initialize an encoder.
 *
 * This function initializes an encoder with the given timer and calibration factor.
 * The counter, previous_counter and absolute_position are reset to 0.
 */
void encoder_init(Encoder* self, TIM_HandleTypeDef* htim, float calibration_factor) {
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	ed87 0a01 	vstr	s0, [r7, #4]
    self->htim = htim;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	601a      	str	r2, [r3, #0]
    self->counter = 0;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	809a      	strh	r2, [r3, #4]
    self->previous_counter = 0;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	80da      	strh	r2, [r3, #6]
    self->absolute_position = 0;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <get_absolute_position>:
 *
 * This function calculates the absolute position of an encoder by
 * getting the current counter, calculating the difference from the
 * previous counter, and then updating the absolute position and previous counter.
 */
int32_t get_absolute_position(Encoder* en) {
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
    uint16_t current_counter = __HAL_TIM_GET_COUNTER(en->htim);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	81bb      	strh	r3, [r7, #12]
    int16_t diff = (int16_t)(current_counter - en->previous_counter);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	88db      	ldrh	r3, [r3, #6]
 8001ba8:	89ba      	ldrh	r2, [r7, #12]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	81fb      	strh	r3, [r7, #14]

    // Correct for counter overflow
    if (diff < -32000) {
 8001bb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bb4:	f513 4ffa 	cmn.w	r3, #32000	; 0x7d00
 8001bb8:	db03      	blt.n	8001bc2 <get_absolute_position+0x30>
        diff += 65536;
    }
    // Correct for counter underflow
    else if (diff > 32000) {
 8001bba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bbe:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
        diff -= 65536;
    }

    en->absolute_position += diff;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bca:	441a      	add	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]
    en->previous_counter = current_counter;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	89ba      	ldrh	r2, [r7, #12]
 8001bd4:	80da      	strh	r2, [r3, #6]

    return en->absolute_position;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001bec:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001bee:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <MX_FDCAN2_Init+0x8c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfe:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001c00:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c1a:	2206      	movs	r2, #6
 8001c1c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 2;
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c20:	2202      	movs	r2, #2
 8001c22:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 17;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c26:	2211      	movs	r2, #17
 8001c28:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 6;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c2c:	2206      	movs	r2, #6
 8001c2e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 6;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c32:	2206      	movs	r2, #6
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 9;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c38:	2209      	movs	r2, #9
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 15;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c3e:	220f      	movs	r2, #15
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 9;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c44:	2209      	movs	r2, #9
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 1;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_FDCAN2_Init+0x88>)
 8001c5c:	f003 fa84 	bl	8005168 <HAL_FDCAN_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 8001c66:	f000 fd4a 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200002d4 	.word	0x200002d4
 8001c74:	40006800 	.word	0x40006800

08001c78 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b09e      	sub	sp, #120	; 0x78
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	2254      	movs	r2, #84	; 0x54
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f006 ff25 	bl	8008ae8 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_FDCAN_MspInit+0xb8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d13f      	bne.n	8001d28 <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 ffd3 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001cc4:	f000 fd1b 	bl	80026fe <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_FDCAN_MspInit+0xbc>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_FDCAN_MspInit+0xbc>)
 8001cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_FDCAN_MspInit+0xbc>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_FDCAN_MspInit+0xbc>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_FDCAN_MspInit+0xbc>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_FDCAN_MspInit+0xbc>)
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cf8:	2360      	movs	r3, #96	; 0x60
 8001cfa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001d08:	2309      	movs	r3, #9
 8001d0a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d10:	4619      	mov	r1, r3
 8001d12:	4809      	ldr	r0, [pc, #36]	; (8001d38 <HAL_FDCAN_MspInit+0xc0>)
 8001d14:	f004 f844 	bl	8005da0 <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2056      	movs	r0, #86	; 0x56
 8001d1e:	f003 f830 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001d22:	2056      	movs	r0, #86	; 0x56
 8001d24:	f003 f847 	bl	8004db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3778      	adds	r7, #120	; 0x78
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40006800 	.word	0x40006800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	48000400 	.word	0x48000400

08001d3c <fdcan_init>:
  /* USER CODE END FDCAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void fdcan_init(FDCAN_HandleTypeDef *hfdcan){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	fdcan = *hfdcan;
 8001d44:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <fdcan_init+0x60>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4610      	mov	r0, r2
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	2364      	movs	r3, #100	; 0x64
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f006 febc 	bl	8008acc <memcpy>
	TxHeader.Identifier= fingerAddress;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <fdcan_init+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <fdcan_init+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
	TxHeader.IdType=FDCAN_STANDARD_ID;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <fdcan_init+0x68>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType=FDCAN_DATA_FRAME;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <fdcan_init+0x68>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength=FDCAN_DLC_BYTES_12;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <fdcan_init+0x68>)
 8001d6c:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001d70:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator=FDCAN_ESI_ACTIVE;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <fdcan_init+0x68>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch=FDCAN_BRS_OFF;
 8001d78:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <fdcan_init+0x68>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat=FDCAN_FD_CAN;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <fdcan_init+0x68>)
 8001d80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d84:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <fdcan_init+0x68>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker=0;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <fdcan_init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000024c 	.word	0x2000024c
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000200 	.word	0x20000200

08001da8 <fdcan_process_rx_message>:
		 fingerAddress=Thumb;
		 break;
	 }
}

void fdcan_process_rx_message(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	uint16_t motor_id = RxHeader.Identifier;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <fdcan_process_rx_message+0x40>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	80fb      	strh	r3, [r7, #6]
	if (motor_id == fingerAddress) {
 8001db4:	88fa      	ldrh	r2, [r7, #6]
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <fdcan_process_rx_message+0x44>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d110      	bne.n	8001de0 <fdcan_process_rx_message+0x38>
		pos[0] = RxData[5];
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <fdcan_process_rx_message+0x48>)
 8001dc0:	795b      	ldrb	r3, [r3, #5]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <fdcan_process_rx_message+0x4c>)
 8001dc6:	601a      	str	r2, [r3, #0]
		pos[1] = RxData[6];
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <fdcan_process_rx_message+0x48>)
 8001dca:	799b      	ldrb	r3, [r3, #6]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <fdcan_process_rx_message+0x4c>)
 8001dd0:	605a      	str	r2, [r3, #4]
		pos[2] = RxData[7];
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <fdcan_process_rx_message+0x48>)
 8001dd4:	79db      	ldrb	r3, [r3, #7]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <fdcan_process_rx_message+0x4c>)
 8001dda:	609a      	str	r2, [r3, #8]
		fdcan_transmit_tx_message();
 8001ddc:	f000 f80c 	bl	8001df8 <fdcan_transmit_tx_message>
	}
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000224 	.word	0x20000224
 8001dec:	20000000 	.word	0x20000000
 8001df0:	200002b8 	.word	0x200002b8
 8001df4:	2000000c 	.word	0x2000000c

08001df8 <fdcan_transmit_tx_message>:

void fdcan_transmit_tx_message(void){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	TxData[0] = counter[0]/2048;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <fdcan_transmit_tx_message+0x5c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0adb      	lsrs	r3, r3, #11
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <fdcan_transmit_tx_message+0x60>)
 8001e06:	701a      	strb	r2, [r3, #0]
	TxData[1] = counter[1]/2048;
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <fdcan_transmit_tx_message+0x5c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	0adb      	lsrs	r3, r3, #11
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <fdcan_transmit_tx_message+0x60>)
 8001e12:	705a      	strb	r2, [r3, #1]
	TxData[2] = counter[2]/2048;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <fdcan_transmit_tx_message+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	0adb      	lsrs	r3, r3, #11
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <fdcan_transmit_tx_message+0x60>)
 8001e1e:	709a      	strb	r2, [r3, #2]
	TxData[3] = pos[0];
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <fdcan_transmit_tx_message+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <fdcan_transmit_tx_message+0x60>)
 8001e28:	70da      	strb	r2, [r3, #3]
	TxData[4] = pos[1];
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <fdcan_transmit_tx_message+0x64>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <fdcan_transmit_tx_message+0x60>)
 8001e32:	711a      	strb	r2, [r3, #4]
	TxData[5] = pos[2];
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <fdcan_transmit_tx_message+0x64>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <fdcan_transmit_tx_message+0x60>)
 8001e3c:	715a      	strb	r2, [r3, #5]
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, TxData);
 8001e3e:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <fdcan_transmit_tx_message+0x60>)
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <fdcan_transmit_tx_message+0x68>)
 8001e42:	4808      	ldr	r0, [pc, #32]	; (8001e64 <fdcan_transmit_tx_message+0x6c>)
 8001e44:	f003 fb12 	bl	800546c <HAL_FDCAN_AddMessageToTxFifoQ>
	receiveNsendFlag = false;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <fdcan_transmit_tx_message+0x70>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000340 	.word	0x20000340
 8001e58:	200002b0 	.word	0x200002b0
 8001e5c:	2000000c 	.word	0x2000000c
 8001e60:	20000200 	.word	0x20000200
 8001e64:	200002d4 	.word	0x200002d4
 8001e68:	20000394 	.word	0x20000394
 8001e6c:	00000000 	.word	0x00000000

08001e70 <init_fsm>:
 * This function initializes the FSM.
 * It sets up the states, initializes the FDCAN, timers, encoders, motors and control PIDs.
 * If any initialization fails, it updates the FSM to a fault state.
 */
void init_fsm()
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    /* Set the initial state */
    state.state = INIT_MODE;//currently in INIT Mode
 8001e74:	4b84      	ldr	r3, [pc, #528]	; (8002088 <init_fsm+0x218>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
    state.next_state = MOTOR_MODE;//next mode is motor control ie PID/Impedance
 8001e7a:	4b83      	ldr	r3, [pc, #524]	; (8002088 <init_fsm+0x218>)
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	705a      	strb	r2, [r3, #1]
    state.ready = 0;//not ready to move to next mode
 8001e80:	4b81      	ldr	r3, [pc, #516]	; (8002088 <init_fsm+0x218>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	70da      	strb	r2, [r3, #3]

    /* Set up the FDCAN */
    fdcan_init(&hfdcan2);
 8001e86:	4881      	ldr	r0, [pc, #516]	; (800208c <init_fsm+0x21c>)
 8001e88:	f7ff ff58 	bl	8001d3c <fdcan_init>
//    set_fingerAddress();


    // Start FDCAN and handle possible failure
    if (HAL_FDCAN_Start(&hfdcan2)!= HAL_OK){
 8001e8c:	487f      	ldr	r0, [pc, #508]	; (800208c <init_fsm+0x21c>)
 8001e8e:	f003 fac5 	bl	800541c <HAL_FDCAN_Start>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d009      	beq.n	8001eac <init_fsm+0x3c>
        errorStatus.fdcanCommFailure = 1;
 8001e98:	4a7d      	ldr	r2, [pc, #500]	; (8002090 <init_fsm+0x220>)
 8001e9a:	7813      	ldrb	r3, [r2, #0]
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	7013      	strb	r3, [r2, #0]
        update_fsm(&state, FAULT_CMD);
 8001ea2:	2106      	movs	r1, #6
 8001ea4:	4878      	ldr	r0, [pc, #480]	; (8002088 <init_fsm+0x218>)
 8001ea6:	f000 f9f3 	bl	8002290 <update_fsm>
        return;
 8001eaa:	e0e5      	b.n	8002078 <init_fsm+0x208>
    }

    /* Activate FDCAN notifications and handle possible failure */
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8001eac:	2200      	movs	r2, #0
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4876      	ldr	r0, [pc, #472]	; (800208c <init_fsm+0x21c>)
 8001eb2:	f003 fbf9 	bl	80056a8 <HAL_FDCAN_ActivateNotification>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <init_fsm+0x60>
        errorStatus.fdcanCommFailure = 1;
 8001ebc:	4a74      	ldr	r2, [pc, #464]	; (8002090 <init_fsm+0x220>)
 8001ebe:	7813      	ldrb	r3, [r2, #0]
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	7013      	strb	r3, [r2, #0]
        update_fsm(&state, FAULT_CMD);
 8001ec6:	2106      	movs	r1, #6
 8001ec8:	486f      	ldr	r0, [pc, #444]	; (8002088 <init_fsm+0x218>)
 8001eca:	f000 f9e1 	bl	8002290 <update_fsm>
        return;
 8001ece:	e0d3      	b.n	8002078 <init_fsm+0x208>
    }

    /* Start the watchdog timer and handle possible failure */
    if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK){
 8001ed0:	4870      	ldr	r0, [pc, #448]	; (8002094 <init_fsm+0x224>)
 8001ed2:	f005 fefd 	bl	8007cd0 <HAL_TIM_Base_Start_IT>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d009      	beq.n	8001ef0 <init_fsm+0x80>
        errorStatus.timerFailure = 1;
 8001edc:	4a6c      	ldr	r2, [pc, #432]	; (8002090 <init_fsm+0x220>)
 8001ede:	7813      	ldrb	r3, [r2, #0]
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	7013      	strb	r3, [r2, #0]
        update_fsm(&state, FAULT_CMD);
 8001ee6:	2106      	movs	r1, #6
 8001ee8:	4867      	ldr	r0, [pc, #412]	; (8002088 <init_fsm+0x218>)
 8001eea:	f000 f9d1 	bl	8002290 <update_fsm>
        return;
 8001eee:	e0c3      	b.n	8002078 <init_fsm+0x208>
    }

    /* Start the encoder timers and handle possible failure */
    if(HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL)!=HAL_OK ||
 8001ef0:	213c      	movs	r1, #60	; 0x3c
 8001ef2:	4869      	ldr	r0, [pc, #420]	; (8002098 <init_fsm+0x228>)
 8001ef4:	f006 f80a 	bl	8007f0c <HAL_TIM_Encoder_Start_IT>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10d      	bne.n	8001f1a <init_fsm+0xaa>
       HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL)!=HAL_OK ||
 8001efe:	213c      	movs	r1, #60	; 0x3c
 8001f00:	4866      	ldr	r0, [pc, #408]	; (800209c <init_fsm+0x22c>)
 8001f02:	f006 f803 	bl	8007f0c <HAL_TIM_Encoder_Start_IT>
 8001f06:	4603      	mov	r3, r0
    if(HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL)!=HAL_OK ||
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <init_fsm+0xaa>
       HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL)!=HAL_OK) {
 8001f0c:	213c      	movs	r1, #60	; 0x3c
 8001f0e:	4864      	ldr	r0, [pc, #400]	; (80020a0 <init_fsm+0x230>)
 8001f10:	f005 fffc 	bl	8007f0c <HAL_TIM_Encoder_Start_IT>
 8001f14:	4603      	mov	r3, r0
       HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL)!=HAL_OK ||
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <init_fsm+0xbe>
        errorStatus.timerFailure = 1;
 8001f1a:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <init_fsm+0x220>)
 8001f1c:	7813      	ldrb	r3, [r2, #0]
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	7013      	strb	r3, [r2, #0]
        update_fsm(&state, FAULT_CMD);
 8001f24:	2106      	movs	r1, #6
 8001f26:	4858      	ldr	r0, [pc, #352]	; (8002088 <init_fsm+0x218>)
 8001f28:	f000 f9b2 	bl	8002290 <update_fsm>
        return;
 8001f2c:	e0a4      	b.n	8002078 <init_fsm+0x208>
    }

    /* Initialize encoders */
    encoder_init(&encoders[0], &htim1, 1);
 8001f2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f32:	4959      	ldr	r1, [pc, #356]	; (8002098 <init_fsm+0x228>)
 8001f34:	485b      	ldr	r0, [pc, #364]	; (80020a4 <init_fsm+0x234>)
 8001f36:	f7ff fe13 	bl	8001b60 <encoder_init>
    encoder_init(&encoders[1], &htim2, 1);
 8001f3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f3e:	4957      	ldr	r1, [pc, #348]	; (800209c <init_fsm+0x22c>)
 8001f40:	4859      	ldr	r0, [pc, #356]	; (80020a8 <init_fsm+0x238>)
 8001f42:	f7ff fe0d 	bl	8001b60 <encoder_init>
    encoder_init(&encoders[2], &htim3, 1);
 8001f46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f4a:	4955      	ldr	r1, [pc, #340]	; (80020a0 <init_fsm+0x230>)
 8001f4c:	4857      	ldr	r0, [pc, #348]	; (80020ac <init_fsm+0x23c>)
 8001f4e:	f7ff fe07 	bl	8001b60 <encoder_init>

    /* Initialize MAX22200 status register and MAX22200 */
    MAX22200_init_statreg(&stats_, &status_Reg);
 8001f52:	4957      	ldr	r1, [pc, #348]	; (80020b0 <init_fsm+0x240>)
 8001f54:	4857      	ldr	r0, [pc, #348]	; (80020b4 <init_fsm+0x244>)
 8001f56:	f000 fcb3 	bl	80028c0 <MAX22200_init_statreg>
    MAX22200_init(&stats_);
 8001f5a:	4856      	ldr	r0, [pc, #344]	; (80020b4 <init_fsm+0x244>)
 8001f5c:	f000 fbd4 	bl	8002708 <MAX22200_init>

    /* Initialize Motors */
    MAX22000_init_cfg_reg(&regs[0], &regs[1]);
 8001f60:	4955      	ldr	r1, [pc, #340]	; (80020b8 <init_fsm+0x248>)
 8001f62:	4856      	ldr	r0, [pc, #344]	; (80020bc <init_fsm+0x24c>)
 8001f64:	f000 fe7c 	bl	8002c60 <MAX22000_init_cfg_reg>
    MAX22000_init_cfg_reg(&regs[2], &regs[3]);
 8001f68:	4955      	ldr	r1, [pc, #340]	; (80020c0 <init_fsm+0x250>)
 8001f6a:	4856      	ldr	r0, [pc, #344]	; (80020c4 <init_fsm+0x254>)
 8001f6c:	f000 fe78 	bl	8002c60 <MAX22000_init_cfg_reg>
    MAX22000_init_cfg_reg(&regs[4], &regs[5]);
 8001f70:	4955      	ldr	r1, [pc, #340]	; (80020c8 <init_fsm+0x258>)
 8001f72:	4856      	ldr	r0, [pc, #344]	; (80020cc <init_fsm+0x25c>)
 8001f74:	f000 fe74 	bl	8002c60 <MAX22000_init_cfg_reg>
    Motor_init(&m1,&regs[0],&regs[1],1);
 8001f78:	2301      	movs	r3, #1
 8001f7a:	4a4f      	ldr	r2, [pc, #316]	; (80020b8 <init_fsm+0x248>)
 8001f7c:	494f      	ldr	r1, [pc, #316]	; (80020bc <init_fsm+0x24c>)
 8001f7e:	4854      	ldr	r0, [pc, #336]	; (80020d0 <init_fsm+0x260>)
 8001f80:	f000 fe84 	bl	8002c8c <Motor_init>
    Motor_init(&m2,&regs[2],&regs[3],2);
 8001f84:	2302      	movs	r3, #2
 8001f86:	4a4e      	ldr	r2, [pc, #312]	; (80020c0 <init_fsm+0x250>)
 8001f88:	494e      	ldr	r1, [pc, #312]	; (80020c4 <init_fsm+0x254>)
 8001f8a:	4852      	ldr	r0, [pc, #328]	; (80020d4 <init_fsm+0x264>)
 8001f8c:	f000 fe7e 	bl	8002c8c <Motor_init>
    Motor_init(&m3,&regs[4],&regs[5],3);
 8001f90:	2303      	movs	r3, #3
 8001f92:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <init_fsm+0x258>)
 8001f94:	494d      	ldr	r1, [pc, #308]	; (80020cc <init_fsm+0x25c>)
 8001f96:	4850      	ldr	r0, [pc, #320]	; (80020d8 <init_fsm+0x268>)
 8001f98:	f000 fe78 	bl	8002c8c <Motor_init>

    /* Calibrate motors and handle possible failure */
    calibration(&status_Reg, motors);
 8001f9c:	494f      	ldr	r1, [pc, #316]	; (80020dc <init_fsm+0x26c>)
 8001f9e:	4844      	ldr	r0, [pc, #272]	; (80020b0 <init_fsm+0x240>)
 8001fa0:	f7ff f878 	bl	8001094 <calibration>
    if(!calibrated){
 8001fa4:	4b4e      	ldr	r3, [pc, #312]	; (80020e0 <init_fsm+0x270>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <init_fsm+0x156>
        errorStatus.calibrationFailure = 1;
 8001fb2:	4a37      	ldr	r2, [pc, #220]	; (8002090 <init_fsm+0x220>)
 8001fb4:	7813      	ldrb	r3, [r2, #0]
 8001fb6:	f043 0308 	orr.w	r3, r3, #8
 8001fba:	7013      	strb	r3, [r2, #0]
        update_fsm(&state, FAULT_CMD);
 8001fbc:	2106      	movs	r1, #6
 8001fbe:	4832      	ldr	r0, [pc, #200]	; (8002088 <init_fsm+0x218>)
 8001fc0:	f000 f966 	bl	8002290 <update_fsm>
        return;
 8001fc4:	e058      	b.n	8002078 <init_fsm+0x208>
    }

    /* Initialize control PID */
    control_init(&pid1,kp,ki,kd,0,0,0,CONTROL_INIT);
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <init_fsm+0x274>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <init_fsm+0x278>)
 8001fce:	ed93 7a00 	vldr	s14, [r3]
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <init_fsm+0x27c>)
 8001fd4:	edd3 6a00 	vldr	s13, [r3]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	ed9f 2b29 	vldr	d2, [pc, #164]	; 8002080 <init_fsm+0x210>
 8001fde:	2100      	movs	r1, #0
 8001fe0:	eddf 1a43 	vldr	s3, [pc, #268]	; 80020f0 <init_fsm+0x280>
 8001fe4:	eeb0 1a66 	vmov.f32	s2, s13
 8001fe8:	eef0 0a47 	vmov.f32	s1, s14
 8001fec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff0:	4840      	ldr	r0, [pc, #256]	; (80020f4 <init_fsm+0x284>)
 8001ff2:	f7ff f983 	bl	80012fc <control_init>
    pids[0]=&pid1;
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <init_fsm+0x288>)
 8001ff8:	4a3e      	ldr	r2, [pc, #248]	; (80020f4 <init_fsm+0x284>)
 8001ffa:	601a      	str	r2, [r3, #0]
    control_init(&pid2,kp,ki,kd,0,0,0,CONTROL_INIT);
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <init_fsm+0x274>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <init_fsm+0x278>)
 8002004:	ed93 7a00 	vldr	s14, [r3]
 8002008:	4b38      	ldr	r3, [pc, #224]	; (80020ec <init_fsm+0x27c>)
 800200a:	edd3 6a00 	vldr	s13, [r3]
 800200e:	2200      	movs	r2, #0
 8002010:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8002080 <init_fsm+0x210>
 8002014:	2100      	movs	r1, #0
 8002016:	eddf 1a36 	vldr	s3, [pc, #216]	; 80020f0 <init_fsm+0x280>
 800201a:	eeb0 1a66 	vmov.f32	s2, s13
 800201e:	eef0 0a47 	vmov.f32	s1, s14
 8002022:	eeb0 0a67 	vmov.f32	s0, s15
 8002026:	4835      	ldr	r0, [pc, #212]	; (80020fc <init_fsm+0x28c>)
 8002028:	f7ff f968 	bl	80012fc <control_init>
    pids[1]=&pid2;
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <init_fsm+0x288>)
 800202e:	4a33      	ldr	r2, [pc, #204]	; (80020fc <init_fsm+0x28c>)
 8002030:	605a      	str	r2, [r3, #4]
    control_init(&pid3,kp,ki,kd,0,0,0,CONTROL_INIT);
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <init_fsm+0x274>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <init_fsm+0x278>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <init_fsm+0x27c>)
 8002040:	edd3 6a00 	vldr	s13, [r3]
 8002044:	2200      	movs	r2, #0
 8002046:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8002080 <init_fsm+0x210>
 800204a:	2100      	movs	r1, #0
 800204c:	eddf 1a28 	vldr	s3, [pc, #160]	; 80020f0 <init_fsm+0x280>
 8002050:	eeb0 1a66 	vmov.f32	s2, s13
 8002054:	eef0 0a47 	vmov.f32	s1, s14
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	4828      	ldr	r0, [pc, #160]	; (8002100 <init_fsm+0x290>)
 800205e:	f7ff f94d 	bl	80012fc <control_init>
    pids[2]=&pid3;
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <init_fsm+0x288>)
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <init_fsm+0x290>)
 8002066:	609a      	str	r2, [r3, #8]

    /* Increment initialization count and set the FSM to ready */
    count_init++;
 8002068:	4b26      	ldr	r3, [pc, #152]	; (8002104 <init_fsm+0x294>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	4a25      	ldr	r2, [pc, #148]	; (8002104 <init_fsm+0x294>)
 8002070:	6013      	str	r3, [r2, #0]
    state.ready = 1;
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <init_fsm+0x218>)
 8002074:	2201      	movs	r2, #1
 8002076:	70da      	strb	r2, [r3, #3]
}
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w
	...
 8002088:	20000574 	.word	0x20000574
 800208c:	200002d4 	.word	0x200002d4
 8002090:	2000033c 	.word	0x2000033c
 8002094:	20000738 	.word	0x20000738
 8002098:	20000608 	.word	0x20000608
 800209c:	20000654 	.word	0x20000654
 80020a0:	200006a0 	.word	0x200006a0
 80020a4:	200004fc 	.word	0x200004fc
 80020a8:	20000508 	.word	0x20000508
 80020ac:	20000514 	.word	0x20000514
 80020b0:	2000039c 	.word	0x2000039c
 80020b4:	200003bc 	.word	0x200003bc
 80020b8:	20000524 	.word	0x20000524
 80020bc:	20000520 	.word	0x20000520
 80020c0:	2000052c 	.word	0x2000052c
 80020c4:	20000528 	.word	0x20000528
 80020c8:	20000534 	.word	0x20000534
 80020cc:	20000530 	.word	0x20000530
 80020d0:	20000538 	.word	0x20000538
 80020d4:	2000054c 	.word	0x2000054c
 80020d8:	20000560 	.word	0x20000560
 80020dc:	20000018 	.word	0x20000018
 80020e0:	20000364 	.word	0x20000364
 80020e4:	20000004 	.word	0x20000004
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000368 	.word	0x20000368
 80020f0:	00000000 	.word	0x00000000
 80020f4:	200003d0 	.word	0x200003d0
 80020f8:	200004f0 	.word	0x200004f0
 80020fc:	20000430 	.word	0x20000430
 8002100:	20000490 	.word	0x20000490
 8002104:	20000338 	.word	0x20000338

08002108 <run_fsm>:
// Finite State Machine (FSM) Runner
// This function is run every timer6 interrupt cycle
void run_fsm(FSMStruct * fsmstate)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    // State transition management
    // Safely exit the old state if the next state is different
    if(fsmstate->next_state != fsmstate->state)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	785a      	ldrb	r2, [r3, #1]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d00d      	beq.n	8002138 <run_fsm+0x30>
    {
        fsm_exit_state(fsmstate);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f875 	bl	800220c <fsm_exit_state>

        // If the previous state is ready, enter the new state
        if(fsmstate->ready)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	78db      	ldrb	r3, [r3, #3]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <run_fsm+0x30>
        {
            fsmstate->state = fsmstate->next_state;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	785a      	ldrb	r2, [r3, #1]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	701a      	strb	r2, [r3, #0]
            fsm_enter_state(fsmstate);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f848 	bl	80021c8 <fsm_enter_state>
        }
    }

    // Process tasks based on the current state
    switch(fsmstate->state)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b07      	cmp	r3, #7
 800213e:	d832      	bhi.n	80021a6 <run_fsm+0x9e>
 8002140:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <run_fsm+0x40>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002169 	.word	0x08002169
 800214c:	080021a1 	.word	0x080021a1
 8002150:	08002177 	.word	0x08002177
 8002154:	08002181 	.word	0x08002181
 8002158:	080021a1 	.word	0x080021a1
 800215c:	080021a1 	.word	0x080021a1
 8002160:	08002195 	.word	0x08002195
 8002164:	080021a1 	.word	0x080021a1
    {
        case INIT_MODE:
            if(count_init==0)
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <run_fsm+0xa8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d119      	bne.n	80021a4 <run_fsm+0x9c>
            {
                init_fsm();
 8002170:	f7ff fe7e 	bl	8001e70 <init_fsm>
            }
            break;
 8002174:	e016      	b.n	80021a4 <run_fsm+0x9c>
        case MENU_MODE:
            // menu();
            break;

        case CALIBRATION_MODE:
            calibration(&status_Reg, motors);
 8002176:	490f      	ldr	r1, [pc, #60]	; (80021b4 <run_fsm+0xac>)
 8002178:	480f      	ldr	r0, [pc, #60]	; (80021b8 <run_fsm+0xb0>)
 800217a:	f7fe ff8b 	bl	8001094 <calibration>
            break;
 800217e:	e012      	b.n	80021a6 <run_fsm+0x9e>

        case MOTOR_MODE:
            watchdog();
 8002180:	f000 f912 	bl	80023a8 <watchdog>
            controller_faults();
 8002184:	f000 f8f6 	bl	8002374 <controller_faults>

            // pid_step(&status_Reg, pids, motors);
            impedance_step(&status_Reg, pids, motors);
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <run_fsm+0xac>)
 800218a:	490c      	ldr	r1, [pc, #48]	; (80021bc <run_fsm+0xb4>)
 800218c:	480a      	ldr	r0, [pc, #40]	; (80021b8 <run_fsm+0xb0>)
 800218e:	f7ff fb03 	bl	8001798 <impedance_step>
            break;
 8002192:	e008      	b.n	80021a6 <run_fsm+0x9e>
        case ENCODER_MODE:
            // read_encoder();
            break;

        case FAULT_MODE:
            Errors_Handler(errorStatus, &state);
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <run_fsm+0xb8>)
 8002196:	490b      	ldr	r1, [pc, #44]	; (80021c4 <run_fsm+0xbc>)
 8002198:	7818      	ldrb	r0, [r3, #0]
 800219a:	f000 f963 	bl	8002464 <Errors_Handler>
            break;
 800219e:	e002      	b.n	80021a6 <run_fsm+0x9e>
            break;
 80021a0:	bf00      	nop
 80021a2:	e000      	b.n	80021a6 <run_fsm+0x9e>
            break;
 80021a4:	bf00      	nop

        case WATCHDOG_MODE:
            // Handle watchdog mode
            break;
    }
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000338 	.word	0x20000338
 80021b4:	20000018 	.word	0x20000018
 80021b8:	2000039c 	.word	0x2000039c
 80021bc:	200004f0 	.word	0x200004f0
 80021c0:	2000033c 	.word	0x2000033c
 80021c4:	20000574 	.word	0x20000574

080021c8 <fsm_enter_state>:

// FSM State Enter
// Called when entering a new state. Do necessary setup.
void fsm_enter_state(FSMStruct * fsmstate)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    switch(fsmstate->state)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d811      	bhi.n	80021fe <fsm_enter_state+0x36>
 80021da:	a201      	add	r2, pc, #4	; (adr r2, 80021e0 <fsm_enter_state+0x18>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	080021fd 	.word	0x080021fd
 80021e4:	080021fd 	.word	0x080021fd
 80021e8:	080021fd 	.word	0x080021fd
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	080021fd 	.word	0x080021fd
 80021f4:	080021fd 	.word	0x080021fd
 80021f8:	080021fd 	.word	0x080021fd
    {
        case MENU_MODE:
            // Setup for MENU_MODE
            break;
 80021fc:	bf00      	nop

        case WATCHDOG_MODE:
            // Setup for WATCHDOG_MODE
            break;
    }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop

0800220c <fsm_exit_state>:

// FSM State Exit
// Called when exiting the current state. Do necessary cleanup.
void fsm_exit_state(FSMStruct * fsmstate)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    switch(fsmstate->state)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b07      	cmp	r3, #7
 800221a:	d833      	bhi.n	8002284 <fsm_exit_state+0x78>
 800221c:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <fsm_exit_state+0x18>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	08002245 	.word	0x08002245
 8002228:	0800224d 	.word	0x0800224d
 800222c:	0800226d 	.word	0x0800226d
 8002230:	08002265 	.word	0x08002265
 8002234:	08002255 	.word	0x08002255
 8002238:	0800225d 	.word	0x0800225d
 800223c:	08002275 	.word	0x08002275
 8002240:	0800227d 	.word	0x0800227d
    {
        case INIT_MODE:
            fsmstate->ready = 1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	70da      	strb	r2, [r3, #3]
            break;
 800224a:	e01b      	b.n	8002284 <fsm_exit_state+0x78>

        case MENU_MODE:
            fsmstate->ready = 1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	70da      	strb	r2, [r3, #3]
            break;
 8002252:	e017      	b.n	8002284 <fsm_exit_state+0x78>

        case SETUP_MODE:
            fsmstate->ready = 1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	70da      	strb	r2, [r3, #3]
            break;
 800225a:	e013      	b.n	8002284 <fsm_exit_state+0x78>

        case ENCODER_MODE:
            fsmstate->ready = 1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	70da      	strb	r2, [r3, #3]
            break;
 8002262:	e00f      	b.n	8002284 <fsm_exit_state+0x78>

        case MOTOR_MODE:
            fsmstate->ready = 1;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	70da      	strb	r2, [r3, #3]
            break;
 800226a:	e00b      	b.n	8002284 <fsm_exit_state+0x78>

        case CALIBRATION_MODE:
            fsmstate->ready = 1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	70da      	strb	r2, [r3, #3]
            break;
 8002272:	e007      	b.n	8002284 <fsm_exit_state+0x78>

        case FAULT_MODE:
            fsmstate->ready = 1;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	70da      	strb	r2, [r3, #3]
            break;
 800227a:	e003      	b.n	8002284 <fsm_exit_state+0x78>

        case WATCHDOG_MODE:
            fsmstate->ready = 1;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	70da      	strb	r2, [r3, #3]
            break;
 8002282:	bf00      	nop
    }
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <update_fsm>:

// FSM State Update
// Only run when new state-change information is received on FDCAN input.
void update_fsm(FSMStruct * fsmstate, int fsm_input)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
    // If MENU_CMD is received, set next state to MENU_MODE and not ready
    if(fsm_input == MENU_CMD)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d106      	bne.n	80022ae <update_fsm+0x1e>
    {
        fsmstate->next_state = MENU_MODE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	705a      	strb	r2, [r3, #1]
        fsmstate->ready = 0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	70da      	strb	r2, [r3, #3]
        return;
 80022ac:	e05c      	b.n	8002368 <update_fsm+0xd8>
    }

    // Process state change command based on the current state
    switch(fsmstate->state)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d858      	bhi.n	8002368 <update_fsm+0xd8>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <update_fsm+0x2c>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	08002301 	.word	0x08002301
 80022c4:	08002369 	.word	0x08002369
 80022c8:	08002369 	.word	0x08002369
 80022cc:	08002369 	.word	0x08002369
 80022d0:	08002369 	.word	0x08002369
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d003      	beq.n	80022e2 <update_fsm+0x52>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d007      	beq.n	80022f0 <update_fsm+0x60>
                case FAULT_CMD:
                    fsmstate->next_state = INIT_MODE;
                    fsmstate->ready = 0;
                    break;
            }
            break;
 80022e0:	e042      	b.n	8002368 <update_fsm+0xd8>
                    fsmstate->next_state = MOTOR_MODE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2203      	movs	r2, #3
 80022e6:	705a      	strb	r2, [r3, #1]
                    fsmstate->ready = 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	70da      	strb	r2, [r3, #3]
                    break;
 80022ee:	e006      	b.n	80022fe <update_fsm+0x6e>
                    fsmstate->next_state = INIT_MODE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	705a      	strb	r2, [r3, #1]
                    fsmstate->ready = 0;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	70da      	strb	r2, [r3, #3]
                    break;
 80022fc:	bf00      	nop
            break;
 80022fe:	e033      	b.n	8002368 <update_fsm+0xd8>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	3b02      	subs	r3, #2
 8002304:	2b06      	cmp	r3, #6
 8002306:	d82e      	bhi.n	8002366 <update_fsm+0xd6>
 8002308:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <update_fsm+0x80>)
 800230a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230e:	bf00      	nop
 8002310:	0800232d 	.word	0x0800232d
 8002314:	0800233b 	.word	0x0800233b
 8002318:	08002357 	.word	0x08002357
 800231c:	08002349 	.word	0x08002349
 8002320:	08002365 	.word	0x08002365
 8002324:	08002365 	.word	0x08002365
 8002328:	08002365 	.word	0x08002365

        case MENU_MODE:
            switch (fsm_input)
            {
                case CALIBRATION_CMD:
                    fsmstate->next_state = CALIBRATION_MODE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	705a      	strb	r2, [r3, #1]
                    fsmstate->ready = 0;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	70da      	strb	r2, [r3, #3]
                    break;
 8002338:	e015      	b.n	8002366 <update_fsm+0xd6>

                case MOTOR_CMD:
                    fsmstate->next_state = MOTOR_MODE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2203      	movs	r2, #3
 800233e:	705a      	strb	r2, [r3, #1]
                    fsmstate->ready = 0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	70da      	strb	r2, [r3, #3]
                    break;
 8002346:	e00e      	b.n	8002366 <update_fsm+0xd6>

                case ENCODER_CMD:
                    fsmstate->next_state = ENCODER_MODE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2205      	movs	r2, #5
 800234c:	705a      	strb	r2, [r3, #1]
                    fsmstate->ready = 0;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	70da      	strb	r2, [r3, #3]
                    break;
 8002354:	e007      	b.n	8002366 <update_fsm+0xd6>

                case SETUP_CMD:
                    fsmstate->next_state = SETUP_MODE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2204      	movs	r2, #4
 800235a:	705a      	strb	r2, [r3, #1]
                    fsmstate->ready = 0;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	70da      	strb	r2, [r3, #3]
                    break;
 8002362:	e000      	b.n	8002366 <update_fsm+0xd6>
                    // Handle ZERO_CMD
                    break;

                case FAULT_CMD:
                    // Handle FAULT_CMD
                    break;
 8002364:	bf00      	nop

                case WATCHDOG_CMD:
                    // Handle WATCHDOG_CMD
                    break;
            }
            break;
 8002366:	bf00      	nop

        case MOTOR_MODE:
            // Handle state change in MOTOR_MODE
            break;
    }
}
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop

08002374 <controller_faults>:

 // Controller Faults Function
 // This function checks if the MAX controller has encountered any faults
 void controller_faults(void)
 {
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
     // Reads fault pin from MAX controller
     // If pin is reset (i.e., GPIO_PIN_RESET), there's a controller fault
     if(HAL_GPIO_ReadPin(MAX_FAULT_GPIO_Port, MAX_FAULT_Pin) == GPIO_PIN_RESET)
 8002378:	2120      	movs	r1, #32
 800237a:	4808      	ldr	r0, [pc, #32]	; (800239c <controller_faults+0x28>)
 800237c:	f003 fe92 	bl	80060a4 <HAL_GPIO_ReadPin>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d108      	bne.n	8002398 <controller_faults+0x24>
     {
         // Update error status to signify controller fault
         errorStatus.controllerFault = 1;
 8002386:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <controller_faults+0x2c>)
 8002388:	7813      	ldrb	r3, [r2, #0]
 800238a:	f043 0310 	orr.w	r3, r3, #16
 800238e:	7013      	strb	r3, [r2, #0]

         // Update FSM to FAULT_MODE
         update_fsm(&state, FAULT_MODE);
 8002390:	2106      	movs	r1, #6
 8002392:	4804      	ldr	r0, [pc, #16]	; (80023a4 <controller_faults+0x30>)
 8002394:	f7ff ff7c 	bl	8002290 <update_fsm>
     }
 }
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}
 800239c:	48000800 	.word	0x48000800
 80023a0:	2000033c 	.word	0x2000033c
 80023a4:	20000574 	.word	0x20000574

080023a8 <watchdog>:

 // Watchdog Function
 // This function acts as a watchdog timer for three motors
 void watchdog()
 {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
     // Checks if motors are calibrated
     if(calibrated)
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <watchdog+0x94>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d041      	beq.n	8002438 <watchdog+0x90>
     {
         // If the counter for motor 1 exceeds 97000
         // It sets the motor direction to BREAK and updates the FSM to FAULT_MODE
         if(counter[0]>97000)
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <watchdog+0x98>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a22      	ldr	r2, [pc, #136]	; (8002444 <watchdog+0x9c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d910      	bls.n	80023e0 <watchdog+0x38>
         {
             Motor_setDirection(1, BREAK,&status_Reg);
 80023be:	4a22      	ldr	r2, [pc, #136]	; (8002448 <watchdog+0xa0>)
 80023c0:	2103      	movs	r1, #3
 80023c2:	2001      	movs	r0, #1
 80023c4:	f000 fd2c 	bl	8002e20 <Motor_setDirection>
             watchdog1=true;
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <watchdog+0xa4>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
             errorStatus.watchdogTimeout = 1;
 80023ce:	4a20      	ldr	r2, [pc, #128]	; (8002450 <watchdog+0xa8>)
 80023d0:	7813      	ldrb	r3, [r2, #0]
 80023d2:	f043 0320 	orr.w	r3, r3, #32
 80023d6:	7013      	strb	r3, [r2, #0]
             update_fsm(&state, FAULT_MODE);
 80023d8:	2106      	movs	r1, #6
 80023da:	481e      	ldr	r0, [pc, #120]	; (8002454 <watchdog+0xac>)
 80023dc:	f7ff ff58 	bl	8002290 <update_fsm>
         }
         // Similarly for motor 2 and counter > 109000
         if(counter[1]>109000)
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <watchdog+0x98>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <watchdog+0xb0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d910      	bls.n	800240c <watchdog+0x64>
         {
             Motor_setDirection(2, BREAK,&status_Reg);
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <watchdog+0xa0>)
 80023ec:	2103      	movs	r1, #3
 80023ee:	2002      	movs	r0, #2
 80023f0:	f000 fd16 	bl	8002e20 <Motor_setDirection>
             watchdog2=true;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <watchdog+0xb4>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
             errorStatus.watchdogTimeout = 1;
 80023fa:	4a15      	ldr	r2, [pc, #84]	; (8002450 <watchdog+0xa8>)
 80023fc:	7813      	ldrb	r3, [r2, #0]
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	7013      	strb	r3, [r2, #0]
             update_fsm(&state, FAULT_MODE);
 8002404:	2106      	movs	r1, #6
 8002406:	4813      	ldr	r0, [pc, #76]	; (8002454 <watchdog+0xac>)
 8002408:	f7ff ff42 	bl	8002290 <update_fsm>
         }
         // Similarly for motor 3 and counter > 109000
         if(counter[2]>109000)
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <watchdog+0x98>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <watchdog+0xb0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d910      	bls.n	8002438 <watchdog+0x90>
         {
             Motor_setDirection(3, BREAK,&status_Reg);
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <watchdog+0xa0>)
 8002418:	2103      	movs	r1, #3
 800241a:	2003      	movs	r0, #3
 800241c:	f000 fd00 	bl	8002e20 <Motor_setDirection>
             watchdog3=true;
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <watchdog+0xb8>)
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
             errorStatus.watchdogTimeout = 1;
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <watchdog+0xa8>)
 8002428:	7813      	ldrb	r3, [r2, #0]
 800242a:	f043 0320 	orr.w	r3, r3, #32
 800242e:	7013      	strb	r3, [r2, #0]
             update_fsm(&state, FAULT_MODE);
 8002430:	2106      	movs	r1, #6
 8002432:	4808      	ldr	r0, [pc, #32]	; (8002454 <watchdog+0xac>)
 8002434:	f7ff ff2c 	bl	8002290 <update_fsm>
         }
     }
 }
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000364 	.word	0x20000364
 8002440:	20000340 	.word	0x20000340
 8002444:	00017ae8 	.word	0x00017ae8
 8002448:	2000039c 	.word	0x2000039c
 800244c:	20000365 	.word	0x20000365
 8002450:	2000033c 	.word	0x2000033c
 8002454:	20000574 	.word	0x20000574
 8002458:	0001a9c8 	.word	0x0001a9c8
 800245c:	20000366 	.word	0x20000366
 8002460:	20000367 	.word	0x20000367

08002464 <Errors_Handler>:

 // Error Handler
 // This function handles errors based on the FSMErrorStatus structure
 void Errors_Handler(FSMErrorStatus errorStatus, FSMStruct* fsmstate)
 {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	7138      	strb	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
     // Checks if there's an initialization failure
     if(errorStatus.initFailure)
 800246e:	793b      	ldrb	r3, [r7, #4]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <Errors_Handler+0x1e>
     {
         // Handle initialization failure - e.g., log, notify user, attempt recovery
         update_fsm(&state, INIT_CMD);
 800247a:	2100      	movs	r1, #0
 800247c:	4816      	ldr	r0, [pc, #88]	; (80024d8 <Errors_Handler+0x74>)
 800247e:	f7ff ff07 	bl	8002290 <update_fsm>
     {
         // Handle Timer errors - e.g., log, notify user, attempt recovery
     }

     // Checks if there's a calibration failure
     if(errorStatus.calibrationFailure)
 8002482:	793b      	ldrb	r3, [r7, #4]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <Errors_Handler+0x44>
     {
         // Reset calibration counters and start calibration again
         counter_calibration[0]=0;
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <Errors_Handler+0x78>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
         counter_calibration[1]=0;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <Errors_Handler+0x78>)
 8002496:	2200      	movs	r2, #0
 8002498:	605a      	str	r2, [r3, #4]
         counter_calibration[2]=0;
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <Errors_Handler+0x78>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
         calibration(&status_Reg, motors);
 80024a0:	490f      	ldr	r1, [pc, #60]	; (80024e0 <Errors_Handler+0x7c>)
 80024a2:	4810      	ldr	r0, [pc, #64]	; (80024e4 <Errors_Handler+0x80>)
 80024a4:	f7fe fdf6 	bl	8001094 <calibration>
         // Handle calibration failure - e.g., log, notify user, attempt recovery
     }

     // Checks if there's a controller fault
     if(errorStatus.controllerFault)
 80024a8:	793b      	ldrb	r3, [r7, #4]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <Errors_Handler+0x6c>
     {
         // Reads the status and fault registers from the MAX controller
         stats_.result=MAX22200_read_register(MAX22200_STATUS, &stats_.status);
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <Errors_Handler+0x84>)
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 fa96 	bl	80029e8 <MAX22200_read_register>
 80024bc:	4603      	mov	r3, r0
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <Errors_Handler+0x84>)
 80024c0:	6053      	str	r3, [r2, #4]
         stats_.result=MAX22200_read_register(MAX22200_FAULT, &stats_.status);
 80024c2:	4909      	ldr	r1, [pc, #36]	; (80024e8 <Errors_Handler+0x84>)
 80024c4:	2009      	movs	r0, #9
 80024c6:	f000 fa8f 	bl	80029e8 <MAX22200_read_register>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <Errors_Handler+0x84>)
 80024ce:	6053      	str	r3, [r2, #4]
     // Checks if there's a watchdog timeout
     if(errorStatus.watchdogTimeout)
     {
         // Handle watchdog timeout - e.g., log, notify user, attempt recovery
     }
 }
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000574 	.word	0x20000574
 80024dc:	2000034c 	.word	0x2000034c
 80024e0:	20000018 	.word	0x20000018
 80024e4:	2000039c 	.word	0x2000039c
 80024e8:	200003bc 	.word	0x200003bc

080024ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002502:	4b45      	ldr	r3, [pc, #276]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	4a44      	ldr	r2, [pc, #272]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002508:	f043 0320 	orr.w	r3, r3, #32
 800250c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800250e:	4b42      	ldr	r3, [pc, #264]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800251a:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <MX_GPIO_Init+0x12c>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	4a3e      	ldr	r2, [pc, #248]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002526:	4b3c      	ldr	r3, [pc, #240]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	4a38      	ldr	r2, [pc, #224]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253e:	4b36      	ldr	r3, [pc, #216]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	4b33      	ldr	r3, [pc, #204]	; (8002618 <MX_GPIO_Init+0x12c>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	4a32      	ldr	r2, [pc, #200]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <MX_GPIO_Init+0x12c>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, uLED_G_Pin|uLED_R_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	210c      	movs	r1, #12
 8002566:	482d      	ldr	r0, [pc, #180]	; (800261c <MX_GPIO_Init+0x130>)
 8002568:	f003 fdb4 	bl	80060d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAX_TRIGA_Pin|MAX_TRIGB_Pin|MAX_EN_Pin|SPI_MAX_CMD_Pin, GPIO_PIN_RESET);
 800256c:	2200      	movs	r2, #0
 800256e:	2117      	movs	r1, #23
 8002570:	482b      	ldr	r0, [pc, #172]	; (8002620 <MX_GPIO_Init+0x134>)
 8002572:	f003 fdaf 	bl	80060d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800257c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002580:	f003 fda8 	bl	80060d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = uLED_G_Pin|uLED_R_Pin;
 8002584:	230c      	movs	r3, #12
 8002586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	2301      	movs	r3, #1
 800258a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4619      	mov	r1, r3
 800259a:	4820      	ldr	r0, [pc, #128]	; (800261c <MX_GPIO_Init+0x130>)
 800259c:	f003 fc00 	bl	8005da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX_FAULT_Pin;
 80025a0:	2320      	movs	r3, #32
 80025a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAX_FAULT_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	481a      	ldr	r0, [pc, #104]	; (800261c <MX_GPIO_Init+0x130>)
 80025b4:	f003 fbf4 	bl	8005da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MAX_TRIGA_Pin|MAX_TRIGB_Pin|MAX_EN_Pin|SPI_MAX_CMD_Pin;
 80025b8:	2317      	movs	r3, #23
 80025ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	2301      	movs	r3, #1
 80025be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f107 0314 	add.w	r3, r7, #20
 80025cc:	4619      	mov	r1, r3
 80025ce:	4814      	ldr	r0, [pc, #80]	; (8002620 <MX_GPIO_Init+0x134>)
 80025d0:	f003 fbe6 	bl	8005da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LR_Bit_Pin|ID_Bit0_Pin|ID_Bit1_Pin|ID_Bit2_Pin;
 80025d4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4619      	mov	r1, r3
 80025e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ec:	f003 fbd8 	bl	8005da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80025f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002602:	f107 0314 	add.w	r3, r7, #20
 8002606:	4619      	mov	r1, r3
 8002608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260c:	f003 fbc8 	bl	8005da0 <HAL_GPIO_Init>

}
 8002610:	bf00      	nop
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	48000800 	.word	0x48000800
 8002620:	48000400 	.word	0x48000400

08002624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002628:	f001 f91d 	bl	8003866 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262c:	f000 f81b 	bl	8002666 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002630:	f7ff ff5c 	bl	80024ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002634:	f7ff fa6a 	bl	8001b0c <MX_DMA_Init>
  MX_ADC1_Init();
 8002638:	f7fe fab4 	bl	8000ba4 <MX_ADC1_Init>
  MX_ADC3_Init();
 800263c:	f7fe fb2a 	bl	8000c94 <MX_ADC3_Init>
  MX_ADC4_Init();
 8002640:	f7fe fba0 	bl	8000d84 <MX_ADC4_Init>
  MX_FDCAN2_Init();
 8002644:	f7ff fad0 	bl	8001be8 <MX_FDCAN2_Init>
  MX_SPI3_Init();
 8002648:	f000 fc94 	bl	8002f74 <MX_SPI3_Init>
  MX_TIM1_Init();
 800264c:	f000 fe5e 	bl	800330c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002650:	f000 feb6 	bl	80033c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002654:	f000 ff08 	bl	8003468 <MX_TIM3_Init>
  MX_TIM6_Init();
 8002658:	f000 ffaa 	bl	80035b0 <MX_TIM6_Init>
  MX_TIM5_Init();
 800265c:	f000 ff5a 	bl	8003514 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  init_fsm();
 8002660:	f7ff fc06 	bl	8001e70 <init_fsm>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002664:	e7fe      	b.n	8002664 <main+0x40>

08002666 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b094      	sub	sp, #80	; 0x50
 800266a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	2238      	movs	r2, #56	; 0x38
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f006 fa37 	bl	8008ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002688:	f44f 7000 	mov.w	r0, #512	; 0x200
 800268c:	f003 fd3a 	bl	8006104 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002690:	2302      	movs	r3, #2
 8002692:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800269a:	2340      	movs	r3, #64	; 0x40
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800269e:	2302      	movs	r3, #2
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026a2:	2302      	movs	r3, #2
 80026a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 80026aa:	2312      	movs	r3, #18
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026ae:	2302      	movs	r3, #2
 80026b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80026b2:	2306      	movs	r3, #6
 80026b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026b6:	2302      	movs	r3, #2
 80026b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ba:	f107 0318 	add.w	r3, r7, #24
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fdd4 	bl	800626c <HAL_RCC_OscConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <SystemClock_Config+0x68>
  {
    Error_Handler();
 80026ca:	f000 f818 	bl	80026fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ce:	230f      	movs	r3, #15
 80026d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d2:	2303      	movs	r3, #3
 80026d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2104      	movs	r1, #4
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 f8d8 	bl	800689c <HAL_RCC_ClockConfig>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80026f2:	f000 f804 	bl	80026fe <Error_Handler>
  }
}
 80026f6:	bf00      	nop
 80026f8:	3750      	adds	r7, #80	; 0x50
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002702:	b672      	cpsid	i
}
 8002704:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002706:	e7fe      	b.n	8002706 <Error_Handler+0x8>

08002708 <MAX22200_init>:
uint8_t MAX22200_tx[16];  // SPI TX buffer
uint8_t MAX22200_rx[16];  // SPI RX buffer

// Initialize the MAX22200
void MAX22200_init(MAX22200_status *stats)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    // Enable the device
    MAX22200_ENABLE_HIGH;
 8002710:	2201      	movs	r2, #1
 8002712:	2104      	movs	r1, #4
 8002714:	4866      	ldr	r0, [pc, #408]	; (80028b0 <MAX22200_init+0x1a8>)
 8002716:	f003 fcdd 	bl	80060d4 <HAL_GPIO_WritePin>

    // Make sure Channels aren't triggered
    MAX22200_TRIGA_LOW;
 800271a:	2200      	movs	r2, #0
 800271c:	2101      	movs	r1, #1
 800271e:	4864      	ldr	r0, [pc, #400]	; (80028b0 <MAX22200_init+0x1a8>)
 8002720:	f003 fcd8 	bl	80060d4 <HAL_GPIO_WritePin>
    MAX22200_TRIGB_LOW;
 8002724:	2200      	movs	r2, #0
 8002726:	2102      	movs	r1, #2
 8002728:	4861      	ldr	r0, [pc, #388]	; (80028b0 <MAX22200_init+0x1a8>)
 800272a:	f003 fcd3 	bl	80060d4 <HAL_GPIO_WritePin>

    MAX22200_CS_HIGH;  // Make sure CS  pin is high
 800272e:	2201      	movs	r2, #1
 8002730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002738:	f003 fccc 	bl	80060d4 <HAL_GPIO_WritePin>
    MAX22200_CMD_LOW;  // Make sure CMD pin is low
 800273c:	2200      	movs	r2, #0
 800273e:	2110      	movs	r1, #16
 8002740:	485b      	ldr	r0, [pc, #364]	; (80028b0 <MAX22200_init+0x1a8>)
 8002742:	f003 fcc7 	bl	80060d4 <HAL_GPIO_WritePin>

    MAX22200_write_register(0x00, 0x01); // Set active bit, otherwise the chip doesn't work
 8002746:	2101      	movs	r1, #1
 8002748:	2000      	movs	r0, #0
 800274a:	f000 f8e5 	bl	8002918 <MAX22200_write_register>
    stats->status = MAX22200_write_register(0x00, 0x00000001);   // Set Chip Active / returns the status byte
 800274e:	2101      	movs	r1, #1
 8002750:	2000      	movs	r0, #0
 8002752:	f000 f8e1 	bl	8002918 <MAX22200_write_register>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	701a      	strb	r2, [r3, #0]
    uint32_t data1= 0X0004AA01;
 800275e:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <MAX22200_init+0x1ac>)
 8002760:	617b      	str	r3, [r7, #20]
    uint32_t data2 = 0x7F6432B8;
 8002762:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <MAX22200_init+0x1b0>)
 8002764:	613b      	str	r3, [r7, #16]
    uint32_t data3 = 0x7F0032B8;
 8002766:	4b55      	ldr	r3, [pc, #340]	; (80028bc <MAX22200_init+0x1b4>)
 8002768:	60fb      	str	r3, [r7, #12]
    //this sequence was added for handling bringup of the max according to datasheet sequence page 25 datasheet
    // Step 1: Read status register
    stats->result = MAX22200_read_register(MAX22200_STATUS, &stats->status);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4619      	mov	r1, r3
 800276e:	2000      	movs	r0, #0
 8002770:	f000 f93a 	bl	80029e8 <MAX22200_read_register>
 8002774:	4602      	mov	r2, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	605a      	str	r2, [r3, #4]

    while (1) { // Main loop

       // Step 2: Write to status register
        stats->status = MAX22200_write_register(MAX22200_STATUS, data1);
 800277a:	6979      	ldr	r1, [r7, #20]
 800277c:	2000      	movs	r0, #0
 800277e:	f000 f8cb 	bl	8002918 <MAX22200_write_register>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	701a      	strb	r2, [r3, #0]

       while (stats->status == 0x02) {
 800278a:	e007      	b.n	800279c <MAX22200_init+0x94>
           // If status is 0x02, write to the register again
           stats->status = MAX22200_write_register(MAX22200_STATUS, data1);
 800278c:	6979      	ldr	r1, [r7, #20]
 800278e:	2000      	movs	r0, #0
 8002790:	f000 f8c2 	bl	8002918 <MAX22200_write_register>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	701a      	strb	r2, [r3, #0]
       while (stats->status == 0x02) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d0f3      	beq.n	800278c <MAX22200_init+0x84>
       }

       // Step 3: Write to channel register
       stats->status = MAX22200_write_register(MAX22200_CFG_CH_1, data2);
 80027a4:	6939      	ldr	r1, [r7, #16]
 80027a6:	2001      	movs	r0, #1
 80027a8:	f000 f8b6 	bl	8002918 <MAX22200_write_register>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461a      	mov	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	701a      	strb	r2, [r3, #0]

       if (stats->status == 0x02) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d066      	beq.n	800288a <MAX22200_init+0x182>
           // If status is 0x02, start over from writing to the status register
           continue;
       }
       stats->status = MAX22200_write_register(MAX22200_CFG_CH_2, data3);
 80027bc:	68f9      	ldr	r1, [r7, #12]
 80027be:	2002      	movs	r0, #2
 80027c0:	f000 f8aa 	bl	8002918 <MAX22200_write_register>
 80027c4:	4603      	mov	r3, r0
 80027c6:	461a      	mov	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	701a      	strb	r2, [r3, #0]

       if (stats->status == 0x02) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d05c      	beq.n	800288e <MAX22200_init+0x186>
           // If status is 0x02, start over from writing to the status register
           continue;
       }
       stats->status = MAX22200_write_register(MAX22200_CFG_CH_3, data2);
 80027d4:	6939      	ldr	r1, [r7, #16]
 80027d6:	2003      	movs	r0, #3
 80027d8:	f000 f89e 	bl	8002918 <MAX22200_write_register>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	701a      	strb	r2, [r3, #0]

       if (stats->status == 0x02) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d052      	beq.n	8002892 <MAX22200_init+0x18a>
           // If status is 0x02, start over from writing to the status register
           continue;
       }
       stats->status = MAX22200_write_register(MAX22200_CFG_CH_4, data3);
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	2004      	movs	r0, #4
 80027f0:	f000 f892 	bl	8002918 <MAX22200_write_register>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	701a      	strb	r2, [r3, #0]

       if (stats->status == 0x02) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d048      	beq.n	8002896 <MAX22200_init+0x18e>
           // If status is 0x02, start over from writing to the status register
           continue;
       }
       stats->status = MAX22200_write_register(MAX22200_CFG_CH_5, data2);
 8002804:	6939      	ldr	r1, [r7, #16]
 8002806:	2005      	movs	r0, #5
 8002808:	f000 f886 	bl	8002918 <MAX22200_write_register>
 800280c:	4603      	mov	r3, r0
 800280e:	461a      	mov	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	701a      	strb	r2, [r3, #0]
       // If status is 0x02, start over from writing to the status register
       if (stats->status == 0x02) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d03e      	beq.n	800289a <MAX22200_init+0x192>
           continue;
       }
       stats->status = MAX22200_write_register(MAX22200_CFG_CH_6, data3);
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	2006      	movs	r0, #6
 8002820:	f000 f87a 	bl	8002918 <MAX22200_write_register>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	701a      	strb	r2, [r3, #0]

       if (stats->status == 0x02) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d034      	beq.n	800289e <MAX22200_init+0x196>
           // If status is 0x02, start over from writing to the status register
           continue;
       }
       // Step 4: Read status register
       stats->result = MAX22200_read_register(MAX22200_STATUS, &stats->status);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4619      	mov	r1, r3
 8002838:	2000      	movs	r0, #0
 800283a:	f000 f8d5 	bl	80029e8 <MAX22200_read_register>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	605a      	str	r2, [r3, #4]
       if (stats->status != 0x01 && stats->status != 0x03) {
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d00c      	beq.n	8002866 <MAX22200_init+0x15e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d126      	bne.n	80028a2 <MAX22200_init+0x19a>
           // If status is not 0x01 or 0x03, start over from writing to the status register
           continue;
       }
       while (stats->status == 0x03) {
 8002854:	e007      	b.n	8002866 <MAX22200_init+0x15e>
           // If status is 0x03, keep reading the status register until it becomes 0x01
           stats->result = MAX22200_read_register(MAX22200_STATUS, &stats->status);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4619      	mov	r1, r3
 800285a:	2000      	movs	r0, #0
 800285c:	f000 f8c4 	bl	80029e8 <MAX22200_read_register>
 8002860:	4602      	mov	r2, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	605a      	str	r2, [r3, #4]
       while (stats->status == 0x03) {
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d0f3      	beq.n	8002856 <MAX22200_init+0x14e>
       }

       if (stats->status == 0x01) {
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d017      	beq.n	80028a6 <MAX22200_init+0x19e>
           break;
       }
       stats->fault = MAX22200_read_register(MAX22200_FAULT, &stats->status);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4619      	mov	r1, r3
 800287a:	2009      	movs	r0, #9
 800287c:	f000 f8b4 	bl	80029e8 <MAX22200_read_register>
 8002880:	4603      	mov	r3, r0
 8002882:	b2da      	uxtb	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	721a      	strb	r2, [r3, #8]
 8002888:	e777      	b.n	800277a <MAX22200_init+0x72>
           continue;
 800288a:	bf00      	nop
 800288c:	e775      	b.n	800277a <MAX22200_init+0x72>
           continue;
 800288e:	bf00      	nop
 8002890:	e773      	b.n	800277a <MAX22200_init+0x72>
           continue;
 8002892:	bf00      	nop
 8002894:	e771      	b.n	800277a <MAX22200_init+0x72>
           continue;
 8002896:	bf00      	nop
 8002898:	e76f      	b.n	800277a <MAX22200_init+0x72>
           continue;
 800289a:	bf00      	nop
 800289c:	e76d      	b.n	800277a <MAX22200_init+0x72>
           continue;
 800289e:	bf00      	nop
 80028a0:	e76b      	b.n	800277a <MAX22200_init+0x72>
           continue;
 80028a2:	bf00      	nop
        stats->status = MAX22200_write_register(MAX22200_STATUS, data1);
 80028a4:	e769      	b.n	800277a <MAX22200_init+0x72>
           break;
 80028a6:	bf00      	nop
    }
}
 80028a8:	bf00      	nop
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	48000400 	.word	0x48000400
 80028b4:	0004aa01 	.word	0x0004aa01
 80028b8:	7f6432b8 	.word	0x7f6432b8
 80028bc:	7f0032b8 	.word	0x7f0032b8

080028c0 <MAX22200_init_statreg>:

// Initialize the status register and status struct
void MAX22200_init_statreg(MAX22200_status* stats_, MAX22200_StatusReg* status_Reg)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b08f      	sub	sp, #60	; 0x3c
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
    *status_Reg = (MAX22200_StatusReg) {
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	2320      	movs	r3, #32
 80028d0:	461a      	mov	r2, r3
 80028d2:	2100      	movs	r1, #0
 80028d4:	f006 f908 	bl	8008ae8 <memset>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2201      	movs	r2, #1
 80028dc:	735a      	strb	r2, [r3, #13]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	741a      	strb	r2, [r3, #16]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2201      	movs	r2, #1
 80028e8:	749a      	strb	r2, [r3, #18]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2201      	movs	r2, #1
 80028ee:	751a      	strb	r2, [r3, #20]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	759a      	strb	r2, [r3, #22]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2201      	movs	r2, #1
 80028fa:	77da      	strb	r2, [r3, #31]
        .DPM = 0,
        .COMER = 0,
        .UVM = 0,
        .ACTIVE = 1
    };
    *stats_ = (MAX22200_status) {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <MAX22200_init_statreg+0x54>)
 8002900:	461c      	mov	r4, r3
 8002902:	4613      	mov	r3, r2
 8002904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002906:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .status = 0x02,
        .fault = 0x00,
        .result = 0x00,
        .status_reg = 0x01
    };
}
 800290a:	bf00      	nop
 800290c:	373c      	adds	r7, #60	; 0x3c
 800290e:	46bd      	mov	sp, r7
 8002910:	bd90      	pop	{r4, r7, pc}
 8002912:	bf00      	nop
 8002914:	08008b10 	.word	0x08008b10

08002918 <MAX22200_write_register>:

// Write to a register
uint8_t MAX22200_write_register(uint8_t reg_adr, uint32_t data)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af02      	add	r7, sp, #8
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
    // First, write the Command byte to setup the SPI transfer
    MAX22200_tx[0] = ((reg_adr << 1) & 0x7e) | 0x80;                    // MSB = 1 -> write - LSB = 0 -> 32 bit register access
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	b25b      	sxtb	r3, r3
 800292a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800292e:	b25b      	sxtb	r3, r3
 8002930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002934:	b25b      	sxtb	r3, r3
 8002936:	b2da      	uxtb	r2, r3
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <MAX22200_write_register+0xc0>)
 800293a:	701a      	strb	r2, [r3, #0]

    MAX22200_CMD_HIGH;
 800293c:	2201      	movs	r2, #1
 800293e:	2110      	movs	r1, #16
 8002940:	4826      	ldr	r0, [pc, #152]	; (80029dc <MAX22200_write_register+0xc4>)
 8002942:	f003 fbc7 	bl	80060d4 <HAL_GPIO_WritePin>
    MAX22200_CS_LOW;
 8002946:	2200      	movs	r2, #0
 8002948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800294c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002950:	f003 fbc0 	bl	80060d4 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi3, MAX22200_tx, MAX22200_rx, 1, 2);  // SPI RW 1 byte
 8002954:	2302      	movs	r3, #2
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <MAX22200_write_register+0xc8>)
 800295c:	491e      	ldr	r1, [pc, #120]	; (80029d8 <MAX22200_write_register+0xc0>)
 800295e:	4821      	ldr	r0, [pc, #132]	; (80029e4 <MAX22200_write_register+0xcc>)
 8002960:	f004 fde7 	bl	8007532 <HAL_SPI_TransmitReceive>

    MAX22200_CS_HIGH;
 8002964:	2201      	movs	r2, #1
 8002966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800296a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296e:	f003 fbb1 	bl	80060d4 <HAL_GPIO_WritePin>
    MAX22200_CMD_LOW;
 8002972:	2200      	movs	r2, #0
 8002974:	2110      	movs	r1, #16
 8002976:	4819      	ldr	r0, [pc, #100]	; (80029dc <MAX22200_write_register+0xc4>)
 8002978:	f003 fbac 	bl	80060d4 <HAL_GPIO_WritePin>

    // Now write the actual data
    MAX22200_tx[3] = ( data >> 24 ) & 0xff;   // MS Byte
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	0e1b      	lsrs	r3, r3, #24
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <MAX22200_write_register+0xc0>)
 8002984:	70da      	strb	r2, [r3, #3]
    MAX22200_tx[2] = ( data >> 16 ) & 0xff;   //
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <MAX22200_write_register+0xc0>)
 800298e:	709a      	strb	r2, [r3, #2]
    MAX22200_tx[1] = ( data >> 8  ) & 0xff;   //
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <MAX22200_write_register+0xc0>)
 8002998:	705a      	strb	r2, [r3, #1]
    MAX22200_tx[0] = ( data       ) & 0xff;   // LS Byte
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <MAX22200_write_register+0xc0>)
 80029a0:	701a      	strb	r2, [r3, #0]

    MAX22200_CS_LOW;
 80029a2:	2200      	movs	r2, #0
 80029a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ac:	f003 fb92 	bl	80060d4 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, MAX22200_tx, 4, 2);                      // SPI W 4 bytes
 80029b0:	2302      	movs	r3, #2
 80029b2:	2204      	movs	r2, #4
 80029b4:	4908      	ldr	r1, [pc, #32]	; (80029d8 <MAX22200_write_register+0xc0>)
 80029b6:	480b      	ldr	r0, [pc, #44]	; (80029e4 <MAX22200_write_register+0xcc>)
 80029b8:	f004 fc4d 	bl	8007256 <HAL_SPI_Transmit>

    MAX22200_CS_HIGH;
 80029bc:	2201      	movs	r2, #1
 80029be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c6:	f003 fb85 	bl	80060d4 <HAL_GPIO_WritePin>

    return MAX22200_rx[0];                                            // Return the status byte
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <MAX22200_write_register+0xc8>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000584 	.word	0x20000584
 80029dc:	48000400 	.word	0x48000400
 80029e0:	20000594 	.word	0x20000594
 80029e4:	200005a4 	.word	0x200005a4

080029e8 <MAX22200_read_register>:

// Read from a register
uint32_t MAX22200_read_register(uint8_t reg_adr, uint8_t* status)//added status pointer for sniffing out the status of the transmitrecieve operation
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
    // First, write the Command byte to setup the SPI transfer
    MAX22200_tx[0] = ((reg_adr << 1) & 0x7e);                           // MSB = 0 -> read - LSB = 0 -> 32 bit register access
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <MAX22200_read_register+0xd0>)
 8002a02:	701a      	strb	r2, [r3, #0]

    MAX22200_CMD_HIGH;
 8002a04:	2201      	movs	r2, #1
 8002a06:	2110      	movs	r1, #16
 8002a08:	482c      	ldr	r0, [pc, #176]	; (8002abc <MAX22200_read_register+0xd4>)
 8002a0a:	f003 fb63 	bl	80060d4 <HAL_GPIO_WritePin>
    MAX22200_CS_LOW;
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a18:	f003 fb5c 	bl	80060d4 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi3, MAX22200_tx, MAX22200_rx, 1, 2);  // SPI RW 1 byte
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	2301      	movs	r3, #1
 8002a22:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <MAX22200_read_register+0xd8>)
 8002a24:	4924      	ldr	r1, [pc, #144]	; (8002ab8 <MAX22200_read_register+0xd0>)
 8002a26:	4827      	ldr	r0, [pc, #156]	; (8002ac4 <MAX22200_read_register+0xdc>)
 8002a28:	f004 fd83 	bl	8007532 <HAL_SPI_TransmitReceive>
    *status = MAX22200_rx[0];//added myself
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <MAX22200_read_register+0xd8>)
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	701a      	strb	r2, [r3, #0]

    MAX22200_CS_HIGH;
 8002a34:	2201      	movs	r2, #1
 8002a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a3e:	f003 fb49 	bl	80060d4 <HAL_GPIO_WritePin>
    MAX22200_CMD_LOW;
 8002a42:	2200      	movs	r2, #0
 8002a44:	2110      	movs	r1, #16
 8002a46:	481d      	ldr	r0, [pc, #116]	; (8002abc <MAX22200_read_register+0xd4>)
 8002a48:	f003 fb44 	bl	80060d4 <HAL_GPIO_WritePin>

    // For read, the TX bytes aren't important, but we set them to 0
    MAX22200_tx[0] = 0;   // MS Byte
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <MAX22200_read_register+0xd0>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
    MAX22200_tx[1] = 0;   //
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <MAX22200_read_register+0xd0>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	705a      	strb	r2, [r3, #1]
    MAX22200_tx[2] = 0;   //
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <MAX22200_read_register+0xd0>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	709a      	strb	r2, [r3, #2]
    MAX22200_tx[3] = 0;   // LS Byte
 8002a5e:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <MAX22200_read_register+0xd0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	70da      	strb	r2, [r3, #3]

    MAX22200_CS_LOW;
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6e:	f003 fb31 	bl	80060d4 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi3, MAX22200_tx, MAX22200_rx, 4, 2);  // SPI Read 4 bytes
 8002a72:	2302      	movs	r3, #2
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	2304      	movs	r3, #4
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <MAX22200_read_register+0xd8>)
 8002a7a:	490f      	ldr	r1, [pc, #60]	; (8002ab8 <MAX22200_read_register+0xd0>)
 8002a7c:	4811      	ldr	r0, [pc, #68]	; (8002ac4 <MAX22200_read_register+0xdc>)
 8002a7e:	f004 fd58 	bl	8007532 <HAL_SPI_TransmitReceive>

    MAX22200_CS_HIGH;
 8002a82:	2201      	movs	r2, #1
 8002a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a8c:	f003 fb22 	bl	80060d4 <HAL_GPIO_WritePin>

    uint32_t result = ((MAX22200_rx[0] << 24) | (MAX22200_rx[1] << 16) | (MAX22200_rx[2] << 8) | (MAX22200_rx[3]));
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <MAX22200_read_register+0xd8>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	061a      	lsls	r2, r3, #24
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <MAX22200_read_register+0xd8>)
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	041b      	lsls	r3, r3, #16
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <MAX22200_read_register+0xd8>)
 8002aa0:	789b      	ldrb	r3, [r3, #2]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <MAX22200_read_register+0xd8>)
 8002aa8:	78d2      	ldrb	r2, [r2, #3]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

    return result;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000584 	.word	0x20000584
 8002abc:	48000400 	.word	0x48000400
 8002ac0:	20000594 	.word	0x20000594
 8002ac4:	200005a4 	.word	0x200005a4

08002ac8 <buildStatusRegister>:
    }
}

// Function to build STATUS register
uint32_t buildStatusRegister(const MAX22200_StatusReg* status)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < 8; i++) {
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	e011      	b.n	8002afe <buildStatusRegister+0x36>
        result |= status->ONCH[7 - i] << (31 - i);  // Process ONCH array in reverse
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1c3 0307 	rsb	r3, r3, #7
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f1c3 031f 	rsb	r3, r3, #31
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 8; i++) {
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	3301      	adds	r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b07      	cmp	r3, #7
 8002b02:	ddea      	ble.n	8002ada <buildStatusRegister+0x12>
    }

    result |= (status->M_OVT << 23);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7a1b      	ldrb	r3, [r3, #8]
 8002b08:	05db      	lsls	r3, r3, #23
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
    result |= (status->M_OCP << 22);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7a5b      	ldrb	r3, [r3, #9]
 8002b16:	059b      	lsls	r3, r3, #22
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
    result |= (status->M_OLF << 21);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	7a9b      	ldrb	r3, [r3, #10]
 8002b24:	055b      	lsls	r3, r3, #21
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
    result |= (status->M_HHF << 20);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7adb      	ldrb	r3, [r3, #11]
 8002b32:	051b      	lsls	r3, r3, #20
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
    result |= (status->M_DPM << 19);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7b1b      	ldrb	r3, [r3, #12]
 8002b40:	04db      	lsls	r3, r3, #19
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
    result |= (status->M_COMF << 18);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7b5b      	ldrb	r3, [r3, #13]
 8002b4e:	049b      	lsls	r3, r3, #18
 8002b50:	461a      	mov	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
    result |= (status->M_UVM << 17);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	7b9b      	ldrb	r3, [r3, #14]
 8002b5c:	045b      	lsls	r3, r3, #17
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
    result |= (status->FREQM << 16);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7bdb      	ldrb	r3, [r3, #15]
 8002b6a:	041b      	lsls	r3, r3, #16
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

    result |= (status->CM76[0] << 15);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7c1b      	ldrb	r3, [r3, #16]
 8002b78:	03db      	lsls	r3, r3, #15
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
    result |= (status->CM76[1] << 14);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7c5b      	ldrb	r3, [r3, #17]
 8002b86:	039b      	lsls	r3, r3, #14
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

    result |= (status->CM54[0] << 13);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7c9b      	ldrb	r3, [r3, #18]
 8002b94:	035b      	lsls	r3, r3, #13
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
    result |= (status->CM54[1] << 12);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7cdb      	ldrb	r3, [r3, #19]
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

    result |= (status->CM32[0] << 11);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7d1b      	ldrb	r3, [r3, #20]
 8002bb0:	02db      	lsls	r3, r3, #11
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
    result |= (status->CM32[1] << 10);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7d5b      	ldrb	r3, [r3, #21]
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

    result |= (status->CM10[0] << 9);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7d9b      	ldrb	r3, [r3, #22]
 8002bcc:	025b      	lsls	r3, r3, #9
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    result |= (status->CM10[1] << 8);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7ddb      	ldrb	r3, [r3, #23]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

    result |= (status->OVT << 7);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7e1b      	ldrb	r3, [r3, #24]
 8002be8:	01db      	lsls	r3, r3, #7
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
    result |= (status->OCP << 6);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7e5b      	ldrb	r3, [r3, #25]
 8002bf6:	019b      	lsls	r3, r3, #6
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
    result |= (status->OLF << 5);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7e9b      	ldrb	r3, [r3, #26]
 8002c04:	015b      	lsls	r3, r3, #5
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
    result |= (status->HHF << 4);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7edb      	ldrb	r3, [r3, #27]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	461a      	mov	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
    result |= (status->DPM << 3);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7f1b      	ldrb	r3, [r3, #28]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
    result |= (status->COMER << 2);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7f5b      	ldrb	r3, [r3, #29]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	461a      	mov	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
    result |= (status->UVM << 1);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7f9b      	ldrb	r3, [r3, #30]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
    result |= status->ACTIVE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7fdb      	ldrb	r3, [r3, #31]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

    return result;
 8002c52:	68fb      	ldr	r3, [r7, #12]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <MAX22000_init_cfg_reg>:
#include "motor.h"
void MAX22000_init_cfg_reg(CFG_CH_Register *cfg1, CFG_CH_Register *cfg2) {
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
    *cfg1 = (CFG_CH_Register) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <MAX22000_init_cfg_reg+0x28>)
 8002c6e:	6810      	ldr	r0, [r2, #0]
 8002c70:	6018      	str	r0, [r3, #0]
        .OL_EN = 0,
        .DPM_EN = 0,
        .HHF_EN = 0
    };

    *cfg2 = (CFG_CH_Register) {
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <MAX22000_init_cfg_reg+0x28>)
 8002c76:	6810      	ldr	r0, [r2, #0]
 8002c78:	6018      	str	r0, [r3, #0]
        .SRC = 1,
        .OL_EN = 0,
        .DPM_EN = 0,
        .HHF_EN = 0
    };
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	08008b40 	.word	0x08008b40

08002c8c <Motor_init>:

void Motor_init(Motor* motor, CFG_CH_Register* cfg1, CFG_CH_Register* cfg2, int motorNumber) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
    motor->m = motorNumber;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	609a      	str	r2, [r3, #8]
    motor->channel1_ = (motorNumber - 1) * 2 + 1;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
    motor->channel2_ = (motorNumber - 1) * 2 + 2;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	005a      	lsls	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
    motor->cfg1_ = *cfg1;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	6810      	ldr	r0, [r2, #0]
 8002cbc:	6018      	str	r0, [r3, #0]
    motor->cfg2_ = *cfg2;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	3310      	adds	r3, #16
 8002cc4:	6810      	ldr	r0, [r2, #0]
 8002cc6:	6018      	str	r0, [r3, #0]

    Motor_writeCfgRegister(&motor->cfg1_, motor->channel1_);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f103 020c 	add.w	r2, r3, #12
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f000 f80d 	bl	8002cf4 <Motor_writeCfgRegister>
    Motor_writeCfgRegister(&motor->cfg2_, motor->channel2_);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f103 0210 	add.w	r2, r3, #16
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 f804 	bl	8002cf4 <Motor_writeCfgRegister>
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <Motor_writeCfgRegister>:
    }
    }
}

void Motor_writeCfgRegister(CFG_CH_Register* config, int channel)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
    if ((channel > 8) || (channel < 1)) return;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	f300 8089 	bgt.w	8002e18 <Motor_writeCfgRegister+0x124>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f340 8085 	ble.w	8002e18 <Motor_writeCfgRegister+0x124>
    if (config->SRC > 1) return;
    if (config->OL_EN > 1) return;
    if (config->DPM_EN > 1) return;
    if (config->HHF_EN > 1) return;

    uint32_t data = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
    data |= ((config->HFS << 31) & BIT_CH_HFS);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	07db      	lsls	r3, r3, #31
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
    data |= ((config->HOLD << 24) & BIT_CH_HOLD);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
    data |= ((config->TRGnSPI << 23) & BIT_CH_TRGnSPI);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	05db      	lsls	r3, r3, #23
 8002d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
    data |= ((config->HIT << 16) & BIT_CH_HIT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
    data |= ((config->HIT_T << 8) & BIT_CH_HIT_T);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	789b      	ldrb	r3, [r3, #2]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
    data |= ((config->VDRnCDR << 7) & BIT_CH_VDRnCDR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	78db      	ldrb	r3, [r3, #3]
 8002d7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	01db      	lsls	r3, r3, #7
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
    data |= ((config->HSnLS << 6) & BIT_CH_HSnLS);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	78db      	ldrb	r3, [r3, #3]
 8002d8e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
    data |= ((config->FREQ_CFG << 4) & BIT_CH_FREQ_CFG);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	78db      	ldrb	r3, [r3, #3]
 8002da4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
    data |= ((config->SRC << 3) & BIT_CH_SRC);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	78db      	ldrb	r3, [r3, #3]
 8002dba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
    data |= ((config->OL_EN << 2) & BIT_CH_OL_EN);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	78db      	ldrb	r3, [r3, #3]
 8002dd0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
    data |= ((config->DPM_EN << 1) & BIT_CH_DPM_EN);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	78db      	ldrb	r3, [r3, #3]
 8002de6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
    data |= ((config->HHF_EN << 0) & BIT_CH_HHF_EN);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	78db      	ldrb	r3, [r3, #3]
 8002dfc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    MAX22200_write_register(channel, data);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	68f9      	ldr	r1, [r7, #12]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fd81 	bl	8002918 <MAX22200_write_register>
 8002e16:	e000      	b.n	8002e1a <Motor_writeCfgRegister+0x126>
    if ((channel > 8) || (channel < 1)) return;
 8002e18:	bf00      	nop
}
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <Motor_setDirection>:

void Motor_setDirection(int MotorNum, MotorCommandType cmd, MAX22200_StatusReg* stsreg)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	72fb      	strb	r3, [r7, #11]
    switch (cmd)
 8002e2e:	7afb      	ldrb	r3, [r7, #11]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d843      	bhi.n	8002ebc <Motor_setDirection+0x9c>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <Motor_setDirection+0x1c>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002e4d 	.word	0x08002e4d
 8002e40:	08002e69 	.word	0x08002e69
 8002e44:	08002e85 	.word	0x08002e85
 8002e48:	08002ea1 	.word	0x08002ea1
    {
    case SLEEP:
        stsreg->ONCH[(MotorNum - 1) * 2] = 0;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	2100      	movs	r1, #0
 8002e56:	54d1      	strb	r1, [r2, r3]
        stsreg->ONCH[(MotorNum - 1) * 2 + 1] = 0;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	3301      	adds	r3, #1
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	2100      	movs	r1, #0
 8002e64:	54d1      	strb	r1, [r2, r3]
        break;
 8002e66:	e029      	b.n	8002ebc <Motor_setDirection+0x9c>
    case DOWN:
        stsreg->ONCH[(MotorNum - 1) * 2] = 1;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	2101      	movs	r1, #1
 8002e72:	54d1      	strb	r1, [r2, r3]
        stsreg->ONCH[(MotorNum - 1) * 2 + 1] = 0;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	54d1      	strb	r1, [r2, r3]
        break;
 8002e82:	e01b      	b.n	8002ebc <Motor_setDirection+0x9c>
    case UP:
        stsreg->ONCH[(MotorNum - 1) * 2] = 0;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	54d1      	strb	r1, [r2, r3]
        stsreg->ONCH[(MotorNum - 1) * 2 + 1] = 1;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	3301      	adds	r3, #1
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	54d1      	strb	r1, [r2, r3]
        break;
 8002e9e:	e00d      	b.n	8002ebc <Motor_setDirection+0x9c>
    case BREAK:
        stsreg->ONCH[(MotorNum - 1) * 2] = 1;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	54d1      	strb	r1, [r2, r3]
        stsreg->ONCH[(MotorNum - 1) * 2 + 1] = 1;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	54d1      	strb	r1, [r2, r3]
        break;
 8002eba:	bf00      	nop
    }
    uint32_t dir_status = buildStatusRegister(stsreg);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fe03 	bl	8002ac8 <buildStatusRegister>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	617b      	str	r3, [r7, #20]
    MAX22200_write_register(MAX22200_STATUS, dir_status);
 8002ec6:	6979      	ldr	r1, [r7, #20]
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7ff fd25 	bl	8002918 <MAX22200_write_register>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop

08002ed8 <Set_HOLD>:
    if (HFS > 1) return;
    cfg->HFS = HFS;
}

void Set_HOLD(CFG_CH_Register* cfg, uint8_t HOLD)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
    if (HOLD > 127) return;
 8002ee4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db09      	blt.n	8002f00 <Set_HOLD+0x28>
    cfg->HOLD = HOLD;
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef2:	b2d9      	uxtb	r1, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	7813      	ldrb	r3, [r2, #0]
 8002ef8:	f361 0347 	bfi	r3, r1, #1, #7
 8002efc:	7013      	strb	r3, [r2, #0]
 8002efe:	e000      	b.n	8002f02 <Set_HOLD+0x2a>
    if (HOLD > 127) return;
 8002f00:	bf00      	nop
}
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <Set_HIT>:
    if (TRGnSPl > 1) return;
    cfg->TRGnSPI = TRGnSPl;
}

void Set_HIT(CFG_CH_Register* cfg, uint8_t HIT)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	70fb      	strb	r3, [r7, #3]
    if (HIT > 127) return;
 8002f18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db09      	blt.n	8002f34 <Set_HIT+0x28>
    cfg->HIT = HIT;
 8002f20:	78fb      	ldrb	r3, [r7, #3]
 8002f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f26:	b2d9      	uxtb	r1, r3
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	7853      	ldrb	r3, [r2, #1]
 8002f2c:	f361 0347 	bfi	r3, r1, #1, #7
 8002f30:	7053      	strb	r3, [r2, #1]
 8002f32:	e000      	b.n	8002f36 <Set_HIT+0x2a>
    if (HIT > 127) return;
 8002f34:	bf00      	nop
}
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <Set_VDRnCDR>:
    if (HIT_T > 255) return;
    cfg->HIT_T = HIT_T;
}

void Set_VDRnCDR(CFG_CH_Register* cfg, uint8_t VDRnCDR)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	70fb      	strb	r3, [r7, #3]
    if (VDRnCDR > 1) return;
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d809      	bhi.n	8002f66 <Set_VDRnCDR+0x26>
    cfg->VDRnCDR = VDRnCDR;
 8002f52:	78fb      	ldrb	r3, [r7, #3]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	b2d9      	uxtb	r1, r3
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	78d3      	ldrb	r3, [r2, #3]
 8002f5e:	f361 0300 	bfi	r3, r1, #0, #1
 8002f62:	70d3      	strb	r3, [r2, #3]
 8002f64:	e000      	b.n	8002f68 <Set_VDRnCDR+0x28>
    if (VDRnCDR > 1) return;
 8002f66:	bf00      	nop
}
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <MX_SPI3_Init+0x78>)
 8002f7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002f80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f8c:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002f8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002f92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002faa:	2230      	movs	r2, #48	; 0x30
 8002fac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002fce:	2208      	movs	r2, #8
 8002fd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002fd2:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <MX_SPI3_Init+0x74>)
 8002fd4:	f004 f894 	bl	8007100 <HAL_SPI_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002fde:	f7ff fb8e 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	200005a4 	.word	0x200005a4
 8002fec:	40003c00 	.word	0x40003c00

08002ff0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff8:	f107 0314 	add.w	r3, r7, #20
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a17      	ldr	r2, [pc, #92]	; (800306c <HAL_SPI_MspInit+0x7c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d128      	bne.n	8003064 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003012:	4b17      	ldr	r3, [pc, #92]	; (8003070 <HAL_SPI_MspInit+0x80>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	4a16      	ldr	r2, [pc, #88]	; (8003070 <HAL_SPI_MspInit+0x80>)
 8003018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301c:	6593      	str	r3, [r2, #88]	; 0x58
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_SPI_MspInit+0x80>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800302a:	4b11      	ldr	r3, [pc, #68]	; (8003070 <HAL_SPI_MspInit+0x80>)
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	4a10      	ldr	r2, [pc, #64]	; (8003070 <HAL_SPI_MspInit+0x80>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_SPI_MspInit+0x80>)
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8003042:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003048:	2302      	movs	r3, #2
 800304a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003054:	2306      	movs	r3, #6
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4619      	mov	r1, r3
 800305e:	4805      	ldr	r0, [pc, #20]	; (8003074 <HAL_SPI_MspInit+0x84>)
 8003060:	f002 fe9e 	bl	8005da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003064:	bf00      	nop
 8003066:	3728      	adds	r7, #40	; 0x28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40003c00 	.word	0x40003c00
 8003070:	40021000 	.word	0x40021000
 8003074:	48000800 	.word	0x48000800

08003078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <HAL_MspInit+0x44>)
 8003080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003082:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <HAL_MspInit+0x44>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6613      	str	r3, [r2, #96]	; 0x60
 800308a:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <HAL_MspInit+0x44>)
 800308c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_MspInit+0x44>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	4a08      	ldr	r2, [pc, #32]	; (80030bc <HAL_MspInit+0x44>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6593      	str	r3, [r2, #88]	; 0x58
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_MspInit+0x44>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80030ae:	f003 f8cd 	bl	800624c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000

080030c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <NMI_Handler+0x4>
	...

080030c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	; 0x30
 80030cc:	af00      	add	r7, sp, #0

	  FDCAN_TxHeaderTypeDef patchHeader;

	  uint8_t patchMessage[6];

	  patchHeader.Identifier = 0x11;
 80030ce:	2311      	movs	r3, #17
 80030d0:	60fb      	str	r3, [r7, #12]
	  patchHeader.IdType = FDCAN_STANDARD_ID;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
	  patchHeader.TxFrameType = FDCAN_DATA_FRAME;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
	  patchHeader.DataLength = FDCAN_DLC_BYTES_6;
 80030da:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80030de:	61bb      	str	r3, [r7, #24]
	  patchHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
	  patchHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80030e4:	2300      	movs	r3, #0
 80030e6:	623b      	str	r3, [r7, #32]
	  patchHeader.FDFormat = FDCAN_FD_CAN;
 80030e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
	  patchHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
	  patchHeader.MessageMarker = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  patchMessage[0] = 255;
 80030f6:	23ff      	movs	r3, #255	; 0xff
 80030f8:	713b      	strb	r3, [r7, #4]
	  patchMessage[1] = 255;
 80030fa:	23ff      	movs	r3, #255	; 0xff
 80030fc:	717b      	strb	r3, [r7, #5]
	  patchMessage[2] = 255;
 80030fe:	23ff      	movs	r3, #255	; 0xff
 8003100:	71bb      	strb	r3, [r7, #6]
	  patchMessage[3] = 255;
 8003102:	23ff      	movs	r3, #255	; 0xff
 8003104:	71fb      	strb	r3, [r7, #7]
	  patchMessage[4] = 255;
 8003106:	23ff      	movs	r3, #255	; 0xff
 8003108:	723b      	strb	r3, [r7, #8]
	  patchMessage[5] = 255;
 800310a:	23ff      	movs	r3, #255	; 0xff
 800310c:	727b      	strb	r3, [r7, #9]
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &patchHeader, patchMessage);
 800310e:	1d3a      	adds	r2, r7, #4
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	4619      	mov	r1, r3
 8003116:	4804      	ldr	r0, [pc, #16]	; (8003128 <HardFault_Handler+0x60>)
 8003118:	f002 f9a8 	bl	800546c <HAL_FDCAN_AddMessageToTxFifoQ>
	  HAL_Delay(100);
 800311c:	2064      	movs	r0, #100	; 0x64
 800311e:	f000 fc13 	bl	8003948 <HAL_Delay>
	  HAL_NVIC_SystemReset();//TODO : Omri pay attetion to auto reset when headfault
 8003122:	f001 fe56 	bl	8004dd2 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003126:	e7fe      	b.n	8003126 <HardFault_Handler+0x5e>
 8003128:	200002d4 	.word	0x200002d4

0800312c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003130:	e7fe      	b.n	8003130 <MemManage_Handler+0x4>

08003132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003136:	e7fe      	b.n	8003136 <BusFault_Handler+0x4>

08003138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800313c:	e7fe      	b.n	800313c <UsageFault_Handler+0x4>

0800313e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316c:	f000 fbce 	bl	800390c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}

08003174 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)//TODO DMA Current sensing
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <DMA1_Channel1_IRQHandler+0x10>)
 800317a:	f001 fee3 	bl	8004f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000190 	.word	0x20000190

08003188 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	counter[0]=get_absolute_position(&encoders[0]);//get absolute position
 800318c:	4809      	ldr	r0, [pc, #36]	; (80031b4 <TIM1_CC_IRQHandler+0x2c>)
 800318e:	f7fe fd00 	bl	8001b92 <get_absolute_position>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <TIM1_CC_IRQHandler+0x30>)
 8003198:	601a      	str	r2, [r3, #0]
	counter[0]-=counter_calibration[0];//remove calibration bias
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <TIM1_CC_IRQHandler+0x30>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <TIM1_CC_IRQHandler+0x34>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <TIM1_CC_IRQHandler+0x30>)
 80031a6:	6013      	str	r3, [r2, #0]
//	counter[0]=4294967296-counter[0];

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031a8:	4805      	ldr	r0, [pc, #20]	; (80031c0 <TIM1_CC_IRQHandler+0x38>)
 80031aa:	f004 ff5d 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200004fc 	.word	0x200004fc
 80031b8:	20000340 	.word	0x20000340
 80031bc:	2000034c 	.word	0x2000034c
 80031c0:	20000608 	.word	0x20000608

080031c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	counter[1]=get_absolute_position(&encoders[1]);//get absolute position
 80031c8:	4809      	ldr	r0, [pc, #36]	; (80031f0 <TIM2_IRQHandler+0x2c>)
 80031ca:	f7fe fce2 	bl	8001b92 <get_absolute_position>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <TIM2_IRQHandler+0x30>)
 80031d4:	605a      	str	r2, [r3, #4]
	counter[1]-=counter_calibration[1];//remove calibration bias
 80031d6:	4b07      	ldr	r3, [pc, #28]	; (80031f4 <TIM2_IRQHandler+0x30>)
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <TIM2_IRQHandler+0x34>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <TIM2_IRQHandler+0x30>)
 80031e2:	6053      	str	r3, [r2, #4]
//	counter[1]=4294967296-counter[1];
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <TIM2_IRQHandler+0x38>)
 80031e6:	f004 ff3f 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000508 	.word	0x20000508
 80031f4:	20000340 	.word	0x20000340
 80031f8:	2000034c 	.word	0x2000034c
 80031fc:	20000654 	.word	0x20000654

08003200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	counter[2]=get_absolute_position(&encoders[2]);//get absolute position
 8003204:	4809      	ldr	r0, [pc, #36]	; (800322c <TIM3_IRQHandler+0x2c>)
 8003206:	f7fe fcc4 	bl	8001b92 <get_absolute_position>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <TIM3_IRQHandler+0x30>)
 8003210:	609a      	str	r2, [r3, #8]
	counter[2]-=counter_calibration[2];//remove calibration bias
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <TIM3_IRQHandler+0x30>)
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <TIM3_IRQHandler+0x34>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <TIM3_IRQHandler+0x30>)
 800321e:	6093      	str	r3, [r2, #8]
//	counter[2]=4294967296-counter[2];
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003220:	4805      	ldr	r0, [pc, #20]	; (8003238 <TIM3_IRQHandler+0x38>)
 8003222:	f004 ff21 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000514 	.word	0x20000514
 8003230:	20000340 	.word	0x20000340
 8003234:	2000034c 	.word	0x2000034c
 8003238:	200006a0 	.word	0x200006a0

0800323c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <TIM5_IRQHandler+0x10>)
 8003242:	f004 ff11 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200006ec 	.word	0x200006ec

08003250 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  if (receiveNsendFlag) fdcan_process_rx_message();
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <TIM6_DAC_IRQHandler+0x34>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <TIM6_DAC_IRQHandler+0x10>
 800325c:	f7fe fda4 	bl	8001da8 <fdcan_process_rx_message>
  if(count_init!=0){run_fsm(&state);}
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <TIM6_DAC_IRQHandler+0x38>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <TIM6_DAC_IRQHandler+0x1e>
 8003268:	4808      	ldr	r0, [pc, #32]	; (800328c <TIM6_DAC_IRQHandler+0x3c>)
 800326a:	f7fe ff4d 	bl	8002108 <run_fsm>
  loop_count++;
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <TIM6_DAC_IRQHandler+0x40>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	4a06      	ldr	r2, [pc, #24]	; (8003290 <TIM6_DAC_IRQHandler+0x40>)
 8003276:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003278:	4806      	ldr	r0, [pc, #24]	; (8003294 <TIM6_DAC_IRQHandler+0x44>)
 800327a:	f004 fef5 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000394 	.word	0x20000394
 8003288:	20000338 	.word	0x20000338
 800328c:	20000574 	.word	0x20000574
 8003290:	20000398 	.word	0x20000398
 8003294:	20000738 	.word	0x20000738

08003298 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */
	if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <FDCAN2_IT0_IRQHandler+0x40>)
 800329e:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <FDCAN2_IT0_IRQHandler+0x44>)
 80032a0:	2140      	movs	r1, #64	; 0x40
 80032a2:	480f      	ldr	r0, [pc, #60]	; (80032e0 <FDCAN2_IT0_IRQHandler+0x48>)
 80032a4:	f002 f926 	bl	80054f4 <HAL_FDCAN_GetRxMessage>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <FDCAN2_IT0_IRQHandler+0x1a>
	{
		Error_Handler();
 80032ae:	f7ff fa26 	bl	80026fe <Error_Handler>
	}

	receiveNsendFlag = true;
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <FDCAN2_IT0_IRQHandler+0x4c>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80032b8:	2200      	movs	r2, #0
 80032ba:	2101      	movs	r1, #1
 80032bc:	4808      	ldr	r0, [pc, #32]	; (80032e0 <FDCAN2_IT0_IRQHandler+0x48>)
 80032be:	f002 f9f3 	bl	80056a8 <HAL_FDCAN_ActivateNotification>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <FDCAN2_IT0_IRQHandler+0x34>
	{
		Error_Handler();
 80032c8:	f7ff fa19 	bl	80026fe <Error_Handler>
	}
  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80032cc:	4804      	ldr	r0, [pc, #16]	; (80032e0 <FDCAN2_IT0_IRQHandler+0x48>)
 80032ce:	f002 fad1 	bl	8005874 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200002b8 	.word	0x200002b8
 80032dc:	20000224 	.word	0x20000224
 80032e0:	200002d4 	.word	0x200002d4
 80032e4:	20000394 	.word	0x20000394

080032e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <SystemInit+0x20>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	4a05      	ldr	r2, [pc, #20]	; (8003308 <SystemInit+0x20>)
 80032f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08c      	sub	sp, #48	; 0x30
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003312:	f107 030c 	add.w	r3, r7, #12
 8003316:	2224      	movs	r2, #36	; 0x24
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f005 fbe4 	bl	8008ae8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	463b      	mov	r3, r7
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <MX_TIM1_Init+0xac>)
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <MX_TIM1_Init+0xb0>)
 800332e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <MX_TIM1_Init+0xac>)
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <MX_TIM1_Init+0xac>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <MX_TIM1_Init+0xac>)
 800333e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003342:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003344:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <MX_TIM1_Init+0xac>)
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <MX_TIM1_Init+0xac>)
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <MX_TIM1_Init+0xac>)
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003356:	2303      	movs	r3, #3
 8003358:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800335a:	2302      	movs	r3, #2
 800335c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800335e:	2301      	movs	r3, #1
 8003360:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800336a:	2302      	movs	r3, #2
 800336c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800336e:	2301      	movs	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003372:	2300      	movs	r3, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	4619      	mov	r1, r3
 8003380:	480d      	ldr	r0, [pc, #52]	; (80033b8 <MX_TIM1_Init+0xac>)
 8003382:	f004 fd1d 	bl	8007dc0 <HAL_TIM_Encoder_Init>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800338c:	f7ff f9b7 	bl	80026fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800339c:	463b      	mov	r3, r7
 800339e:	4619      	mov	r1, r3
 80033a0:	4805      	ldr	r0, [pc, #20]	; (80033b8 <MX_TIM1_Init+0xac>)
 80033a2:	f005 fa93 	bl	80088cc <HAL_TIMEx_MasterConfigSynchronization>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80033ac:	f7ff f9a7 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80033b0:	bf00      	nop
 80033b2:	3730      	adds	r7, #48	; 0x30
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20000608 	.word	0x20000608
 80033bc:	40012c00 	.word	0x40012c00

080033c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08c      	sub	sp, #48	; 0x30
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033c6:	f107 030c 	add.w	r3, r7, #12
 80033ca:	2224      	movs	r2, #36	; 0x24
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f005 fb8a 	bl	8008ae8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d4:	463b      	mov	r3, r7
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033de:	4b21      	ldr	r3, [pc, #132]	; (8003464 <MX_TIM2_Init+0xa4>)
 80033e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80033e6:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <MX_TIM2_Init+0xa4>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <MX_TIM2_Init+0xa4>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80033f2:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <MX_TIM2_Init+0xa4>)
 80033f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fa:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <MX_TIM2_Init+0xa4>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003400:	4b18      	ldr	r3, [pc, #96]	; (8003464 <MX_TIM2_Init+0xa4>)
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003406:	2303      	movs	r3, #3
 8003408:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800340a:	2302      	movs	r3, #2
 800340c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800340e:	2301      	movs	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800341a:	2302      	movs	r3, #2
 800341c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800341e:	2301      	movs	r3, #1
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003422:	2300      	movs	r3, #0
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	4619      	mov	r1, r3
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <MX_TIM2_Init+0xa4>)
 8003432:	f004 fcc5 	bl	8007dc0 <HAL_TIM_Encoder_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800343c:	f7ff f95f 	bl	80026fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003440:	2300      	movs	r3, #0
 8003442:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003444:	2300      	movs	r3, #0
 8003446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003448:	463b      	mov	r3, r7
 800344a:	4619      	mov	r1, r3
 800344c:	4805      	ldr	r0, [pc, #20]	; (8003464 <MX_TIM2_Init+0xa4>)
 800344e:	f005 fa3d 	bl	80088cc <HAL_TIMEx_MasterConfigSynchronization>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003458:	f7ff f951 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800345c:	bf00      	nop
 800345e:	3730      	adds	r7, #48	; 0x30
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000654 	.word	0x20000654

08003468 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	; 0x30
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f005 fb36 	bl	8008ae8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800347c:	463b      	mov	r3, r7
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <MX_TIM3_Init+0xa4>)
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <MX_TIM3_Init+0xa8>)
 800348a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800348c:	4b1f      	ldr	r3, [pc, #124]	; (800350c <MX_TIM3_Init+0xa4>)
 800348e:	2200      	movs	r2, #0
 8003490:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <MX_TIM3_Init+0xa4>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003498:	4b1c      	ldr	r3, [pc, #112]	; (800350c <MX_TIM3_Init+0xa4>)
 800349a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800349e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <MX_TIM3_Init+0xa4>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <MX_TIM3_Init+0xa4>)
 80034a8:	2280      	movs	r2, #128	; 0x80
 80034aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80034ac:	2303      	movs	r3, #3
 80034ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80034b0:	2302      	movs	r3, #2
 80034b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034b4:	2301      	movs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80034c0:	2302      	movs	r3, #2
 80034c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034c4:	2301      	movs	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	4619      	mov	r1, r3
 80034d6:	480d      	ldr	r0, [pc, #52]	; (800350c <MX_TIM3_Init+0xa4>)
 80034d8:	f004 fc72 	bl	8007dc0 <HAL_TIM_Encoder_Init>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80034e2:	f7ff f90c 	bl	80026fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e6:	2300      	movs	r3, #0
 80034e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034ee:	463b      	mov	r3, r7
 80034f0:	4619      	mov	r1, r3
 80034f2:	4806      	ldr	r0, [pc, #24]	; (800350c <MX_TIM3_Init+0xa4>)
 80034f4:	f005 f9ea 	bl	80088cc <HAL_TIMEx_MasterConfigSynchronization>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80034fe:	f7ff f8fe 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003502:	bf00      	nop
 8003504:	3730      	adds	r7, #48	; 0x30
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200006a0 	.word	0x200006a0
 8003510:	40000400 	.word	0x40000400

08003514 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800351a:	f107 0310 	add.w	r3, r7, #16
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <MX_TIM5_Init+0x94>)
 8003534:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <MX_TIM5_Init+0x98>)
 8003536:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50;
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <MX_TIM5_Init+0x94>)
 800353a:	2232      	movs	r2, #50	; 0x32
 800353c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800353e:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <MX_TIM5_Init+0x94>)
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 144;
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <MX_TIM5_Init+0x94>)
 8003546:	2290      	movs	r2, #144	; 0x90
 8003548:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800354a:	4b17      	ldr	r3, [pc, #92]	; (80035a8 <MX_TIM5_Init+0x94>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003550:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <MX_TIM5_Init+0x94>)
 8003552:	2280      	movs	r2, #128	; 0x80
 8003554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003556:	4814      	ldr	r0, [pc, #80]	; (80035a8 <MX_TIM5_Init+0x94>)
 8003558:	f004 fb62 	bl	8007c20 <HAL_TIM_Base_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003562:	f7ff f8cc 	bl	80026fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800356a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800356c:	f107 0310 	add.w	r3, r7, #16
 8003570:	4619      	mov	r1, r3
 8003572:	480d      	ldr	r0, [pc, #52]	; (80035a8 <MX_TIM5_Init+0x94>)
 8003574:	f004 fef8 	bl	8008368 <HAL_TIM_ConfigClockSource>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800357e:	f7ff f8be 	bl	80026fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800358a:	1d3b      	adds	r3, r7, #4
 800358c:	4619      	mov	r1, r3
 800358e:	4806      	ldr	r0, [pc, #24]	; (80035a8 <MX_TIM5_Init+0x94>)
 8003590:	f005 f99c 	bl	80088cc <HAL_TIMEx_MasterConfigSynchronization>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800359a:	f7ff f8b0 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800359e:	bf00      	nop
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200006ec 	.word	0x200006ec
 80035ac:	40000c00 	.word	0x40000c00

080035b0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <MX_TIM6_Init+0x64>)
 80035c2:	4a15      	ldr	r2, [pc, #84]	; (8003618 <MX_TIM6_Init+0x68>)
 80035c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 80035c6:	4b13      	ldr	r3, [pc, #76]	; (8003614 <MX_TIM6_Init+0x64>)
 80035c8:	2263      	movs	r2, #99	; 0x63
 80035ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <MX_TIM6_Init+0x64>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 143;
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <MX_TIM6_Init+0x64>)
 80035d4:	228f      	movs	r2, #143	; 0x8f
 80035d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035d8:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <MX_TIM6_Init+0x64>)
 80035da:	2280      	movs	r2, #128	; 0x80
 80035dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80035de:	480d      	ldr	r0, [pc, #52]	; (8003614 <MX_TIM6_Init+0x64>)
 80035e0:	f004 fb1e 	bl	8007c20 <HAL_TIM_Base_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80035ea:	f7ff f888 	bl	80026fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4806      	ldr	r0, [pc, #24]	; (8003614 <MX_TIM6_Init+0x64>)
 80035fc:	f005 f966 	bl	80088cc <HAL_TIMEx_MasterConfigSynchronization>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003606:	f7ff f87a 	bl	80026fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000738 	.word	0x20000738
 8003618:	40001000 	.word	0x40001000

0800361c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08e      	sub	sp, #56	; 0x38
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a51      	ldr	r2, [pc, #324]	; (8003780 <HAL_TIM_Encoder_MspInit+0x164>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d130      	bne.n	80036a0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800363e:	4b51      	ldr	r3, [pc, #324]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 8003640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003642:	4a50      	ldr	r2, [pc, #320]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 8003644:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003648:	6613      	str	r3, [r2, #96]	; 0x60
 800364a:	4b4e      	ldr	r3, [pc, #312]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 800364c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003652:	623b      	str	r3, [r7, #32]
 8003654:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003656:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365a:	4a4a      	ldr	r2, [pc, #296]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003662:	4b48      	ldr	r3, [pc, #288]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 800366e:	2303      	movs	r3, #3
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800367e:	2302      	movs	r3, #2
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003686:	4619      	mov	r1, r3
 8003688:	483f      	ldr	r0, [pc, #252]	; (8003788 <HAL_TIM_Encoder_MspInit+0x16c>)
 800368a:	f002 fb89 	bl	8005da0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	2100      	movs	r1, #0
 8003692:	201b      	movs	r0, #27
 8003694:	f001 fb75 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003698:	201b      	movs	r0, #27
 800369a:	f001 fb8c 	bl	8004db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800369e:	e06b      	b.n	8003778 <HAL_TIM_Encoder_MspInit+0x15c>
  else if(tim_encoderHandle->Instance==TIM2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d131      	bne.n	800370e <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036aa:	4b36      	ldr	r3, [pc, #216]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	4a35      	ldr	r2, [pc, #212]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6593      	str	r3, [r2, #88]	; 0x58
 80036b6:	4b33      	ldr	r3, [pc, #204]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	4b30      	ldr	r3, [pc, #192]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ce:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC2_B_Pin|ENC2_A_Pin;
 80036da:	2322      	movs	r3, #34	; 0x22
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e6:	2300      	movs	r3, #0
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036ea:	2301      	movs	r3, #1
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f2:	4619      	mov	r1, r3
 80036f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f8:	f002 fb52 	bl	8005da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2100      	movs	r1, #0
 8003700:	201c      	movs	r0, #28
 8003702:	f001 fb3e 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003706:	201c      	movs	r0, #28
 8003708:	f001 fb55 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 800370c:	e034      	b.n	8003778 <HAL_TIM_Encoder_MspInit+0x15c>
  else if(tim_encoderHandle->Instance==TIM3)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_TIM_Encoder_MspInit+0x170>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d12f      	bne.n	8003778 <HAL_TIM_Encoder_MspInit+0x15c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	4a19      	ldr	r2, [pc, #100]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 800371e:	f043 0302 	orr.w	r3, r3, #2
 8003722:	6593      	str	r3, [r2, #88]	; 0x58
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003730:	4b14      	ldr	r3, [pc, #80]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 8003732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003734:	4a13      	ldr	r2, [pc, #76]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 8003736:	f043 0304 	orr.w	r3, r3, #4
 800373a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <HAL_TIM_Encoder_MspInit+0x168>)
 800373e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 8003748:	23c0      	movs	r3, #192	; 0xc0
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374c:	2302      	movs	r3, #2
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003754:	2300      	movs	r3, #0
 8003756:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003758:	2302      	movs	r3, #2
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800375c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003760:	4619      	mov	r1, r3
 8003762:	4809      	ldr	r0, [pc, #36]	; (8003788 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003764:	f002 fb1c 	bl	8005da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003768:	2200      	movs	r2, #0
 800376a:	2100      	movs	r1, #0
 800376c:	201d      	movs	r0, #29
 800376e:	f001 fb08 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003772:	201d      	movs	r0, #29
 8003774:	f001 fb1f 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 8003778:	bf00      	nop
 800377a:	3738      	adds	r7, #56	; 0x38
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40021000 	.word	0x40021000
 8003788:	48000800 	.word	0x48000800
 800378c:	40000400 	.word	0x40000400

08003790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <HAL_TIM_Base_MspInit+0x78>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d114      	bne.n	80037cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <HAL_TIM_Base_MspInit+0x7c>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_TIM_Base_MspInit+0x7c>)
 80037a8:	f043 0308 	orr.w	r3, r3, #8
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_TIM_Base_MspInit+0x7c>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2100      	movs	r1, #0
 80037be:	2032      	movs	r0, #50	; 0x32
 80037c0:	f001 fadf 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80037c4:	2032      	movs	r0, #50	; 0x32
 80037c6:	f001 faf6 	bl	8004db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80037ca:	e018      	b.n	80037fe <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0f      	ldr	r2, [pc, #60]	; (8003810 <HAL_TIM_Base_MspInit+0x80>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d113      	bne.n	80037fe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <HAL_TIM_Base_MspInit+0x7c>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <HAL_TIM_Base_MspInit+0x7c>)
 80037dc:	f043 0310 	orr.w	r3, r3, #16
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_TIM_Base_MspInit+0x7c>)
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	2036      	movs	r0, #54	; 0x36
 80037f4:	f001 fac5 	bl	8004d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80037f8:	2036      	movs	r0, #54	; 0x36
 80037fa:	f001 fadc 	bl	8004db6 <HAL_NVIC_EnableIRQ>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40021000 	.word	0x40021000
 8003810:	40001000 	.word	0x40001000

08003814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
              ldr   r0, =_estack
 8003814:	480d      	ldr	r0, [pc, #52]	; (800384c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003816:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003818:	480d      	ldr	r0, [pc, #52]	; (8003850 <LoopForever+0x6>)
  ldr r1, =_edata
 800381a:	490e      	ldr	r1, [pc, #56]	; (8003854 <LoopForever+0xa>)
  ldr r2, =_sidata
 800381c:	4a0e      	ldr	r2, [pc, #56]	; (8003858 <LoopForever+0xe>)
  movs r3, #0
 800381e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003820:	e002      	b.n	8003828 <LoopCopyDataInit>

08003822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003826:	3304      	adds	r3, #4

08003828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800382a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800382c:	d3f9      	bcc.n	8003822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800382e:	4a0b      	ldr	r2, [pc, #44]	; (800385c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003830:	4c0b      	ldr	r4, [pc, #44]	; (8003860 <LoopForever+0x16>)
  movs r3, #0
 8003832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003834:	e001      	b.n	800383a <LoopFillZerobss>

08003836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003838:	3204      	adds	r2, #4

0800383a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800383a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800383c:	d3fb      	bcc.n	8003836 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800383e:	f7ff fd53 	bl	80032e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003842:	f005 f91f 	bl	8008a84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003846:	f7fe feed 	bl	8002624 <main>

0800384a <LoopForever>:

LoopForever:
    b LoopForever
 800384a:	e7fe      	b.n	800384a <LoopForever>
              ldr   r0, =_estack
 800384c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003854:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8003858:	08008b6c 	.word	0x08008b6c
  ldr r2, =_sbss
 800385c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8003860:	20000788 	.word	0x20000788

08003864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003864:	e7fe      	b.n	8003864 <ADC1_2_IRQHandler>

08003866 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003870:	2003      	movs	r0, #3
 8003872:	f001 fa7b 	bl	8004d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003876:	200f      	movs	r0, #15
 8003878:	f000 f80e 	bl	8003898 <HAL_InitTick>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	71fb      	strb	r3, [r7, #7]
 8003886:	e001      	b.n	800388c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003888:	f7ff fbf6 	bl	8003078 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800388c:	79fb      	ldrb	r3, [r7, #7]

}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <HAL_InitTick+0x68>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d022      	beq.n	80038f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80038ac:	4b15      	ldr	r3, [pc, #84]	; (8003904 <HAL_InitTick+0x6c>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_InitTick+0x68>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fa8a 	bl	8004dda <HAL_SYSTICK_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	d809      	bhi.n	80038e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d2:	2200      	movs	r2, #0
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038da:	f001 fa52 	bl	8004d82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <HAL_InitTick+0x70>)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	e007      	b.n	80038f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	e004      	b.n	80038f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e001      	b.n	80038f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	2000002c 	.word	0x2000002c
 8003904:	20000024 	.word	0x20000024
 8003908:	20000028 	.word	0x20000028

0800390c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_IncTick+0x1c>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_IncTick+0x20>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4413      	add	r3, r2
 800391a:	4a03      	ldr	r2, [pc, #12]	; (8003928 <HAL_IncTick+0x1c>)
 800391c:	6013      	str	r3, [r2, #0]
}
 800391e:	bf00      	nop
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	20000784 	.word	0x20000784
 800392c:	2000002c 	.word	0x2000002c

08003930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return uwTick;
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_GetTick+0x14>)
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000784 	.word	0x20000784

08003948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003950:	f7ff ffee 	bl	8003930 <HAL_GetTick>
 8003954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003960:	d004      	beq.n	800396c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_Delay+0x40>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800396c:	bf00      	nop
 800396e:	f7ff ffdf 	bl	8003930 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	429a      	cmp	r2, r3
 800397c:	d8f7      	bhi.n	800396e <HAL_Delay+0x26>
  {
  }
}
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	2000002c 	.word	0x2000002c

0800398c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3360      	adds	r3, #96	; 0x60
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <LL_ADC_SetOffset+0x44>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	03fff000 	.word	0x03fff000

08003a3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3360      	adds	r3, #96	; 0x60
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3360      	adds	r3, #96	; 0x60
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b087      	sub	sp, #28
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3360      	adds	r3, #96	; 0x60
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003ac8:	bf00      	nop
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3360      	adds	r3, #96	; 0x60
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	431a      	orrs	r2, r3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	615a      	str	r2, [r3, #20]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3330      	adds	r3, #48	; 0x30
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	4413      	add	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	211f      	movs	r1, #31
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	401a      	ands	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	0e9b      	lsrs	r3, r3, #26
 8003b68:	f003 011f 	and.w	r1, r3, #31
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	431a      	orrs	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3314      	adds	r3, #20
 8003b98:	461a      	mov	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	0e5b      	lsrs	r3, r3, #25
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	4413      	add	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	0d1b      	lsrs	r3, r3, #20
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2107      	movs	r1, #7
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	401a      	ands	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	0d1b      	lsrs	r3, r3, #20
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a0f      	ldr	r2, [pc, #60]	; (8003c2c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10a      	bne.n	8003c0a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003c08:	e00a      	b.n	8003c20 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c16:	43db      	mvns	r3, r3
 8003c18:	401a      	ands	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	407f0000 	.word	0x407f0000

08003c30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6093      	str	r3, [r2, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c68:	d101      	bne.n	8003c6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cb8:	d101      	bne.n	8003cbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <LL_ADC_IsEnabled+0x18>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <LL_ADC_IsEnabled+0x1a>
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d101      	bne.n	8003d0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d101      	bne.n	8003d30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b089      	sub	sp, #36	; 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e1af      	b.n	80040ba <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7fd f881 	bl	8000e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff67 	bl	8003c54 <LL_ADC_IsDeepPowerDownEnabled>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff4d 	bl	8003c30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ff82 	bl	8003ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d115      	bne.n	8003dd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff66 	bl	8003c7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db0:	4b9f      	ldr	r3, [pc, #636]	; (8004030 <HAL_ADC_Init+0x2f0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	4a9f      	ldr	r2, [pc, #636]	; (8004034 <HAL_ADC_Init+0x2f4>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003dc4:	e002      	b.n	8003dcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f9      	bne.n	8003dc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff ff64 	bl	8003ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10d      	bne.n	8003dfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	f043 0210 	orr.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ff75 	bl	8003cf2 <LL_ADC_REG_IsConversionOngoing>
 8003e08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 8148 	bne.w	80040a8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 8144 	bne.w	80040a8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e28:	f043 0202 	orr.w	r2, r3, #2
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff49 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d141      	bne.n	8003ec4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e48:	d004      	beq.n	8003e54 <HAL_ADC_Init+0x114>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a7a      	ldr	r2, [pc, #488]	; (8004038 <HAL_ADC_Init+0x2f8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10f      	bne.n	8003e74 <HAL_ADC_Init+0x134>
 8003e54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e58:	f7ff ff38 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	4876      	ldr	r0, [pc, #472]	; (8004038 <HAL_ADC_Init+0x2f8>)
 8003e60:	f7ff ff34 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4323      	orrs	r3, r4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e012      	b.n	8003e9a <HAL_ADC_Init+0x15a>
 8003e74:	4871      	ldr	r0, [pc, #452]	; (800403c <HAL_ADC_Init+0x2fc>)
 8003e76:	f7ff ff29 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4870      	ldr	r0, [pc, #448]	; (8004040 <HAL_ADC_Init+0x300>)
 8003e7e:	f7ff ff25 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e82:	4603      	mov	r3, r0
 8003e84:	431c      	orrs	r4, r3
 8003e86:	486f      	ldr	r0, [pc, #444]	; (8004044 <HAL_ADC_Init+0x304>)
 8003e88:	f7ff ff20 	bl	8003ccc <LL_ADC_IsEnabled>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4323      	orrs	r3, r4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_Init+0x172>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a62      	ldr	r2, [pc, #392]	; (8004038 <HAL_ADC_Init+0x2f8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_Init+0x176>
 8003eb2:	4a65      	ldr	r2, [pc, #404]	; (8004048 <HAL_ADC_Init+0x308>)
 8003eb4:	e000      	b.n	8003eb8 <HAL_ADC_Init+0x178>
 8003eb6:	4a65      	ldr	r2, [pc, #404]	; (800404c <HAL_ADC_Init+0x30c>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f7ff fd64 	bl	800398c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7f5b      	ldrb	r3, [r3, #29]
 8003ec8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ece:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003ed4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003eda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d106      	bne.n	8003f00 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	045b      	lsls	r3, r3, #17
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d009      	beq.n	8003f1c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <HAL_ADC_Init+0x310>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	69b9      	ldr	r1, [r7, #24]
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fed1 	bl	8003cf2 <LL_ADC_REG_IsConversionOngoing>
 8003f50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fede 	bl	8003d18 <LL_ADC_INJ_IsConversionOngoing>
 8003f5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d17f      	bne.n	8004064 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d17c      	bne.n	8004064 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f6e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f76:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f86:	f023 0302 	bic.w	r3, r3, #2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	69b9      	ldr	r1, [r7, #24]
 8003f90:	430b      	orrs	r3, r1
 8003f92:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d017      	beq.n	8003fcc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003faa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fb4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6911      	ldr	r1, [r2, #16]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003fca:	e013      	b.n	8003ff4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fda:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ff0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d12a      	bne.n	8004054 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004014:	4311      	orrs	r1, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800401a:	4311      	orrs	r1, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004020:	430a      	orrs	r2, r1
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	611a      	str	r2, [r3, #16]
 800402e:	e019      	b.n	8004064 <HAL_ADC_Init+0x324>
 8004030:	20000024 	.word	0x20000024
 8004034:	053e2d63 	.word	0x053e2d63
 8004038:	50000100 	.word	0x50000100
 800403c:	50000400 	.word	0x50000400
 8004040:	50000500 	.word	0x50000500
 8004044:	50000600 	.word	0x50000600
 8004048:	50000300 	.word	0x50000300
 800404c:	50000700 	.word	0x50000700
 8004050:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d10c      	bne.n	8004086 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f023 010f 	bic.w	r1, r3, #15
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	1e5a      	subs	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
 8004084:	e007      	b.n	8004096 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 020f 	bic.w	r2, r2, #15
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409a:	f023 0303 	bic.w	r3, r3, #3
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80040a6:	e007      	b.n	80040b8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	f043 0210 	orr.w	r2, r3, #16
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3724      	adds	r7, #36	; 0x24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}
 80040c2:	bf00      	nop

080040c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b0b6      	sub	sp, #216	; 0xd8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d102      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x24>
 80040e2:	2302      	movs	r3, #2
 80040e4:	f000 bc13 	b.w	800490e <HAL_ADC_ConfigChannel+0x84a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fdfc 	bl	8003cf2 <LL_ADC_REG_IsConversionOngoing>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f040 83f3 	bne.w	80048e8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	f7ff fd0e 	bl	8003b30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fdea 	bl	8003cf2 <LL_ADC_REG_IsConversionOngoing>
 800411e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fdf6 	bl	8003d18 <LL_ADC_INJ_IsConversionOngoing>
 800412c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004130:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 81d9 	bne.w	80044ec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800413a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 81d4 	bne.w	80044ec <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800414c:	d10f      	bne.n	800416e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	4619      	mov	r1, r3
 800415a:	f7ff fd15 	bl	8003b88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff fccf 	bl	8003b0a <LL_ADC_SetSamplingTimeCommonConfig>
 800416c:	e00e      	b.n	800418c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6819      	ldr	r1, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	461a      	mov	r2, r3
 800417c:	f7ff fd04 	bl	8003b88 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fcbf 	bl	8003b0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	08db      	lsrs	r3, r3, #3
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d022      	beq.n	80041f4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6919      	ldr	r1, [r3, #16]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041be:	f7ff fc19 	bl	80039f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6919      	ldr	r1, [r3, #16]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7ff fc65 	bl	8003a9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6919      	ldr	r1, [r3, #16]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	7f1b      	ldrb	r3, [r3, #28]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d102      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x126>
 80041e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e8:	e000      	b.n	80041ec <HAL_ADC_ConfigChannel+0x128>
 80041ea:	2300      	movs	r3, #0
 80041ec:	461a      	mov	r2, r3
 80041ee:	f7ff fc71 	bl	8003ad4 <LL_ADC_SetOffsetSaturation>
 80041f2:	e17b      	b.n	80044ec <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fc1e 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 8004200:	4603      	mov	r3, r0
 8004202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x15c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fc13 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 8004216:	4603      	mov	r3, r0
 8004218:	0e9b      	lsrs	r3, r3, #26
 800421a:	f003 021f 	and.w	r2, r3, #31
 800421e:	e01e      	b.n	800425e <HAL_ADC_ConfigChannel+0x19a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fc08 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 800422c:	4603      	mov	r3, r0
 800422e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800423e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800424e:	2320      	movs	r3, #32
 8004250:	e004      	b.n	800425c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004252:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x1b2>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	0e9b      	lsrs	r3, r3, #26
 8004270:	f003 031f 	and.w	r3, r3, #31
 8004274:	e018      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x1e4>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004282:	fa93 f3a3 	rbit	r3, r3
 8004286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800428a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800428e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004292:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800429a:	2320      	movs	r3, #32
 800429c:	e004      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800429e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d106      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	2100      	movs	r1, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fbd7 	bl	8003a68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2101      	movs	r1, #1
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fbbb 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x222>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fbb0 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 80042dc:	4603      	mov	r3, r0
 80042de:	0e9b      	lsrs	r3, r3, #26
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	e01e      	b.n	8004324 <HAL_ADC_ConfigChannel+0x260>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2101      	movs	r1, #1
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fba5 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004304:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800430c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004314:	2320      	movs	r3, #32
 8004316:	e004      	b.n	8004322 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800431c:	fab3 f383 	clz	r3, r3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <HAL_ADC_ConfigChannel+0x278>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	0e9b      	lsrs	r3, r3, #26
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	e018      	b.n	800436e <HAL_ADC_ConfigChannel+0x2aa>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004348:	fa93 f3a3 	rbit	r3, r3
 800434c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004350:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004360:	2320      	movs	r3, #32
 8004362:	e004      	b.n	800436e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800436e:	429a      	cmp	r2, r3
 8004370:	d106      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	2101      	movs	r1, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fb74 	bl	8003a68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2102      	movs	r1, #2
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fb58 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 800438c:	4603      	mov	r3, r0
 800438e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x2e8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2102      	movs	r1, #2
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fb4d 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 80043a2:	4603      	mov	r3, r0
 80043a4:	0e9b      	lsrs	r3, r3, #26
 80043a6:	f003 021f 	and.w	r2, r3, #31
 80043aa:	e01e      	b.n	80043ea <HAL_ADC_ConfigChannel+0x326>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2102      	movs	r1, #2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fb42 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80043ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80043d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80043da:	2320      	movs	r3, #32
 80043dc:	e004      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80043de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x33e>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	0e9b      	lsrs	r3, r3, #26
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	e016      	b.n	8004430 <HAL_ADC_ConfigChannel+0x36c>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800440e:	fa93 f3a3 	rbit	r3, r3
 8004412:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004414:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800441a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004422:	2320      	movs	r3, #32
 8004424:	e004      	b.n	8004430 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004430:	429a      	cmp	r2, r3
 8004432:	d106      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2200      	movs	r2, #0
 800443a:	2102      	movs	r1, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fb13 	bl	8003a68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2103      	movs	r1, #3
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff faf7 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 800444e:	4603      	mov	r3, r0
 8004450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <HAL_ADC_ConfigChannel+0x3aa>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2103      	movs	r1, #3
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff faec 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 8004464:	4603      	mov	r3, r0
 8004466:	0e9b      	lsrs	r3, r3, #26
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	e017      	b.n	800449e <HAL_ADC_ConfigChannel+0x3da>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2103      	movs	r1, #3
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fae1 	bl	8003a3c <LL_ADC_GetOffsetChannel>
 800447a:	4603      	mov	r3, r0
 800447c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004480:	fa93 f3a3 	rbit	r3, r3
 8004484:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004488:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800448a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004490:	2320      	movs	r3, #32
 8004492:	e003      	b.n	800449c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004496:	fab3 f383 	clz	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x3f2>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	e011      	b.n	80044da <HAL_ADC_ConfigChannel+0x416>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044be:	fa93 f3a3 	rbit	r3, r3
 80044c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80044c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80044c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80044ce:	2320      	movs	r3, #32
 80044d0:	e003      	b.n	80044da <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80044d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d4:	fab3 f383 	clz	r3, r3
 80044d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044da:	429a      	cmp	r2, r3
 80044dc:	d106      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	2103      	movs	r1, #3
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fabe 	bl	8003a68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fbeb 	bl	8003ccc <LL_ADC_IsEnabled>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f040 813d 	bne.w	8004778 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6819      	ldr	r1, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	461a      	mov	r2, r3
 800450c:	f7ff fb68 	bl	8003be0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4aa2      	ldr	r2, [pc, #648]	; (80047a0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	f040 812e 	bne.w	8004778 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x480>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	0e9b      	lsrs	r3, r3, #26
 8004532:	3301      	adds	r3, #1
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	2b09      	cmp	r3, #9
 800453a:	bf94      	ite	ls
 800453c:	2301      	movls	r3, #1
 800453e:	2300      	movhi	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e019      	b.n	8004578 <HAL_ADC_ConfigChannel+0x4b4>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004554:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800455c:	2320      	movs	r3, #32
 800455e:	e003      	b.n	8004568 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004562:	fab3 f383 	clz	r3, r3
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3301      	adds	r3, #1
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2b09      	cmp	r3, #9
 8004570:	bf94      	ite	ls
 8004572:	2301      	movls	r3, #1
 8004574:	2300      	movhi	r3, #0
 8004576:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004578:	2b00      	cmp	r3, #0
 800457a:	d079      	beq.n	8004670 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004584:	2b00      	cmp	r3, #0
 8004586:	d107      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x4d4>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	0e9b      	lsrs	r3, r3, #26
 800458e:	3301      	adds	r3, #1
 8004590:	069b      	lsls	r3, r3, #26
 8004592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004596:	e015      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x500>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80045a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80045aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80045b0:	2320      	movs	r3, #32
 80045b2:	e003      	b.n	80045bc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80045b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b6:	fab3 f383 	clz	r3, r3
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3301      	adds	r3, #1
 80045be:	069b      	lsls	r3, r3, #26
 80045c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x520>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	0e9b      	lsrs	r3, r3, #26
 80045d6:	3301      	adds	r3, #1
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	e017      	b.n	8004614 <HAL_ADC_ConfigChannel+0x550>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ec:	fa93 f3a3 	rbit	r3, r3
 80045f0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80045f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80045f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80045fc:	2320      	movs	r3, #32
 80045fe:	e003      	b.n	8004608 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	3301      	adds	r3, #1
 800460a:	f003 031f 	and.w	r3, r3, #31
 800460e:	2101      	movs	r1, #1
 8004610:	fa01 f303 	lsl.w	r3, r1, r3
 8004614:	ea42 0103 	orr.w	r1, r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <HAL_ADC_ConfigChannel+0x576>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	3301      	adds	r3, #1
 800462c:	f003 021f 	and.w	r2, r3, #31
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	051b      	lsls	r3, r3, #20
 8004638:	e018      	b.n	800466c <HAL_ADC_ConfigChannel+0x5a8>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	fa93 f3a3 	rbit	r3, r3
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800464c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004652:	2320      	movs	r3, #32
 8004654:	e003      	b.n	800465e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	fab3 f383 	clz	r3, r3
 800465c:	b2db      	uxtb	r3, r3
 800465e:	3301      	adds	r3, #1
 8004660:	f003 021f 	and.w	r2, r3, #31
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800466c:	430b      	orrs	r3, r1
 800466e:	e07e      	b.n	800476e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004678:	2b00      	cmp	r3, #0
 800467a:	d107      	bne.n	800468c <HAL_ADC_ConfigChannel+0x5c8>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	0e9b      	lsrs	r3, r3, #26
 8004682:	3301      	adds	r3, #1
 8004684:	069b      	lsls	r3, r3, #26
 8004686:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800468a:	e015      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x5f4>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	fa93 f3a3 	rbit	r3, r3
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80046a4:	2320      	movs	r3, #32
 80046a6:	e003      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	3301      	adds	r3, #1
 80046b2:	069b      	lsls	r3, r3, #26
 80046b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x614>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	3301      	adds	r3, #1
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2101      	movs	r1, #1
 80046d2:	fa01 f303 	lsl.w	r3, r1, r3
 80046d6:	e017      	b.n	8004708 <HAL_ADC_ConfigChannel+0x644>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	fa93 f3a3 	rbit	r3, r3
 80046e4:	61fb      	str	r3, [r7, #28]
  return result;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80046f0:	2320      	movs	r3, #32
 80046f2:	e003      	b.n	80046fc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	3301      	adds	r3, #1
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	2101      	movs	r1, #1
 8004704:	fa01 f303 	lsl.w	r3, r1, r3
 8004708:	ea42 0103 	orr.w	r1, r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10d      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x670>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	0e9b      	lsrs	r3, r3, #26
 800471e:	3301      	adds	r3, #1
 8004720:	f003 021f 	and.w	r2, r3, #31
 8004724:	4613      	mov	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	3b1e      	subs	r3, #30
 800472c:	051b      	lsls	r3, r3, #20
 800472e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004732:	e01b      	b.n	800476c <HAL_ADC_ConfigChannel+0x6a8>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	613b      	str	r3, [r7, #16]
  return result;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800474c:	2320      	movs	r3, #32
 800474e:	e003      	b.n	8004758 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	fab3 f383 	clz	r3, r3
 8004756:	b2db      	uxtb	r3, r3
 8004758:	3301      	adds	r3, #1
 800475a:	f003 021f 	and.w	r2, r3, #31
 800475e:	4613      	mov	r3, r2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	4413      	add	r3, r2
 8004764:	3b1e      	subs	r3, #30
 8004766:	051b      	lsls	r3, r3, #20
 8004768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800476c:	430b      	orrs	r3, r1
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	6892      	ldr	r2, [r2, #8]
 8004772:	4619      	mov	r1, r3
 8004774:	f7ff fa08 	bl	8003b88 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_ADC_ConfigChannel+0x6e0>)
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80be 	beq.w	8004902 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800478e:	d004      	beq.n	800479a <HAL_ADC_ConfigChannel+0x6d6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <HAL_ADC_ConfigChannel+0x6e4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10a      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x6ec>
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <HAL_ADC_ConfigChannel+0x6e8>)
 800479c:	e009      	b.n	80047b2 <HAL_ADC_ConfigChannel+0x6ee>
 800479e:	bf00      	nop
 80047a0:	407f0000 	.word	0x407f0000
 80047a4:	80080000 	.word	0x80080000
 80047a8:	50000100 	.word	0x50000100
 80047ac:	50000300 	.word	0x50000300
 80047b0:	4b59      	ldr	r3, [pc, #356]	; (8004918 <HAL_ADC_ConfigChannel+0x854>)
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff f910 	bl	80039d8 <LL_ADC_GetCommonPathInternalCh>
 80047b8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a56      	ldr	r2, [pc, #344]	; (800491c <HAL_ADC_ConfigChannel+0x858>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_ADC_ConfigChannel+0x70c>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a55      	ldr	r2, [pc, #340]	; (8004920 <HAL_ADC_ConfigChannel+0x85c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d13a      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d134      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047e4:	d005      	beq.n	80047f2 <HAL_ADC_ConfigChannel+0x72e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a4e      	ldr	r2, [pc, #312]	; (8004924 <HAL_ADC_ConfigChannel+0x860>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	f040 8085 	bne.w	80048fc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047fa:	d004      	beq.n	8004806 <HAL_ADC_ConfigChannel+0x742>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a49      	ldr	r2, [pc, #292]	; (8004928 <HAL_ADC_ConfigChannel+0x864>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_ADC_ConfigChannel+0x746>
 8004806:	4a49      	ldr	r2, [pc, #292]	; (800492c <HAL_ADC_ConfigChannel+0x868>)
 8004808:	e000      	b.n	800480c <HAL_ADC_ConfigChannel+0x748>
 800480a:	4a43      	ldr	r2, [pc, #268]	; (8004918 <HAL_ADC_ConfigChannel+0x854>)
 800480c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7ff f8cb 	bl	80039b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800481c:	4b44      	ldr	r3, [pc, #272]	; (8004930 <HAL_ADC_ConfigChannel+0x86c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	099b      	lsrs	r3, r3, #6
 8004822:	4a44      	ldr	r2, [pc, #272]	; (8004934 <HAL_ADC_ConfigChannel+0x870>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	099b      	lsrs	r3, r3, #6
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004836:	e002      	b.n	800483e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3b01      	subs	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f9      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004844:	e05a      	b.n	80048fc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3b      	ldr	r2, [pc, #236]	; (8004938 <HAL_ADC_ConfigChannel+0x874>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d125      	bne.n	800489c <HAL_ADC_ConfigChannel+0x7d8>
 8004850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d11f      	bne.n	800489c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a31      	ldr	r2, [pc, #196]	; (8004928 <HAL_ADC_ConfigChannel+0x864>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d104      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x7ac>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a34      	ldr	r2, [pc, #208]	; (800493c <HAL_ADC_ConfigChannel+0x878>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d047      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004878:	d004      	beq.n	8004884 <HAL_ADC_ConfigChannel+0x7c0>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <HAL_ADC_ConfigChannel+0x864>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x7c4>
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <HAL_ADC_ConfigChannel+0x868>)
 8004886:	e000      	b.n	800488a <HAL_ADC_ConfigChannel+0x7c6>
 8004888:	4a23      	ldr	r2, [pc, #140]	; (8004918 <HAL_ADC_ConfigChannel+0x854>)
 800488a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800488e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f7ff f88c 	bl	80039b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800489a:	e031      	b.n	8004900 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a27      	ldr	r2, [pc, #156]	; (8004940 <HAL_ADC_ConfigChannel+0x87c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d12d      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d127      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_ADC_ConfigChannel+0x864>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d022      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048c4:	d004      	beq.n	80048d0 <HAL_ADC_ConfigChannel+0x80c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <HAL_ADC_ConfigChannel+0x864>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d101      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x810>
 80048d0:	4a16      	ldr	r2, [pc, #88]	; (800492c <HAL_ADC_ConfigChannel+0x868>)
 80048d2:	e000      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x812>
 80048d4:	4a10      	ldr	r2, [pc, #64]	; (8004918 <HAL_ADC_ConfigChannel+0x854>)
 80048d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7ff f866 	bl	80039b2 <LL_ADC_SetCommonPathInternalCh>
 80048e6:	e00c      	b.n	8004902 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	f043 0220 	orr.w	r2, r3, #32
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80048fa:	e002      	b.n	8004902 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048fc:	bf00      	nop
 80048fe:	e000      	b.n	8004902 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004900:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800490a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800490e:	4618      	mov	r0, r3
 8004910:	37d8      	adds	r7, #216	; 0xd8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	50000700 	.word	0x50000700
 800491c:	c3210000 	.word	0xc3210000
 8004920:	90c00010 	.word	0x90c00010
 8004924:	50000600 	.word	0x50000600
 8004928:	50000100 	.word	0x50000100
 800492c:	50000300 	.word	0x50000300
 8004930:	20000024 	.word	0x20000024
 8004934:	053e2d63 	.word	0x053e2d63
 8004938:	c7520000 	.word	0xc7520000
 800493c:	50000500 	.word	0x50000500
 8004940:	cb840000 	.word	0xcb840000

08004944 <LL_ADC_IsEnabled>:
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <LL_ADC_IsEnabled+0x18>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <LL_ADC_IsEnabled+0x1a>
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <LL_ADC_REG_IsConversionOngoing>:
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b04      	cmp	r3, #4
 800497c:	d101      	bne.n	8004982 <LL_ADC_REG_IsConversionOngoing+0x18>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b0a1      	sub	sp, #132	; 0x84
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e0e7      	b.n	8004b7e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80049b6:	2300      	movs	r3, #0
 80049b8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80049ba:	2300      	movs	r3, #0
 80049bc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049c6:	d102      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049c8:	4b6f      	ldr	r3, [pc, #444]	; (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	e009      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a6e      	ldr	r2, [pc, #440]	; (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d102      	bne.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80049d8:	4b6d      	ldr	r3, [pc, #436]	; (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	e001      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0be      	b.n	8004b7e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff ffb1 	bl	800496a <LL_ADC_REG_IsConversionOngoing>
 8004a08:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff ffab 	bl	800496a <LL_ADC_REG_IsConversionOngoing>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f040 80a0 	bne.w	8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 809c 	bne.w	8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a2c:	d004      	beq.n	8004a38 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a55      	ldr	r2, [pc, #340]	; (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004a38:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004a3a:	e000      	b.n	8004a3e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004a3c:	4b56      	ldr	r3, [pc, #344]	; (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004a3e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d04b      	beq.n	8004ae0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a5a:	035b      	lsls	r3, r3, #13
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a6c:	d004      	beq.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a45      	ldr	r2, [pc, #276]	; (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d10f      	bne.n	8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004a7c:	f7ff ff62 	bl	8004944 <LL_ADC_IsEnabled>
 8004a80:	4604      	mov	r4, r0
 8004a82:	4841      	ldr	r0, [pc, #260]	; (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a84:	f7ff ff5e 	bl	8004944 <LL_ADC_IsEnabled>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4323      	orrs	r3, r4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf0c      	ite	eq
 8004a90:	2301      	moveq	r3, #1
 8004a92:	2300      	movne	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	e012      	b.n	8004abe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a98:	483c      	ldr	r0, [pc, #240]	; (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a9a:	f7ff ff53 	bl	8004944 <LL_ADC_IsEnabled>
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	483b      	ldr	r0, [pc, #236]	; (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004aa2:	f7ff ff4f 	bl	8004944 <LL_ADC_IsEnabled>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	431c      	orrs	r4, r3
 8004aaa:	483c      	ldr	r0, [pc, #240]	; (8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004aac:	f7ff ff4a 	bl	8004944 <LL_ADC_IsEnabled>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4323      	orrs	r3, r4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d056      	beq.n	8004b70 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004aca:	f023 030f 	bic.w	r3, r3, #15
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	6811      	ldr	r1, [r2, #0]
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	6892      	ldr	r2, [r2, #8]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004adc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ade:	e047      	b.n	8004b70 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004af4:	d004      	beq.n	8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a23      	ldr	r2, [pc, #140]	; (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10f      	bne.n	8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004b00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004b04:	f7ff ff1e 	bl	8004944 <LL_ADC_IsEnabled>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	481f      	ldr	r0, [pc, #124]	; (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b0c:	f7ff ff1a 	bl	8004944 <LL_ADC_IsEnabled>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4323      	orrs	r3, r4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e012      	b.n	8004b46 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004b20:	481a      	ldr	r0, [pc, #104]	; (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b22:	f7ff ff0f 	bl	8004944 <LL_ADC_IsEnabled>
 8004b26:	4604      	mov	r4, r0
 8004b28:	4819      	ldr	r0, [pc, #100]	; (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b2a:	f7ff ff0b 	bl	8004944 <LL_ADC_IsEnabled>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	431c      	orrs	r4, r3
 8004b32:	481a      	ldr	r0, [pc, #104]	; (8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b34:	f7ff ff06 	bl	8004944 <LL_ADC_IsEnabled>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	4323      	orrs	r3, r4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b52:	f023 030f 	bic.w	r3, r3, #15
 8004b56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b58:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b5a:	e009      	b.n	8004b70 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b6e:	e000      	b.n	8004b72 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3784      	adds	r7, #132	; 0x84
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd90      	pop	{r4, r7, pc}
 8004b86:	bf00      	nop
 8004b88:	50000100 	.word	0x50000100
 8004b8c:	50000400 	.word	0x50000400
 8004b90:	50000500 	.word	0x50000500
 8004b94:	50000300 	.word	0x50000300
 8004b98:	50000700 	.word	0x50000700
 8004b9c:	50000600 	.word	0x50000600

08004ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bd2:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	60d3      	str	r3, [r2, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <__NVIC_GetPriorityGrouping+0x18>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	f003 0307 	and.w	r3, r3, #7
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	e000ed00 	.word	0xe000ed00

08004c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	db0b      	blt.n	8004c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	f003 021f 	and.w	r2, r3, #31
 8004c1c:	4907      	ldr	r1, [pc, #28]	; (8004c3c <__NVIC_EnableIRQ+0x38>)
 8004c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2001      	movs	r0, #1
 8004c26:	fa00 f202 	lsl.w	r2, r0, r2
 8004c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	e000e100 	.word	0xe000e100

08004c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	6039      	str	r1, [r7, #0]
 8004c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	db0a      	blt.n	8004c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	490c      	ldr	r1, [pc, #48]	; (8004c8c <__NVIC_SetPriority+0x4c>)
 8004c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5e:	0112      	lsls	r2, r2, #4
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	440b      	add	r3, r1
 8004c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c68:	e00a      	b.n	8004c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	4908      	ldr	r1, [pc, #32]	; (8004c90 <__NVIC_SetPriority+0x50>)
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	3b04      	subs	r3, #4
 8004c78:	0112      	lsls	r2, r2, #4
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	761a      	strb	r2, [r3, #24]
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	e000e100 	.word	0xe000e100
 8004c90:	e000ed00 	.word	0xe000ed00

08004c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b089      	sub	sp, #36	; 0x24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f1c3 0307 	rsb	r3, r3, #7
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	bf28      	it	cs
 8004cb2:	2304      	movcs	r3, #4
 8004cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d902      	bls.n	8004cc4 <NVIC_EncodePriority+0x30>
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3b03      	subs	r3, #3
 8004cc2:	e000      	b.n	8004cc6 <NVIC_EncodePriority+0x32>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce6:	43d9      	mvns	r1, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cec:	4313      	orrs	r3, r2
         );
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3724      	adds	r7, #36	; 0x24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004d00:	f3bf 8f4f 	dsb	sy
}
 8004d04:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <__NVIC_SystemReset+0x24>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004d0e:	4904      	ldr	r1, [pc, #16]	; (8004d20 <__NVIC_SystemReset+0x24>)
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <__NVIC_SystemReset+0x28>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d16:	f3bf 8f4f 	dsb	sy
}
 8004d1a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <__NVIC_SystemReset+0x20>
 8004d20:	e000ed00 	.word	0xe000ed00
 8004d24:	05fa0004 	.word	0x05fa0004

08004d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d38:	d301      	bcc.n	8004d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e00f      	b.n	8004d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <SysTick_Config+0x40>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d46:	210f      	movs	r1, #15
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d4c:	f7ff ff78 	bl	8004c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <SysTick_Config+0x40>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d56:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <SysTick_Config+0x40>)
 8004d58:	2207      	movs	r2, #7
 8004d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	e000e010 	.word	0xe000e010

08004d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff13 	bl	8004ba0 <__NVIC_SetPriorityGrouping>
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	4603      	mov	r3, r0
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d90:	f7ff ff2a 	bl	8004be8 <__NVIC_GetPriorityGrouping>
 8004d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f7ff ff7a 	bl	8004c94 <NVIC_EncodePriority>
 8004da0:	4602      	mov	r2, r0
 8004da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff ff49 	bl	8004c40 <__NVIC_SetPriority>
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff ff1d 	bl	8004c04 <__NVIC_EnableIRQ>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004dd6:	f7ff ff91 	bl	8004cfc <__NVIC_SystemReset>

08004dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ffa0 	bl	8004d28 <SysTick_Config>
 8004de8:	4603      	mov	r3, r0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e08d      	b.n	8004f22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4b47      	ldr	r3, [pc, #284]	; (8004f2c <HAL_DMA_Init+0x138>)
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d80f      	bhi.n	8004e32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	4b45      	ldr	r3, [pc, #276]	; (8004f30 <HAL_DMA_Init+0x13c>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	4a45      	ldr	r2, [pc, #276]	; (8004f34 <HAL_DMA_Init+0x140>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	009a      	lsls	r2, r3, #2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a42      	ldr	r2, [pc, #264]	; (8004f38 <HAL_DMA_Init+0x144>)
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8004e30:	e00e      	b.n	8004e50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	4b40      	ldr	r3, [pc, #256]	; (8004f3c <HAL_DMA_Init+0x148>)
 8004e3a:	4413      	add	r3, r2
 8004e3c:	4a3d      	ldr	r2, [pc, #244]	; (8004f34 <HAL_DMA_Init+0x140>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	009a      	lsls	r2, r3, #2
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a3c      	ldr	r2, [pc, #240]	; (8004f40 <HAL_DMA_Init+0x14c>)
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8fe 	bl	80050a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eb0:	d102      	bne.n	8004eb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ecc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d010      	beq.n	8004ef8 <HAL_DMA_Init+0x104>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d80c      	bhi.n	8004ef8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f91e 	bl	8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	e008      	b.n	8004f0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40020407 	.word	0x40020407
 8004f30:	bffdfff8 	.word	0xbffdfff8
 8004f34:	cccccccd 	.word	0xcccccccd
 8004f38:	40020000 	.word	0x40020000
 8004f3c:	bffdfbf8 	.word	0xbffdfbf8
 8004f40:	40020400 	.word	0x40020400

08004f44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	2204      	movs	r2, #4
 8004f66:	409a      	lsls	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d026      	beq.n	8004fbe <HAL_DMA_IRQHandler+0x7a>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d021      	beq.n	8004fbe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d107      	bne.n	8004f98 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0204 	bic.w	r2, r2, #4
 8004f96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	f003 021f 	and.w	r2, r3, #31
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004faa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d071      	beq.n	8005098 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004fbc:	e06c      	b.n	8005098 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d02e      	beq.n	8005030 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d029      	beq.n	8005030 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10b      	bne.n	8005002 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 020a 	bic.w	r2, r2, #10
 8004ff8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f003 021f 	and.w	r2, r3, #31
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	2102      	movs	r1, #2
 8005010:	fa01 f202 	lsl.w	r2, r1, r2
 8005014:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d038      	beq.n	8005098 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800502e:	e033      	b.n	8005098 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	2208      	movs	r2, #8
 800503a:	409a      	lsls	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4013      	ands	r3, r2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d02a      	beq.n	800509a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d025      	beq.n	800509a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 020e 	bic.w	r2, r2, #14
 800505c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f003 021f 	and.w	r2, r3, #31
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	2101      	movs	r1, #1
 800506c:	fa01 f202 	lsl.w	r2, r1, r2
 8005070:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005098:	bf00      	nop
 800509a:	bf00      	nop
}
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b16      	ldr	r3, [pc, #88]	; (800510c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d802      	bhi.n	80050be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e001      	b.n	80050c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80050be:	4b15      	ldr	r3, [pc, #84]	; (8005114 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80050c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	3b08      	subs	r3, #8
 80050ce:	4a12      	ldr	r2, [pc, #72]	; (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	009a      	lsls	r2, r3, #2
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80050ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	2201      	movs	r2, #1
 80050f8:	409a      	lsls	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40020407 	.word	0x40020407
 8005110:	40020800 	.word	0x40020800
 8005114:	40020820 	.word	0x40020820
 8005118:	cccccccd 	.word	0xcccccccd
 800511c:	40020880 	.word	0x40020880

08005120 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a08      	ldr	r2, [pc, #32]	; (8005164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005142:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3b01      	subs	r3, #1
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2201      	movs	r2, #1
 800514e:	409a      	lsls	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	1000823f 	.word	0x1000823f
 8005164:	40020940 	.word	0x40020940

08005168 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e147      	b.n	800540a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc fd72 	bl	8001c78 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0210 	bic.w	r2, r2, #16
 80051a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051a4:	f7fe fbc4 	bl	8003930 <HAL_GetTick>
 80051a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80051aa:	e012      	b.n	80051d2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80051ac:	f7fe fbc0 	bl	8003930 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b0a      	cmp	r3, #10
 80051b8:	d90b      	bls.n	80051d2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051be:	f043 0201 	orr.w	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2203      	movs	r2, #3
 80051ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e11b      	b.n	800540a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d0e5      	beq.n	80051ac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699a      	ldr	r2, [r3, #24]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051f0:	f7fe fb9e 	bl	8003930 <HAL_GetTick>
 80051f4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80051f6:	e012      	b.n	800521e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80051f8:	f7fe fb9a 	bl	8003930 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b0a      	cmp	r3, #10
 8005204:	d90b      	bls.n	800521e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520a:	f043 0201 	orr.w	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2203      	movs	r2, #3
 8005216:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e0f5      	b.n	800540a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0e5      	beq.n	80051f8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699a      	ldr	r2, [r3, #24]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0202 	orr.w	r2, r2, #2
 800523a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a74      	ldr	r2, [pc, #464]	; (8005414 <HAL_FDCAN_Init+0x2ac>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d103      	bne.n	800524e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005246:	4a74      	ldr	r2, [pc, #464]	; (8005418 <HAL_FDCAN_Init+0x2b0>)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	7c1b      	ldrb	r3, [r3, #16]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d108      	bne.n	8005268 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699a      	ldr	r2, [r3, #24]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005264:	619a      	str	r2, [r3, #24]
 8005266:	e007      	b.n	8005278 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005276:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	7c5b      	ldrb	r3, [r3, #17]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d108      	bne.n	8005292 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528e:	619a      	str	r2, [r3, #24]
 8005290:	e007      	b.n	80052a2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	7c9b      	ldrb	r3, [r3, #18]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d108      	bne.n	80052bc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052b8:	619a      	str	r2, [r3, #24]
 80052ba:	e007      	b.n	80052cc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052ca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80052f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0210 	bic.w	r2, r2, #16
 8005300:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d108      	bne.n	800531c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699a      	ldr	r2, [r3, #24]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0204 	orr.w	r2, r2, #4
 8005318:	619a      	str	r2, [r3, #24]
 800531a:	e02c      	b.n	8005376 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d028      	beq.n	8005376 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d01c      	beq.n	8005366 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800533a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0210 	orr.w	r2, r2, #16
 800534a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d110      	bne.n	8005376 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0220 	orr.w	r2, r2, #32
 8005362:	619a      	str	r2, [r3, #24]
 8005364:	e007      	b.n	8005376 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699a      	ldr	r2, [r3, #24]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0220 	orr.w	r2, r2, #32
 8005374:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	3b01      	subs	r3, #1
 800537c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	3b01      	subs	r3, #1
 8005384:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005386:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800538e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	3b01      	subs	r3, #1
 8005398:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800539e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80053a0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053aa:	d115      	bne.n	80053d8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	3b01      	subs	r3, #1
 80053b8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053ba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	3b01      	subs	r3, #1
 80053c2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80053c4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	3b01      	subs	r3, #1
 80053ce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80053d4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80053d6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fbee 	bl	8005bd0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40006400 	.word	0x40006400
 8005418:	40006500 	.word	0x40006500

0800541c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d110      	bne.n	8005452 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	e006      	b.n	8005460 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005456:	f043 0204 	orr.w	r2, r3, #4
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
  }
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d12c      	bne.n	80054de <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800548c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d007      	beq.n	80054a4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005498:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e023      	b.n	80054ec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fbf4 	bl	8005ca8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2101      	movs	r1, #1
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	fa01 f202 	lsl.w	r2, r1, r2
 80054cc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80054d0:	2201      	movs	r2, #1
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	409a      	lsls	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e006      	b.n	80054ec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	f043 0208 	orr.w	r2, r3, #8
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
  }
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b08b      	sub	sp, #44	; 0x2c
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005508:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800550a:	7efb      	ldrb	r3, [r7, #27]
 800550c:	2b02      	cmp	r3, #2
 800550e:	f040 80bc 	bne.w	800568a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d121      	bne.n	800555c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0af      	b.n	8005698 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	4613      	mov	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4413      	add	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	440b      	add	r3, r1
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	e020      	b.n	800559e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e08d      	b.n	8005698 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	0c9b      	lsrs	r3, r3, #18
 80055b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e005      	b.n	80055ce <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	3304      	adds	r3, #4
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0e1b      	lsrs	r3, r3, #24
 8005620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	0fda      	lsrs	r2, r3, #31
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	3304      	adds	r3, #4
 8005636:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800563c:	2300      	movs	r3, #0
 800563e:	623b      	str	r3, [r7, #32]
 8005640:	e00a      	b.n	8005658 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	441a      	add	r2, r3
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	440b      	add	r3, r1
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	3301      	adds	r3, #1
 8005656:	623b      	str	r3, [r7, #32]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8005660:	5cd3      	ldrb	r3, [r2, r3]
 8005662:	461a      	mov	r2, r3
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	4293      	cmp	r3, r2
 8005668:	d3eb      	bcc.n	8005642 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d105      	bne.n	800567c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800567a:	e004      	b.n	8005686 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	e006      	b.n	8005698 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568e:	f043 0208 	orr.w	r2, r3, #8
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
  }
}
 8005698:	4618      	mov	r0, r3
 800569a:	372c      	adds	r7, #44	; 0x2c
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	08008b54 	.word	0x08008b54

080056a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056ba:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d003      	beq.n	80056ca <HAL_FDCAN_ActivateNotification+0x22>
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	f040 80c8 	bne.w	800585a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d03b      	beq.n	800575e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d031      	beq.n	800575e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d027      	beq.n	800575e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d01d      	beq.n	800575e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b00      	cmp	r3, #0
 8005734:	d013      	beq.n	800575e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800573c:	2b00      	cmp	r3, #0
 800573e:	d004      	beq.n	800574a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0201 	orr.w	r2, r2, #1
 800576c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d13b      	bne.n	80057fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005788:	2b00      	cmp	r3, #0
 800578a:	d004      	beq.n	8005796 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d131      	bne.n	80057fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d127      	bne.n	80057fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11d      	bne.n	80057fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d113      	bne.n	80057fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00c      	beq.n	800580a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0202 	orr.w	r2, r2, #2
 8005808:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	430a      	orrs	r2, r1
 8005824:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	430a      	orrs	r2, r1
 8005842:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	430a      	orrs	r2, r1
 8005854:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e006      	b.n	8005868 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585e:	f043 0202 	orr.w	r2, r3, #2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
  }
}
 8005868:	4618      	mov	r0, r3
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005882:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005890:	4013      	ands	r3, r2
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a6:	6a3a      	ldr	r2, [r7, #32]
 80058a8:	4013      	ands	r3, r2
 80058aa:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058b6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	4013      	ands	r3, r2
 80058c2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ca:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80058ce:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4013      	ands	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80058e6:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4013      	ands	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00d      	beq.n	800591e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2240      	movs	r2, #64	; 0x40
 8005916:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f939 	bl	8005b90 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d014      	beq.n	8005964 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005942:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800595c:	6939      	ldr	r1, [r7, #16]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f8f7 	bl	8005b52 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005970:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f8b6 	bl	8005ae6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005988:	6a39      	ldr	r1, [r7, #32]
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f8b6 	bl	8005afc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800599e:	69f9      	ldr	r1, [r7, #28]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f8b6 	bl	8005b12 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00e      	beq.n	80059d2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ca:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f8ab 	bl	8005b28 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01a      	beq.n	8005a16 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d013      	beq.n	8005a16 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80059f6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4013      	ands	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2280      	movs	r2, #128	; 0x80
 8005a0c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f893 	bl	8005b3c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00e      	beq.n	8005a42 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a3a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f893 	bl	8005b68 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00e      	beq.n	8005a6e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d007      	beq.n	8005a6e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005a66:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f887 	bl	8005b7c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d011      	beq.n	8005aa0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f881 	bl	8005bb8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d009      	beq.n	8005ad0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f863 	bl	8005ba4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005ade:	bf00      	nop
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005bd8:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005bda:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a2f      	ldr	r2, [pc, #188]	; (8005ca0 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d103      	bne.n	8005bee <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005bec:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a2c      	ldr	r2, [pc, #176]	; (8005ca4 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d103      	bne.n	8005c00 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8005bfe:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c16:	041a      	lsls	r2, r3, #16
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c34:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	061a      	lsls	r2, r3, #24
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e005      	b.n	8005c82 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d3f3      	bcc.n	8005c76 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005c8e:	bf00      	nop
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	4000a400 	.word	0x4000a400
 8005ca0:	40006800 	.word	0x40006800
 8005ca4:	40006c00 	.word	0x40006c00

08005ca8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b089      	sub	sp, #36	; 0x24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005cc6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e00a      	b.n	8005cea <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005cdc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005ce2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ce8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005cf4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005cfa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005d00:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4413      	add	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	440b      	add	r3, r1
 8005d1a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	3304      	adds	r3, #4
 8005d26:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	3304      	adds	r3, #4
 8005d32:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e020      	b.n	8005d7c <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	3303      	adds	r3, #3
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	4413      	add	r3, r2
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	3302      	adds	r3, #2
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	440b      	add	r3, r1
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d52:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	3301      	adds	r3, #1
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	440b      	add	r3, r1
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005d60:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	440a      	add	r2, r1
 8005d68:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005d6a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	3304      	adds	r3, #4
 8005d74:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	0c1b      	lsrs	r3, r3, #16
 8005d82:	4a06      	ldr	r2, [pc, #24]	; (8005d9c <FDCAN_CopyMessageToRAM+0xf4>)
 8005d84:	5cd3      	ldrb	r3, [r2, r3]
 8005d86:	461a      	mov	r2, r3
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d3d5      	bcc.n	8005d3a <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	3724      	adds	r7, #36	; 0x24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	08008b54 	.word	0x08008b54

08005da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005dae:	e15a      	b.n	8006066 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	2101      	movs	r1, #1
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 814c 	beq.w	8006060 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d005      	beq.n	8005de0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d130      	bne.n	8005e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	2203      	movs	r2, #3
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	43db      	mvns	r3, r3
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4013      	ands	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e16:	2201      	movs	r2, #1
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43db      	mvns	r3, r3
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	4013      	ands	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	f003 0201 	and.w	r2, r3, #1
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d017      	beq.n	8005e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	2203      	movs	r2, #3
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4013      	ands	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d123      	bne.n	8005ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	08da      	lsrs	r2, r3, #3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3208      	adds	r2, #8
 8005e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	220f      	movs	r2, #15
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	08da      	lsrs	r2, r3, #3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3208      	adds	r2, #8
 8005ecc:	6939      	ldr	r1, [r7, #16]
 8005ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	2203      	movs	r2, #3
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f003 0203 	and.w	r2, r3, #3
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 80a6 	beq.w	8006060 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f14:	4b5b      	ldr	r3, [pc, #364]	; (8006084 <HAL_GPIO_Init+0x2e4>)
 8005f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f18:	4a5a      	ldr	r2, [pc, #360]	; (8006084 <HAL_GPIO_Init+0x2e4>)
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	6613      	str	r3, [r2, #96]	; 0x60
 8005f20:	4b58      	ldr	r3, [pc, #352]	; (8006084 <HAL_GPIO_Init+0x2e4>)
 8005f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f2c:	4a56      	ldr	r2, [pc, #344]	; (8006088 <HAL_GPIO_Init+0x2e8>)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	089b      	lsrs	r3, r3, #2
 8005f32:	3302      	adds	r3, #2
 8005f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	220f      	movs	r2, #15
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f56:	d01f      	beq.n	8005f98 <HAL_GPIO_Init+0x1f8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a4c      	ldr	r2, [pc, #304]	; (800608c <HAL_GPIO_Init+0x2ec>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d019      	beq.n	8005f94 <HAL_GPIO_Init+0x1f4>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a4b      	ldr	r2, [pc, #300]	; (8006090 <HAL_GPIO_Init+0x2f0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <HAL_GPIO_Init+0x1f0>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a4a      	ldr	r2, [pc, #296]	; (8006094 <HAL_GPIO_Init+0x2f4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00d      	beq.n	8005f8c <HAL_GPIO_Init+0x1ec>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a49      	ldr	r2, [pc, #292]	; (8006098 <HAL_GPIO_Init+0x2f8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d007      	beq.n	8005f88 <HAL_GPIO_Init+0x1e8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a48      	ldr	r2, [pc, #288]	; (800609c <HAL_GPIO_Init+0x2fc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d101      	bne.n	8005f84 <HAL_GPIO_Init+0x1e4>
 8005f80:	2305      	movs	r3, #5
 8005f82:	e00a      	b.n	8005f9a <HAL_GPIO_Init+0x1fa>
 8005f84:	2306      	movs	r3, #6
 8005f86:	e008      	b.n	8005f9a <HAL_GPIO_Init+0x1fa>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	e006      	b.n	8005f9a <HAL_GPIO_Init+0x1fa>
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e004      	b.n	8005f9a <HAL_GPIO_Init+0x1fa>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e002      	b.n	8005f9a <HAL_GPIO_Init+0x1fa>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <HAL_GPIO_Init+0x1fa>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	f002 0203 	and.w	r2, r2, #3
 8005fa0:	0092      	lsls	r2, r2, #2
 8005fa2:	4093      	lsls	r3, r2
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005faa:	4937      	ldr	r1, [pc, #220]	; (8006088 <HAL_GPIO_Init+0x2e8>)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	089b      	lsrs	r3, r3, #2
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fb8:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <HAL_GPIO_Init+0x300>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005fdc:	4a30      	ldr	r2, [pc, #192]	; (80060a0 <HAL_GPIO_Init+0x300>)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005fe2:	4b2f      	ldr	r3, [pc, #188]	; (80060a0 <HAL_GPIO_Init+0x300>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	43db      	mvns	r3, r3
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006006:	4a26      	ldr	r2, [pc, #152]	; (80060a0 <HAL_GPIO_Init+0x300>)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800600c:	4b24      	ldr	r3, [pc, #144]	; (80060a0 <HAL_GPIO_Init+0x300>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	43db      	mvns	r3, r3
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4013      	ands	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006030:	4a1b      	ldr	r2, [pc, #108]	; (80060a0 <HAL_GPIO_Init+0x300>)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006036:	4b1a      	ldr	r3, [pc, #104]	; (80060a0 <HAL_GPIO_Init+0x300>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	43db      	mvns	r3, r3
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4013      	ands	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800605a:	4a11      	ldr	r2, [pc, #68]	; (80060a0 <HAL_GPIO_Init+0x300>)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	3301      	adds	r3, #1
 8006064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	f47f ae9d 	bne.w	8005db0 <HAL_GPIO_Init+0x10>
  }
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	40021000 	.word	0x40021000
 8006088:	40010000 	.word	0x40010000
 800608c:	48000400 	.word	0x48000400
 8006090:	48000800 	.word	0x48000800
 8006094:	48000c00 	.word	0x48000c00
 8006098:	48001000 	.word	0x48001000
 800609c:	48001400 	.word	0x48001400
 80060a0:	40010400 	.word	0x40010400

080060a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	887b      	ldrh	r3, [r7, #2]
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060bc:	2301      	movs	r3, #1
 80060be:	73fb      	strb	r3, [r7, #15]
 80060c0:	e001      	b.n	80060c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	807b      	strh	r3, [r7, #2]
 80060e0:	4613      	mov	r3, r2
 80060e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060e4:	787b      	ldrb	r3, [r7, #1]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060ea:	887a      	ldrh	r2, [r7, #2]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060f0:	e002      	b.n	80060f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060f2:	887a      	ldrh	r2, [r7, #2]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d141      	bne.n	8006196 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006112:	4b4b      	ldr	r3, [pc, #300]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800611a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611e:	d131      	bne.n	8006184 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006120:	4b47      	ldr	r3, [pc, #284]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006126:	4a46      	ldr	r2, [pc, #280]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800612c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006130:	4b43      	ldr	r3, [pc, #268]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006138:	4a41      	ldr	r2, [pc, #260]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800613a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800613e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006140:	4b40      	ldr	r3, [pc, #256]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2232      	movs	r2, #50	; 0x32
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	4a3f      	ldr	r2, [pc, #252]	; (8006248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	0c9b      	lsrs	r3, r3, #18
 8006152:	3301      	adds	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006156:	e002      	b.n	800615e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3b01      	subs	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800615e:	4b38      	ldr	r3, [pc, #224]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616a:	d102      	bne.n	8006172 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f2      	bne.n	8006158 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006172:	4b33      	ldr	r3, [pc, #204]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	d158      	bne.n	8006232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e057      	b.n	8006234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006184:	4b2e      	ldr	r3, [pc, #184]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800618a:	4a2d      	ldr	r2, [pc, #180]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800618c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006194:	e04d      	b.n	8006232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619c:	d141      	bne.n	8006222 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800619e:	4b28      	ldr	r3, [pc, #160]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061aa:	d131      	bne.n	8006210 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061ac:	4b24      	ldr	r3, [pc, #144]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b2:	4a23      	ldr	r2, [pc, #140]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061bc:	4b20      	ldr	r3, [pc, #128]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061c4:	4a1e      	ldr	r2, [pc, #120]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061cc:	4b1d      	ldr	r3, [pc, #116]	; (8006244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2232      	movs	r2, #50	; 0x32
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	4a1c      	ldr	r2, [pc, #112]	; (8006248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80061d8:	fba2 2303 	umull	r2, r3, r2, r3
 80061dc:	0c9b      	lsrs	r3, r3, #18
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061e2:	e002      	b.n	80061ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061ea:	4b15      	ldr	r3, [pc, #84]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061f6:	d102      	bne.n	80061fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f2      	bne.n	80061e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800620a:	d112      	bne.n	8006232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e011      	b.n	8006234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006216:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006220:	e007      	b.n	8006232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006222:	4b07      	ldr	r3, [pc, #28]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800622a:	4a05      	ldr	r2, [pc, #20]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006230:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	40007000 	.word	0x40007000
 8006244:	20000024 	.word	0x20000024
 8006248:	431bde83 	.word	0x431bde83

0800624c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006250:	4b05      	ldr	r3, [pc, #20]	; (8006268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4a04      	ldr	r2, [pc, #16]	; (8006268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800625a:	6093      	str	r3, [r2, #8]
}
 800625c:	bf00      	nop
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40007000 	.word	0x40007000

0800626c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e306      	b.n	800688c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d075      	beq.n	8006376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800628a:	4b97      	ldr	r3, [pc, #604]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 030c 	and.w	r3, r3, #12
 8006292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006294:	4b94      	ldr	r3, [pc, #592]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0303 	and.w	r3, r3, #3
 800629c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	2b0c      	cmp	r3, #12
 80062a2:	d102      	bne.n	80062aa <HAL_RCC_OscConfig+0x3e>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d002      	beq.n	80062b0 <HAL_RCC_OscConfig+0x44>
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d10b      	bne.n	80062c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b0:	4b8d      	ldr	r3, [pc, #564]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d05b      	beq.n	8006374 <HAL_RCC_OscConfig+0x108>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d157      	bne.n	8006374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e2e1      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d0:	d106      	bne.n	80062e0 <HAL_RCC_OscConfig+0x74>
 80062d2:	4b85      	ldr	r3, [pc, #532]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a84      	ldr	r2, [pc, #528]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80062d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e01d      	b.n	800631c <HAL_RCC_OscConfig+0xb0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062e8:	d10c      	bne.n	8006304 <HAL_RCC_OscConfig+0x98>
 80062ea:	4b7f      	ldr	r3, [pc, #508]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a7e      	ldr	r2, [pc, #504]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80062f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	4b7c      	ldr	r3, [pc, #496]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a7b      	ldr	r2, [pc, #492]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80062fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	e00b      	b.n	800631c <HAL_RCC_OscConfig+0xb0>
 8006304:	4b78      	ldr	r3, [pc, #480]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a77      	ldr	r2, [pc, #476]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 800630a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	4b75      	ldr	r3, [pc, #468]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a74      	ldr	r2, [pc, #464]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800631a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d013      	beq.n	800634c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fd fb04 	bl	8003930 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800632c:	f7fd fb00 	bl	8003930 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b64      	cmp	r3, #100	; 0x64
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e2a6      	b.n	800688c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800633e:	4b6a      	ldr	r3, [pc, #424]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f0      	beq.n	800632c <HAL_RCC_OscConfig+0xc0>
 800634a:	e014      	b.n	8006376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fd faf0 	bl	8003930 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006354:	f7fd faec 	bl	8003930 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b64      	cmp	r3, #100	; 0x64
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e292      	b.n	800688c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006366:	4b60      	ldr	r3, [pc, #384]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f0      	bne.n	8006354 <HAL_RCC_OscConfig+0xe8>
 8006372:	e000      	b.n	8006376 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d075      	beq.n	800646e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006382:	4b59      	ldr	r3, [pc, #356]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800638c:	4b56      	ldr	r3, [pc, #344]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b0c      	cmp	r3, #12
 800639a:	d102      	bne.n	80063a2 <HAL_RCC_OscConfig+0x136>
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d002      	beq.n	80063a8 <HAL_RCC_OscConfig+0x13c>
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d11f      	bne.n	80063e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063a8:	4b4f      	ldr	r3, [pc, #316]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_RCC_OscConfig+0x154>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e265      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c0:	4b49      	ldr	r3, [pc, #292]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	061b      	lsls	r3, r3, #24
 80063ce:	4946      	ldr	r1, [pc, #280]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063d4:	4b45      	ldr	r3, [pc, #276]	; (80064ec <HAL_RCC_OscConfig+0x280>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fd fa5d 	bl	8003898 <HAL_InitTick>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d043      	beq.n	800646c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e251      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d023      	beq.n	8006438 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063f0:	4b3d      	ldr	r3, [pc, #244]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a3c      	ldr	r2, [pc, #240]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80063f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fc:	f7fd fa98 	bl	8003930 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006404:	f7fd fa94 	bl	8003930 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e23a      	b.n	800688c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006416:	4b34      	ldr	r3, [pc, #208]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f0      	beq.n	8006404 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006422:	4b31      	ldr	r3, [pc, #196]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	061b      	lsls	r3, r3, #24
 8006430:	492d      	ldr	r1, [pc, #180]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006432:	4313      	orrs	r3, r2
 8006434:	604b      	str	r3, [r1, #4]
 8006436:	e01a      	b.n	800646e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006438:	4b2b      	ldr	r3, [pc, #172]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a2a      	ldr	r2, [pc, #168]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 800643e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fd fa74 	bl	8003930 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800644c:	f7fd fa70 	bl	8003930 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e216      	b.n	800688c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800645e:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0x1e0>
 800646a:	e000      	b.n	800646e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800646c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d041      	beq.n	80064fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d01c      	beq.n	80064bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006482:	4b19      	ldr	r3, [pc, #100]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 8006484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006488:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 800648a:	f043 0301 	orr.w	r3, r3, #1
 800648e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006492:	f7fd fa4d 	bl	8003930 <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006498:	e008      	b.n	80064ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800649a:	f7fd fa49 	bl	8003930 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d901      	bls.n	80064ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e1ef      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064ac:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80064ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0ef      	beq.n	800649a <HAL_RCC_OscConfig+0x22e>
 80064ba:	e020      	b.n	80064fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80064be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064c2:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <HAL_RCC_OscConfig+0x27c>)
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064cc:	f7fd fa30 	bl	8003930 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064d2:	e00d      	b.n	80064f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d4:	f7fd fa2c 	bl	8003930 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d906      	bls.n	80064f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e1d2      	b.n	800688c <HAL_RCC_OscConfig+0x620>
 80064e6:	bf00      	nop
 80064e8:	40021000 	.word	0x40021000
 80064ec:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064f0:	4b8c      	ldr	r3, [pc, #560]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80064f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1ea      	bne.n	80064d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80a6 	beq.w	8006658 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800650c:	2300      	movs	r3, #0
 800650e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006510:	4b84      	ldr	r3, [pc, #528]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 8006512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_RCC_OscConfig+0x2b4>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_RCC_OscConfig+0x2b6>
 8006520:	2300      	movs	r3, #0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00d      	beq.n	8006542 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006526:	4b7f      	ldr	r3, [pc, #508]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 8006528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800652a:	4a7e      	ldr	r2, [pc, #504]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006530:	6593      	str	r3, [r2, #88]	; 0x58
 8006532:	4b7c      	ldr	r3, [pc, #496]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 8006534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800653e:	2301      	movs	r3, #1
 8006540:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006542:	4b79      	ldr	r3, [pc, #484]	; (8006728 <HAL_RCC_OscConfig+0x4bc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d118      	bne.n	8006580 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800654e:	4b76      	ldr	r3, [pc, #472]	; (8006728 <HAL_RCC_OscConfig+0x4bc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a75      	ldr	r2, [pc, #468]	; (8006728 <HAL_RCC_OscConfig+0x4bc>)
 8006554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655a:	f7fd f9e9 	bl	8003930 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006562:	f7fd f9e5 	bl	8003930 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e18b      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006574:	4b6c      	ldr	r3, [pc, #432]	; (8006728 <HAL_RCC_OscConfig+0x4bc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0f0      	beq.n	8006562 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d108      	bne.n	800659a <HAL_RCC_OscConfig+0x32e>
 8006588:	4b66      	ldr	r3, [pc, #408]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 800658a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658e:	4a65      	ldr	r2, [pc, #404]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006598:	e024      	b.n	80065e4 <HAL_RCC_OscConfig+0x378>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b05      	cmp	r3, #5
 80065a0:	d110      	bne.n	80065c4 <HAL_RCC_OscConfig+0x358>
 80065a2:	4b60      	ldr	r3, [pc, #384]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80065a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a8:	4a5e      	ldr	r2, [pc, #376]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80065aa:	f043 0304 	orr.w	r3, r3, #4
 80065ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065b2:	4b5c      	ldr	r3, [pc, #368]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80065b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b8:	4a5a      	ldr	r2, [pc, #360]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80065ba:	f043 0301 	orr.w	r3, r3, #1
 80065be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065c2:	e00f      	b.n	80065e4 <HAL_RCC_OscConfig+0x378>
 80065c4:	4b57      	ldr	r3, [pc, #348]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80065c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ca:	4a56      	ldr	r2, [pc, #344]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065d4:	4b53      	ldr	r3, [pc, #332]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065da:	4a52      	ldr	r2, [pc, #328]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80065dc:	f023 0304 	bic.w	r3, r3, #4
 80065e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d016      	beq.n	800661a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ec:	f7fd f9a0 	bl	8003930 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f2:	e00a      	b.n	800660a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f4:	f7fd f99c 	bl	8003930 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e140      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800660a:	4b46      	ldr	r3, [pc, #280]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 800660c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ed      	beq.n	80065f4 <HAL_RCC_OscConfig+0x388>
 8006618:	e015      	b.n	8006646 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661a:	f7fd f989 	bl	8003930 <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006620:	e00a      	b.n	8006638 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006622:	f7fd f985 	bl	8003930 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006630:	4293      	cmp	r3, r2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e129      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006638:	4b3a      	ldr	r3, [pc, #232]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 800663a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ed      	bne.n	8006622 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006646:	7ffb      	ldrb	r3, [r7, #31]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d105      	bne.n	8006658 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664c:	4b35      	ldr	r3, [pc, #212]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 800664e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006650:	4a34      	ldr	r2, [pc, #208]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 8006652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006656:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b00      	cmp	r3, #0
 8006662:	d03c      	beq.n	80066de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01c      	beq.n	80066a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800666c:	4b2d      	ldr	r3, [pc, #180]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 800666e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006672:	4a2c      	ldr	r2, [pc, #176]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667c:	f7fd f958 	bl	8003930 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006684:	f7fd f954 	bl	8003930 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e0fa      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006696:	4b23      	ldr	r3, [pc, #140]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 8006698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0ef      	beq.n	8006684 <HAL_RCC_OscConfig+0x418>
 80066a4:	e01b      	b.n	80066de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066a6:	4b1f      	ldr	r3, [pc, #124]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80066a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066ac:	4a1d      	ldr	r2, [pc, #116]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b6:	f7fd f93b 	bl	8003930 <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066be:	f7fd f937 	bl	8003930 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0dd      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066d0:	4b14      	ldr	r3, [pc, #80]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80066d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1ef      	bne.n	80066be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 80d1 	beq.w	800688a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066e8:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 030c 	and.w	r3, r3, #12
 80066f0:	2b0c      	cmp	r3, #12
 80066f2:	f000 808b 	beq.w	800680c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d15e      	bne.n	80067bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a08      	ldr	r2, [pc, #32]	; (8006724 <HAL_RCC_OscConfig+0x4b8>)
 8006704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670a:	f7fd f911 	bl	8003930 <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006710:	e00c      	b.n	800672c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006712:	f7fd f90d 	bl	8003930 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d905      	bls.n	800672c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e0b3      	b.n	800688c <HAL_RCC_OscConfig+0x620>
 8006724:	40021000 	.word	0x40021000
 8006728:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800672c:	4b59      	ldr	r3, [pc, #356]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1ec      	bne.n	8006712 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006738:	4b56      	ldr	r3, [pc, #344]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	4b56      	ldr	r3, [pc, #344]	; (8006898 <HAL_RCC_OscConfig+0x62c>)
 800673e:	4013      	ands	r3, r2
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6a11      	ldr	r1, [r2, #32]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006748:	3a01      	subs	r2, #1
 800674a:	0112      	lsls	r2, r2, #4
 800674c:	4311      	orrs	r1, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006752:	0212      	lsls	r2, r2, #8
 8006754:	4311      	orrs	r1, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800675a:	0852      	lsrs	r2, r2, #1
 800675c:	3a01      	subs	r2, #1
 800675e:	0552      	lsls	r2, r2, #21
 8006760:	4311      	orrs	r1, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006766:	0852      	lsrs	r2, r2, #1
 8006768:	3a01      	subs	r2, #1
 800676a:	0652      	lsls	r2, r2, #25
 800676c:	4311      	orrs	r1, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006772:	06d2      	lsls	r2, r2, #27
 8006774:	430a      	orrs	r2, r1
 8006776:	4947      	ldr	r1, [pc, #284]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 8006778:	4313      	orrs	r3, r2
 800677a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800677c:	4b45      	ldr	r3, [pc, #276]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a44      	ldr	r2, [pc, #272]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 8006782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006786:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006788:	4b42      	ldr	r3, [pc, #264]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	4a41      	ldr	r2, [pc, #260]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 800678e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006792:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006794:	f7fd f8cc 	bl	8003930 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679c:	f7fd f8c8 	bl	8003930 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e06e      	b.n	800688c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ae:	4b39      	ldr	r3, [pc, #228]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0f0      	beq.n	800679c <HAL_RCC_OscConfig+0x530>
 80067ba:	e066      	b.n	800688a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067bc:	4b35      	ldr	r3, [pc, #212]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a34      	ldr	r2, [pc, #208]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 80067c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80067c8:	4b32      	ldr	r3, [pc, #200]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4a31      	ldr	r2, [pc, #196]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 80067ce:	f023 0303 	bic.w	r3, r3, #3
 80067d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80067d4:	4b2f      	ldr	r3, [pc, #188]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4a2e      	ldr	r2, [pc, #184]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 80067da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80067de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fd f8a4 	bl	8003930 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ec:	f7fd f8a0 	bl	8003930 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e046      	b.n	800688c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067fe:	4b25      	ldr	r3, [pc, #148]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f0      	bne.n	80067ec <HAL_RCC_OscConfig+0x580>
 800680a:	e03e      	b.n	800688a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e039      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006818:	4b1e      	ldr	r3, [pc, #120]	; (8006894 <HAL_RCC_OscConfig+0x628>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f003 0203 	and.w	r2, r3, #3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	429a      	cmp	r2, r3
 800682a:	d12c      	bne.n	8006886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	3b01      	subs	r3, #1
 8006838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800683a:	429a      	cmp	r2, r3
 800683c:	d123      	bne.n	8006886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800684a:	429a      	cmp	r2, r3
 800684c:	d11b      	bne.n	8006886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800685a:	429a      	cmp	r2, r3
 800685c:	d113      	bne.n	8006886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	085b      	lsrs	r3, r3, #1
 800686a:	3b01      	subs	r3, #1
 800686c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800686e:	429a      	cmp	r2, r3
 8006870:	d109      	bne.n	8006886 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	3b01      	subs	r3, #1
 8006880:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006882:	429a      	cmp	r2, r3
 8006884:	d001      	beq.n	800688a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40021000 	.word	0x40021000
 8006898:	019f800c 	.word	0x019f800c

0800689c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e11e      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068b4:	4b91      	ldr	r3, [pc, #580]	; (8006afc <HAL_RCC_ClockConfig+0x260>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d910      	bls.n	80068e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c2:	4b8e      	ldr	r3, [pc, #568]	; (8006afc <HAL_RCC_ClockConfig+0x260>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f023 020f 	bic.w	r2, r3, #15
 80068ca:	498c      	ldr	r1, [pc, #560]	; (8006afc <HAL_RCC_ClockConfig+0x260>)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d2:	4b8a      	ldr	r3, [pc, #552]	; (8006afc <HAL_RCC_ClockConfig+0x260>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d001      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e106      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d073      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d129      	bne.n	800694c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068f8:	4b81      	ldr	r3, [pc, #516]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0f4      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006908:	f000 f966 	bl	8006bd8 <RCC_GetSysClockFreqFromPLLSource>
 800690c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4a7c      	ldr	r2, [pc, #496]	; (8006b04 <HAL_RCC_ClockConfig+0x268>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d93f      	bls.n	8006996 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006916:	4b7a      	ldr	r3, [pc, #488]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800692a:	2b00      	cmp	r3, #0
 800692c:	d033      	beq.n	8006996 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006932:	2b00      	cmp	r3, #0
 8006934:	d12f      	bne.n	8006996 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006936:	4b72      	ldr	r3, [pc, #456]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693e:	4a70      	ldr	r2, [pc, #448]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006944:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006946:	2380      	movs	r3, #128	; 0x80
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	e024      	b.n	8006996 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d107      	bne.n	8006964 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006954:	4b6a      	ldr	r3, [pc, #424]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0c6      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006964:	4b66      	ldr	r3, [pc, #408]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e0be      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006974:	f000 f8ce 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8006978:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4a61      	ldr	r2, [pc, #388]	; (8006b04 <HAL_RCC_ClockConfig+0x268>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d909      	bls.n	8006996 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006982:	4b5f      	ldr	r3, [pc, #380]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800698a:	4a5d      	ldr	r2, [pc, #372]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 800698c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006990:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006992:	2380      	movs	r3, #128	; 0x80
 8006994:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006996:	4b5a      	ldr	r3, [pc, #360]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f023 0203 	bic.w	r2, r3, #3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	4957      	ldr	r1, [pc, #348]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a8:	f7fc ffc2 	bl	8003930 <HAL_GetTick>
 80069ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ae:	e00a      	b.n	80069c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b0:	f7fc ffbe 	bl	8003930 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80069be:	4293      	cmp	r3, r2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e095      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c6:	4b4e      	ldr	r3, [pc, #312]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 020c 	and.w	r2, r3, #12
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d1eb      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d023      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069f0:	4b43      	ldr	r3, [pc, #268]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	4a42      	ldr	r2, [pc, #264]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80069f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a08:	4b3d      	ldr	r3, [pc, #244]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006a10:	4a3b      	ldr	r2, [pc, #236]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a18:	4b39      	ldr	r3, [pc, #228]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	4936      	ldr	r1, [pc, #216]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	d105      	bne.n	8006a3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a32:	4b33      	ldr	r3, [pc, #204]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4a32      	ldr	r2, [pc, #200]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <HAL_RCC_ClockConfig+0x260>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d21d      	bcs.n	8006a88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a4c:	4b2b      	ldr	r3, [pc, #172]	; (8006afc <HAL_RCC_ClockConfig+0x260>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f023 020f 	bic.w	r2, r3, #15
 8006a54:	4929      	ldr	r1, [pc, #164]	; (8006afc <HAL_RCC_ClockConfig+0x260>)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a5c:	f7fc ff68 	bl	8003930 <HAL_GetTick>
 8006a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a62:	e00a      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a64:	f7fc ff64 	bl	8003930 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e03b      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b20      	ldr	r3, [pc, #128]	; (8006afc <HAL_RCC_ClockConfig+0x260>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d1ed      	bne.n	8006a64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a94:	4b1a      	ldr	r3, [pc, #104]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4917      	ldr	r1, [pc, #92]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ab2:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	490f      	ldr	r1, [pc, #60]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ac6:	f000 f825 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	490c      	ldr	r1, [pc, #48]	; (8006b08 <HAL_RCC_ClockConfig+0x26c>)
 8006ad8:	5ccb      	ldrb	r3, [r1, r3]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <HAL_RCC_ClockConfig+0x270>)
 8006ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <HAL_RCC_ClockConfig+0x274>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fc fed4 	bl	8003898 <HAL_InitTick>
 8006af0:	4603      	mov	r3, r0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40022000 	.word	0x40022000
 8006b00:	40021000 	.word	0x40021000
 8006b04:	04c4b400 	.word	0x04c4b400
 8006b08:	08008b44 	.word	0x08008b44
 8006b0c:	20000024 	.word	0x20000024
 8006b10:	20000028 	.word	0x20000028

08006b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b1a:	4b2c      	ldr	r3, [pc, #176]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d102      	bne.n	8006b2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b26:	4b2a      	ldr	r3, [pc, #168]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	e047      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b2c:	4b27      	ldr	r3, [pc, #156]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d102      	bne.n	8006b3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b38:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	e03e      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b3e:	4b23      	ldr	r3, [pc, #140]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 030c 	and.w	r3, r3, #12
 8006b46:	2b0c      	cmp	r3, #12
 8006b48:	d136      	bne.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b4a:	4b20      	ldr	r3, [pc, #128]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b54:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	091b      	lsrs	r3, r3, #4
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d10c      	bne.n	8006b82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b68:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b70:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b72:	68d2      	ldr	r2, [r2, #12]
 8006b74:	0a12      	lsrs	r2, r2, #8
 8006b76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b7a:	fb02 f303 	mul.w	r3, r2, r3
 8006b7e:	617b      	str	r3, [r7, #20]
      break;
 8006b80:	e00c      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b82:	4a13      	ldr	r2, [pc, #76]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8a:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b8c:	68d2      	ldr	r2, [r2, #12]
 8006b8e:	0a12      	lsrs	r2, r2, #8
 8006b90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b94:	fb02 f303 	mul.w	r3, r2, r3
 8006b98:	617b      	str	r3, [r7, #20]
      break;
 8006b9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	0e5b      	lsrs	r3, r3, #25
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	e001      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006bbc:	693b      	ldr	r3, [r7, #16]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	00f42400 	.word	0x00f42400
 8006bd4:	007a1200 	.word	0x007a1200

08006bd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bde:	4b1e      	ldr	r3, [pc, #120]	; (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006be8:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d10c      	bne.n	8006c16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bfc:	4a17      	ldr	r2, [pc, #92]	; (8006c5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c04:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c06:	68d2      	ldr	r2, [r2, #12]
 8006c08:	0a12      	lsrs	r2, r2, #8
 8006c0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c0e:	fb02 f303 	mul.w	r3, r2, r3
 8006c12:	617b      	str	r3, [r7, #20]
    break;
 8006c14:	e00c      	b.n	8006c30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c16:	4a12      	ldr	r2, [pc, #72]	; (8006c60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1e:	4a0e      	ldr	r2, [pc, #56]	; (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c20:	68d2      	ldr	r2, [r2, #12]
 8006c22:	0a12      	lsrs	r2, r2, #8
 8006c24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c28:	fb02 f303 	mul.w	r3, r2, r3
 8006c2c:	617b      	str	r3, [r7, #20]
    break;
 8006c2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c30:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	0e5b      	lsrs	r3, r3, #25
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c4a:	687b      	ldr	r3, [r7, #4]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	007a1200 	.word	0x007a1200
 8006c60:	00f42400 	.word	0x00f42400

08006c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c70:	2300      	movs	r3, #0
 8006c72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8098 	beq.w	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c82:	2300      	movs	r3, #0
 8006c84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c86:	4b43      	ldr	r3, [pc, #268]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10d      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c92:	4b40      	ldr	r3, [pc, #256]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c96:	4a3f      	ldr	r2, [pc, #252]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c9e:	4b3d      	ldr	r3, [pc, #244]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	60bb      	str	r3, [r7, #8]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006caa:	2301      	movs	r3, #1
 8006cac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cae:	4b3a      	ldr	r3, [pc, #232]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a39      	ldr	r2, [pc, #228]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cba:	f7fc fe39 	bl	8003930 <HAL_GetTick>
 8006cbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cc0:	e009      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cc2:	f7fc fe35 	bl	8003930 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d902      	bls.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	74fb      	strb	r3, [r7, #19]
        break;
 8006cd4:	e005      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cd6:	4b30      	ldr	r3, [pc, #192]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0ef      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ce2:	7cfb      	ldrb	r3, [r7, #19]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d159      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ce8:	4b2a      	ldr	r3, [pc, #168]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cf2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01e      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d019      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d04:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d10:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d16:	4a1f      	ldr	r2, [pc, #124]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d20:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	4a1b      	ldr	r2, [pc, #108]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d30:	4a18      	ldr	r2, [pc, #96]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d016      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d42:	f7fc fdf5 	bl	8003930 <HAL_GetTick>
 8006d46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d48:	e00b      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f7fc fdf1 	bl	8003930 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d902      	bls.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	74fb      	strb	r3, [r7, #19]
            break;
 8006d60:	e006      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d62:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0ec      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d70:	7cfb      	ldrb	r3, [r7, #19]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d84:	4903      	ldr	r1, [pc, #12]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d8c:	e008      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	74bb      	strb	r3, [r7, #18]
 8006d92:	e005      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006d94:	40021000 	.word	0x40021000
 8006d98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9c:	7cfb      	ldrb	r3, [r7, #19]
 8006d9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006da0:	7c7b      	ldrb	r3, [r7, #17]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d105      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da6:	4ba7      	ldr	r3, [pc, #668]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006daa:	4aa6      	ldr	r2, [pc, #664]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006db0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dbe:	4ba1      	ldr	r3, [pc, #644]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc4:	f023 0203 	bic.w	r2, r3, #3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	499d      	ldr	r1, [pc, #628]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006de0:	4b98      	ldr	r3, [pc, #608]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de6:	f023 020c 	bic.w	r2, r3, #12
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	4995      	ldr	r1, [pc, #596]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e02:	4b90      	ldr	r3, [pc, #576]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	498c      	ldr	r1, [pc, #560]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e24:	4b87      	ldr	r3, [pc, #540]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	4984      	ldr	r1, [pc, #528]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e46:	4b7f      	ldr	r3, [pc, #508]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	497b      	ldr	r1, [pc, #492]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e68:	4b76      	ldr	r3, [pc, #472]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	4973      	ldr	r1, [pc, #460]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e8a:	4b6e      	ldr	r3, [pc, #440]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	496a      	ldr	r1, [pc, #424]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006eac:	4b65      	ldr	r3, [pc, #404]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	4962      	ldr	r1, [pc, #392]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ece:	4b5d      	ldr	r3, [pc, #372]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	4959      	ldr	r1, [pc, #356]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ef0:	4b54      	ldr	r3, [pc, #336]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ef6:	f023 0203 	bic.w	r2, r3, #3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efe:	4951      	ldr	r1, [pc, #324]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f12:	4b4c      	ldr	r3, [pc, #304]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4948      	ldr	r1, [pc, #288]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d015      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f34:	4b43      	ldr	r3, [pc, #268]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	4940      	ldr	r1, [pc, #256]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f52:	d105      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f54:	4b3b      	ldr	r3, [pc, #236]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	4a3a      	ldr	r2, [pc, #232]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d015      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f6c:	4b35      	ldr	r3, [pc, #212]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7a:	4932      	ldr	r1, [pc, #200]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f8a:	d105      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f8c:	4b2d      	ldr	r3, [pc, #180]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	4a2c      	ldr	r2, [pc, #176]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f96:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d015      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006faa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	4924      	ldr	r1, [pc, #144]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fc2:	d105      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fc4:	4b1f      	ldr	r3, [pc, #124]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	4a1e      	ldr	r2, [pc, #120]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d015      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fdc:	4b19      	ldr	r3, [pc, #100]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fea:	4916      	ldr	r1, [pc, #88]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ffa:	d105      	bne.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ffc:	4b11      	ldr	r3, [pc, #68]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	4a10      	ldr	r2, [pc, #64]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007006:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d019      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007014:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800701a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	4908      	ldr	r1, [pc, #32]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007024:	4313      	orrs	r3, r2
 8007026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007032:	d109      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007034:	4b03      	ldr	r3, [pc, #12]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	4a02      	ldr	r2, [pc, #8]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800703a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800703e:	60d3      	str	r3, [r2, #12]
 8007040:	e002      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007042:	bf00      	nop
 8007044:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d015      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007054:	4b29      	ldr	r3, [pc, #164]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	4926      	ldr	r1, [pc, #152]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007072:	d105      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007074:	4b21      	ldr	r3, [pc, #132]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	4a20      	ldr	r2, [pc, #128]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800707a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d015      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800708c:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800708e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007092:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709a:	4918      	ldr	r1, [pc, #96]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800709c:	4313      	orrs	r3, r2
 800709e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070aa:	d105      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070ac:	4b13      	ldr	r3, [pc, #76]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	4a12      	ldr	r2, [pc, #72]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d015      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070c4:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d2:	490a      	ldr	r1, [pc, #40]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070e2:	d105      	bne.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070e4:	4b05      	ldr	r3, [pc, #20]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	4a04      	ldr	r2, [pc, #16]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80070f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40021000 	.word	0x40021000

08007100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e09d      	b.n	800724e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	2b00      	cmp	r3, #0
 8007118:	d108      	bne.n	800712c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007122:	d009      	beq.n	8007138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	61da      	str	r2, [r3, #28]
 800712a:	e005      	b.n	8007138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fb ff4c 	bl	8002ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800716e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007178:	d902      	bls.n	8007180 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e002      	b.n	8007186 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007184:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800718e:	d007      	beq.n	80071a0 <HAL_SPI_Init+0xa0>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007198:	d002      	beq.n	80071a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e2:	ea42 0103 	orr.w	r1, r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	0c1b      	lsrs	r3, r3, #16
 80071fc:	f003 0204 	and.w	r2, r3, #4
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	f003 0310 	and.w	r3, r3, #16
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800721c:	ea42 0103 	orr.w	r1, r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800723c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b088      	sub	sp, #32
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_SPI_Transmit+0x22>
 8007274:	2302      	movs	r3, #2
 8007276:	e158      	b.n	800752a <HAL_SPI_Transmit+0x2d4>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007280:	f7fc fb56 	bl	8003930 <HAL_GetTick>
 8007284:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b01      	cmp	r3, #1
 8007294:	d002      	beq.n	800729c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007296:	2302      	movs	r3, #2
 8007298:	77fb      	strb	r3, [r7, #31]
    goto error;
 800729a:	e13d      	b.n	8007518 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_SPI_Transmit+0x52>
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d102      	bne.n	80072ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072ac:	e134      	b.n	8007518 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2203      	movs	r2, #3
 80072b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	88fa      	ldrh	r2, [r7, #6]
 80072cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072f8:	d10f      	bne.n	800731a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007308:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007318:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d007      	beq.n	8007338 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007340:	d94b      	bls.n	80073da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_SPI_Transmit+0xfa>
 800734a:	8afb      	ldrh	r3, [r7, #22]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d13e      	bne.n	80073ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	881a      	ldrh	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	1c9a      	adds	r2, r3, #2
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007374:	e02b      	b.n	80073ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b02      	cmp	r3, #2
 8007382:	d112      	bne.n	80073aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	881a      	ldrh	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	1c9a      	adds	r2, r3, #2
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800739e:	b29b      	uxth	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073a8:	e011      	b.n	80073ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073aa:	f7fc fac1 	bl	8003930 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d803      	bhi.n	80073c2 <HAL_SPI_Transmit+0x16c>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073c0:	d102      	bne.n	80073c8 <HAL_SPI_Transmit+0x172>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d102      	bne.n	80073ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073cc:	e0a4      	b.n	8007518 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ce      	bne.n	8007376 <HAL_SPI_Transmit+0x120>
 80073d8:	e07c      	b.n	80074d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d002      	beq.n	80073e8 <HAL_SPI_Transmit+0x192>
 80073e2:	8afb      	ldrh	r3, [r7, #22]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d170      	bne.n	80074ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d912      	bls.n	8007418 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	881a      	ldrh	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	1c9a      	adds	r2, r3, #2
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b02      	subs	r3, #2
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007416:	e058      	b.n	80074ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	7812      	ldrb	r2, [r2, #0]
 8007424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800743e:	e044      	b.n	80074ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b02      	cmp	r3, #2
 800744c:	d12b      	bne.n	80074a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007452:	b29b      	uxth	r3, r3
 8007454:	2b01      	cmp	r3, #1
 8007456:	d912      	bls.n	800747e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	881a      	ldrh	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	1c9a      	adds	r2, r3, #2
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007472:	b29b      	uxth	r3, r3
 8007474:	3b02      	subs	r3, #2
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800747c:	e025      	b.n	80074ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	330c      	adds	r3, #12
 8007488:	7812      	ldrb	r2, [r2, #0]
 800748a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074a4:	e011      	b.n	80074ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074a6:	f7fc fa43 	bl	8003930 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d803      	bhi.n	80074be <HAL_SPI_Transmit+0x268>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074bc:	d102      	bne.n	80074c4 <HAL_SPI_Transmit+0x26e>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d102      	bne.n	80074ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074c8:	e026      	b.n	8007518 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1b5      	bne.n	8007440 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fb5b 	bl	8007b94 <SPI_EndRxTxTransaction>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10a      	bne.n	8007508 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074f2:	2300      	movs	r3, #0
 80074f4:	613b      	str	r3, [r7, #16]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	77fb      	strb	r3, [r7, #31]
 8007514:	e000      	b.n	8007518 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007516:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007528:	7ffb      	ldrb	r3, [r7, #31]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3720      	adds	r7, #32
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b08a      	sub	sp, #40	; 0x28
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007540:	2301      	movs	r3, #1
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007550:	2b01      	cmp	r3, #1
 8007552:	d101      	bne.n	8007558 <HAL_SPI_TransmitReceive+0x26>
 8007554:	2302      	movs	r3, #2
 8007556:	e1fb      	b.n	8007950 <HAL_SPI_TransmitReceive+0x41e>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007560:	f7fc f9e6 	bl	8003930 <HAL_GetTick>
 8007564:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800756c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007574:	887b      	ldrh	r3, [r7, #2]
 8007576:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800757c:	7efb      	ldrb	r3, [r7, #27]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d00e      	beq.n	80075a0 <HAL_SPI_TransmitReceive+0x6e>
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007588:	d106      	bne.n	8007598 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d102      	bne.n	8007598 <HAL_SPI_TransmitReceive+0x66>
 8007592:	7efb      	ldrb	r3, [r7, #27]
 8007594:	2b04      	cmp	r3, #4
 8007596:	d003      	beq.n	80075a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007598:	2302      	movs	r3, #2
 800759a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800759e:	e1cd      	b.n	800793c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <HAL_SPI_TransmitReceive+0x80>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_SPI_TransmitReceive+0x80>
 80075ac:	887b      	ldrh	r3, [r7, #2]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d103      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80075b8:	e1c0      	b.n	800793c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d003      	beq.n	80075ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2205      	movs	r2, #5
 80075ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	887a      	ldrh	r2, [r7, #2]
 80075de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	887a      	ldrh	r2, [r7, #2]
 80075e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	887a      	ldrh	r2, [r7, #2]
 80075f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	887a      	ldrh	r2, [r7, #2]
 80075fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007610:	d802      	bhi.n	8007618 <HAL_SPI_TransmitReceive+0xe6>
 8007612:	8a3b      	ldrh	r3, [r7, #16]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d908      	bls.n	800762a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007626:	605a      	str	r2, [r3, #4]
 8007628:	e007      	b.n	800763a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007638:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d007      	beq.n	8007658 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007656:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007660:	d97c      	bls.n	800775c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SPI_TransmitReceive+0x13e>
 800766a:	8a7b      	ldrh	r3, [r7, #18]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d169      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	881a      	ldrh	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	1c9a      	adds	r2, r3, #2
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007694:	e056      	b.n	8007744 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d11b      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x1aa>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d016      	beq.n	80076dc <HAL_SPI_TransmitReceive+0x1aa>
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d113      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	881a      	ldrh	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c4:	1c9a      	adds	r2, r3, #2
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d11c      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x1f2>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d016      	beq.n	8007724 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007700:	b292      	uxth	r2, r2
 8007702:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007708:	1c9a      	adds	r2, r3, #2
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007720:	2301      	movs	r3, #1
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007724:	f7fc f904 	bl	8003930 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007730:	429a      	cmp	r2, r3
 8007732:	d807      	bhi.n	8007744 <HAL_SPI_TransmitReceive+0x212>
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800773a:	d003      	beq.n	8007744 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007742:	e0fb      	b.n	800793c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1a3      	bne.n	8007696 <HAL_SPI_TransmitReceive+0x164>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d19d      	bne.n	8007696 <HAL_SPI_TransmitReceive+0x164>
 800775a:	e0df      	b.n	800791c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <HAL_SPI_TransmitReceive+0x23a>
 8007764:	8a7b      	ldrh	r3, [r7, #18]
 8007766:	2b01      	cmp	r3, #1
 8007768:	f040 80cb 	bne.w	8007902 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b01      	cmp	r3, #1
 8007774:	d912      	bls.n	800779c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	881a      	ldrh	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007786:	1c9a      	adds	r2, r3, #2
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b02      	subs	r3, #2
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	87da      	strh	r2, [r3, #62]	; 0x3e
 800779a:	e0b2      	b.n	8007902 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	330c      	adds	r3, #12
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c2:	e09e      	b.n	8007902 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d134      	bne.n	800783c <HAL_SPI_TransmitReceive+0x30a>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d02f      	beq.n	800783c <HAL_SPI_TransmitReceive+0x30a>
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d12c      	bne.n	800783c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d912      	bls.n	8007812 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	881a      	ldrh	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	1c9a      	adds	r2, r3, #2
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b02      	subs	r3, #2
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007810:	e012      	b.n	8007838 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	330c      	adds	r3, #12
 800781c:	7812      	ldrb	r2, [r2, #0]
 800781e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b01      	cmp	r3, #1
 8007848:	d148      	bne.n	80078dc <HAL_SPI_TransmitReceive+0x3aa>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d042      	beq.n	80078dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b01      	cmp	r3, #1
 8007860:	d923      	bls.n	80078aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	b292      	uxth	r2, r2
 800786e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	1c9a      	adds	r2, r3, #2
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b02      	subs	r3, #2
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	d81f      	bhi.n	80078d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078a6:	605a      	str	r2, [r3, #4]
 80078a8:	e016      	b.n	80078d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f103 020c 	add.w	r2, r3, #12
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	7812      	ldrb	r2, [r2, #0]
 80078b8:	b2d2      	uxtb	r2, r2
 80078ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078d8:	2301      	movs	r3, #1
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078dc:	f7fc f828 	bl	8003930 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d803      	bhi.n	80078f4 <HAL_SPI_TransmitReceive+0x3c2>
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078f2:	d102      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x3c8>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d103      	bne.n	8007902 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007900:	e01c      	b.n	800793c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007906:	b29b      	uxth	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	f47f af5b 	bne.w	80077c4 <HAL_SPI_TransmitReceive+0x292>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	f47f af54 	bne.w	80077c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f937 	bl	8007b94 <SPI_EndRxTxTransaction>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d006      	beq.n	800793a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	661a      	str	r2, [r3, #96]	; 0x60
 8007938:	e000      	b.n	800793c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800793a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800794c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007950:	4618      	mov	r0, r3
 8007952:	3728      	adds	r7, #40	; 0x28
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	4613      	mov	r3, r2
 8007966:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007968:	f7fb ffe2 	bl	8003930 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007970:	1a9b      	subs	r3, r3, r2
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	4413      	add	r3, r2
 8007976:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007978:	f7fb ffda 	bl	8003930 <HAL_GetTick>
 800797c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800797e:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	015b      	lsls	r3, r3, #5
 8007984:	0d1b      	lsrs	r3, r3, #20
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	fb02 f303 	mul.w	r3, r2, r3
 800798c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800798e:	e054      	b.n	8007a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007996:	d050      	beq.n	8007a3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007998:	f7fb ffca 	bl	8003930 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d902      	bls.n	80079ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d13d      	bne.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079c6:	d111      	bne.n	80079ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d0:	d004      	beq.n	80079dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079da:	d107      	bne.n	80079ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f4:	d10f      	bne.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e017      	b.n	8007a5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4013      	ands	r3, r2
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	bf0c      	ite	eq
 8007a4a:	2301      	moveq	r3, #1
 8007a4c:	2300      	movne	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d19b      	bne.n	8007990 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3720      	adds	r7, #32
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000024 	.word	0x20000024

08007a68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	; 0x28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a7a:	f7fb ff59 	bl	8003930 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	1a9b      	subs	r3, r3, r2
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	4413      	add	r3, r2
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a8a:	f7fb ff51 	bl	8003930 <HAL_GetTick>
 8007a8e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a98:	4b3d      	ldr	r3, [pc, #244]	; (8007b90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	00da      	lsls	r2, r3, #3
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	0d1b      	lsrs	r3, r3, #20
 8007aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aaa:	fb02 f303 	mul.w	r3, r2, r3
 8007aae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ab0:	e060      	b.n	8007b74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ab8:	d107      	bne.n	8007aca <SPI_WaitFifoStateUntilTimeout+0x62>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad0:	d050      	beq.n	8007b74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ad2:	f7fb ff2d 	bl	8003930 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d902      	bls.n	8007ae8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d13d      	bne.n	8007b64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007af6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b00:	d111      	bne.n	8007b26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b0a:	d004      	beq.n	8007b16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b14:	d107      	bne.n	8007b26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2e:	d10f      	bne.n	8007b50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e010      	b.n	8007b86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d196      	bne.n	8007ab2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3728      	adds	r7, #40	; 0x28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000024 	.word	0x20000024

08007b94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7ff ff5b 	bl	8007a68 <SPI_WaitFifoStateUntilTimeout>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d007      	beq.n	8007bc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bbc:	f043 0220 	orr.w	r2, r3, #32
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e027      	b.n	8007c18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2180      	movs	r1, #128	; 0x80
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff fec0 	bl	8007958 <SPI_WaitFlagStateUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d007      	beq.n	8007bee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be2:	f043 0220 	orr.w	r2, r3, #32
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e014      	b.n	8007c18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f7ff ff34 	bl	8007a68 <SPI_WaitFifoStateUntilTimeout>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0a:	f043 0220 	orr.w	r2, r3, #32
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e000      	b.n	8007c18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e049      	b.n	8007cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d106      	bne.n	8007c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fb fda2 	bl	8003790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f000 fcca 	bl	80085f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d001      	beq.n	8007ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e054      	b.n	8007d92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0201 	orr.w	r2, r2, #1
 8007cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a26      	ldr	r2, [pc, #152]	; (8007da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d022      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d12:	d01d      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a22      	ldr	r2, [pc, #136]	; (8007da4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d018      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a21      	ldr	r2, [pc, #132]	; (8007da8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d013      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1f      	ldr	r2, [pc, #124]	; (8007dac <HAL_TIM_Base_Start_IT+0xdc>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00e      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1e      	ldr	r2, [pc, #120]	; (8007db0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d009      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1c      	ldr	r2, [pc, #112]	; (8007db4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d004      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0x80>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d115      	bne.n	8007d7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	4b19      	ldr	r3, [pc, #100]	; (8007dbc <HAL_TIM_Base_Start_IT+0xec>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b06      	cmp	r3, #6
 8007d60:	d015      	beq.n	8007d8e <HAL_TIM_Base_Start_IT+0xbe>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d68:	d011      	beq.n	8007d8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f042 0201 	orr.w	r2, r2, #1
 8007d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7a:	e008      	b.n	8007d8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	e000      	b.n	8007d90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3714      	adds	r7, #20
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	40012c00 	.word	0x40012c00
 8007da4:	40000400 	.word	0x40000400
 8007da8:	40000800 	.word	0x40000800
 8007dac:	40000c00 	.word	0x40000c00
 8007db0:	40013400 	.word	0x40013400
 8007db4:	40014000 	.word	0x40014000
 8007db8:	40015000 	.word	0x40015000
 8007dbc:	00010007 	.word	0x00010007

08007dc0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e097      	b.n	8007f04 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7fb fc17 	bl	800361c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2202      	movs	r2, #2
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6812      	ldr	r2, [r2, #0]
 8007e00:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007e04:	f023 0307 	bic.w	r3, r3, #7
 8007e08:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3304      	adds	r3, #4
 8007e12:	4619      	mov	r1, r3
 8007e14:	4610      	mov	r0, r2
 8007e16:	f000 fbef 	bl	80085f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e42:	f023 0303 	bic.w	r3, r3, #3
 8007e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	4313      	orrs	r3, r2
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e60:	f023 030c 	bic.w	r3, r3, #12
 8007e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	011a      	lsls	r2, r3, #4
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	031b      	lsls	r3, r3, #12
 8007e90:	4313      	orrs	r3, r2
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e9e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007ea6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f1c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f24:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f2c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f34:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d110      	bne.n	8007f5e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d102      	bne.n	8007f48 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f42:	7b7b      	ldrb	r3, [r7, #13]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d001      	beq.n	8007f4c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e089      	b.n	8008060 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f5c:	e031      	b.n	8007fc2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d110      	bne.n	8007f86 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d102      	bne.n	8007f70 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f6a:	7b3b      	ldrb	r3, [r7, #12]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d001      	beq.n	8007f74 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e075      	b.n	8008060 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f84:	e01d      	b.n	8007fc2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d108      	bne.n	8007f9e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d105      	bne.n	8007f9e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f92:	7b7b      	ldrb	r3, [r7, #13]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d102      	bne.n	8007f9e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f98:	7b3b      	ldrb	r3, [r7, #12]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d001      	beq.n	8007fa2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e05e      	b.n	8008060 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d010      	beq.n	8007ff0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007fce:	e01f      	b.n	8008010 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fc51 	bl	8008880 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f042 0202 	orr.w	r2, r2, #2
 8007fec:	60da      	str	r2, [r3, #12]
      break;
 8007fee:	e02e      	b.n	800804e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	2104      	movs	r1, #4
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fc41 	bl	8008880 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f042 0204 	orr.w	r2, r2, #4
 800800c:	60da      	str	r2, [r3, #12]
      break;
 800800e:	e01e      	b.n	800804e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2201      	movs	r2, #1
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fc31 	bl	8008880 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2201      	movs	r2, #1
 8008024:	2104      	movs	r1, #4
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fc2a 	bl	8008880 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68da      	ldr	r2, [r3, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0202 	orr.w	r2, r2, #2
 800803a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0204 	orr.w	r2, r2, #4
 800804a:	60da      	str	r2, [r3, #12]
      break;
 800804c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 0201 	orr.w	r2, r2, #1
 800805c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b02      	cmp	r3, #2
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b02      	cmp	r3, #2
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0202 	mvn.w	r2, #2
 8008094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa86 	bl	80085bc <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa78 	bl	80085a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fa89 	bl	80085d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d122      	bne.n	8008118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b04      	cmp	r3, #4
 80080de:	d11b      	bne.n	8008118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0204 	mvn.w	r2, #4
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa5c 	bl	80085bc <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa4e 	bl	80085a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fa5f 	bl	80085d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b08      	cmp	r3, #8
 8008124:	d122      	bne.n	800816c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b08      	cmp	r3, #8
 8008132:	d11b      	bne.n	800816c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0208 	mvn.w	r2, #8
 800813c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2204      	movs	r2, #4
 8008142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa32 	bl	80085bc <HAL_TIM_IC_CaptureCallback>
 8008158:	e005      	b.n	8008166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa24 	bl	80085a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fa35 	bl	80085d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0310 	and.w	r3, r3, #16
 8008176:	2b10      	cmp	r3, #16
 8008178:	d122      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b10      	cmp	r3, #16
 8008186:	d11b      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f06f 0210 	mvn.w	r2, #16
 8008190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2208      	movs	r2, #8
 8008196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa08 	bl	80085bc <HAL_TIM_IC_CaptureCallback>
 80081ac:	e005      	b.n	80081ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f9fa 	bl	80085a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fa0b 	bl	80085d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d10e      	bne.n	80081ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d107      	bne.n	80081ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0201 	mvn.w	r2, #1
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f9d4 	bl	8008594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f6:	2b80      	cmp	r3, #128	; 0x80
 80081f8:	d10e      	bne.n	8008218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008204:	2b80      	cmp	r3, #128	; 0x80
 8008206:	d107      	bne.n	8008218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fbfa 	bl	8008a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008226:	d10e      	bne.n	8008246 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008232:	2b80      	cmp	r3, #128	; 0x80
 8008234:	d107      	bne.n	8008246 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800823e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fbed 	bl	8008a20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d10e      	bne.n	8008272 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	d107      	bne.n	8008272 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800826a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f9b9 	bl	80085e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b20      	cmp	r3, #32
 800827e:	d10e      	bne.n	800829e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b20      	cmp	r3, #32
 800828c:	d107      	bne.n	800829e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f06f 0220 	mvn.w	r2, #32
 8008296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fbad 	bl	80089f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082ac:	d10f      	bne.n	80082ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082bc:	d107      	bne.n	80082ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80082c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fbb3 	bl	8008a34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082dc:	d10f      	bne.n	80082fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082ec:	d107      	bne.n	80082fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80082f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fba5 	bl	8008a48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800830c:	d10f      	bne.n	800832e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800831c:	d107      	bne.n	800832e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fb97 	bl	8008a5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800833c:	d10f      	bne.n	800835e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800834c:	d107      	bne.n	800835e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fb89 	bl	8008a70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800837c:	2b01      	cmp	r3, #1
 800837e:	d101      	bne.n	8008384 <HAL_TIM_ConfigClockSource+0x1c>
 8008380:	2302      	movs	r3, #2
 8008382:	e0f6      	b.n	8008572 <HAL_TIM_ConfigClockSource+0x20a>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80083a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a6f      	ldr	r2, [pc, #444]	; (800857c <HAL_TIM_ConfigClockSource+0x214>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	f000 80c1 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 80083c4:	4a6d      	ldr	r2, [pc, #436]	; (800857c <HAL_TIM_ConfigClockSource+0x214>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	f200 80c6 	bhi.w	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 80083cc:	4a6c      	ldr	r2, [pc, #432]	; (8008580 <HAL_TIM_ConfigClockSource+0x218>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	f000 80b9 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 80083d4:	4a6a      	ldr	r2, [pc, #424]	; (8008580 <HAL_TIM_ConfigClockSource+0x218>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	f200 80be 	bhi.w	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 80083dc:	4a69      	ldr	r2, [pc, #420]	; (8008584 <HAL_TIM_ConfigClockSource+0x21c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	f000 80b1 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 80083e4:	4a67      	ldr	r2, [pc, #412]	; (8008584 <HAL_TIM_ConfigClockSource+0x21c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	f200 80b6 	bhi.w	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 80083ec:	4a66      	ldr	r2, [pc, #408]	; (8008588 <HAL_TIM_ConfigClockSource+0x220>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	f000 80a9 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 80083f4:	4a64      	ldr	r2, [pc, #400]	; (8008588 <HAL_TIM_ConfigClockSource+0x220>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	f200 80ae 	bhi.w	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 80083fc:	4a63      	ldr	r2, [pc, #396]	; (800858c <HAL_TIM_ConfigClockSource+0x224>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	f000 80a1 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 8008404:	4a61      	ldr	r2, [pc, #388]	; (800858c <HAL_TIM_ConfigClockSource+0x224>)
 8008406:	4293      	cmp	r3, r2
 8008408:	f200 80a6 	bhi.w	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 800840c:	4a60      	ldr	r2, [pc, #384]	; (8008590 <HAL_TIM_ConfigClockSource+0x228>)
 800840e:	4293      	cmp	r3, r2
 8008410:	f000 8099 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 8008414:	4a5e      	ldr	r2, [pc, #376]	; (8008590 <HAL_TIM_ConfigClockSource+0x228>)
 8008416:	4293      	cmp	r3, r2
 8008418:	f200 809e 	bhi.w	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 800841c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008420:	f000 8091 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 8008424:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008428:	f200 8096 	bhi.w	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 800842c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008430:	f000 8089 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 8008434:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008438:	f200 808e 	bhi.w	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 800843c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008440:	d03e      	beq.n	80084c0 <HAL_TIM_ConfigClockSource+0x158>
 8008442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008446:	f200 8087 	bhi.w	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 800844a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800844e:	f000 8086 	beq.w	800855e <HAL_TIM_ConfigClockSource+0x1f6>
 8008452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008456:	d87f      	bhi.n	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 8008458:	2b70      	cmp	r3, #112	; 0x70
 800845a:	d01a      	beq.n	8008492 <HAL_TIM_ConfigClockSource+0x12a>
 800845c:	2b70      	cmp	r3, #112	; 0x70
 800845e:	d87b      	bhi.n	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 8008460:	2b60      	cmp	r3, #96	; 0x60
 8008462:	d050      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0x19e>
 8008464:	2b60      	cmp	r3, #96	; 0x60
 8008466:	d877      	bhi.n	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 8008468:	2b50      	cmp	r3, #80	; 0x50
 800846a:	d03c      	beq.n	80084e6 <HAL_TIM_ConfigClockSource+0x17e>
 800846c:	2b50      	cmp	r3, #80	; 0x50
 800846e:	d873      	bhi.n	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d058      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x1be>
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	d86f      	bhi.n	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 8008478:	2b30      	cmp	r3, #48	; 0x30
 800847a:	d064      	beq.n	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 800847c:	2b30      	cmp	r3, #48	; 0x30
 800847e:	d86b      	bhi.n	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 8008480:	2b20      	cmp	r3, #32
 8008482:	d060      	beq.n	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 8008484:	2b20      	cmp	r3, #32
 8008486:	d867      	bhi.n	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d05c      	beq.n	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 800848c:	2b10      	cmp	r3, #16
 800848e:	d05a      	beq.n	8008546 <HAL_TIM_ConfigClockSource+0x1de>
 8008490:	e062      	b.n	8008558 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6899      	ldr	r1, [r3, #8]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f000 f9cd 	bl	8008840 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	609a      	str	r2, [r3, #8]
      break;
 80084be:	e04f      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	6899      	ldr	r1, [r3, #8]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f000 f9b6 	bl	8008840 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084e2:	609a      	str	r2, [r3, #8]
      break;
 80084e4:	e03c      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	6859      	ldr	r1, [r3, #4]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f000 f928 	bl	8008748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2150      	movs	r1, #80	; 0x50
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f981 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8008504:	e02c      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6859      	ldr	r1, [r3, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	461a      	mov	r2, r3
 8008514:	f000 f947 	bl	80087a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2160      	movs	r1, #96	; 0x60
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f971 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8008524:	e01c      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	6859      	ldr	r1, [r3, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	461a      	mov	r2, r3
 8008534:	f000 f908 	bl	8008748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2140      	movs	r1, #64	; 0x40
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f961 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8008544:	e00c      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4619      	mov	r1, r3
 8008550:	4610      	mov	r0, r2
 8008552:	f000 f958 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8008556:	e003      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	73fb      	strb	r3, [r7, #15]
      break;
 800855c:	e000      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800855e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	00100070 	.word	0x00100070
 8008580:	00100060 	.word	0x00100060
 8008584:	00100050 	.word	0x00100050
 8008588:	00100040 	.word	0x00100040
 800858c:	00100030 	.word	0x00100030
 8008590:	00100020 	.word	0x00100020

08008594 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a46      	ldr	r2, [pc, #280]	; (8008724 <TIM_Base_SetConfig+0x12c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d017      	beq.n	8008640 <TIM_Base_SetConfig+0x48>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008616:	d013      	beq.n	8008640 <TIM_Base_SetConfig+0x48>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a43      	ldr	r2, [pc, #268]	; (8008728 <TIM_Base_SetConfig+0x130>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00f      	beq.n	8008640 <TIM_Base_SetConfig+0x48>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a42      	ldr	r2, [pc, #264]	; (800872c <TIM_Base_SetConfig+0x134>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00b      	beq.n	8008640 <TIM_Base_SetConfig+0x48>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a41      	ldr	r2, [pc, #260]	; (8008730 <TIM_Base_SetConfig+0x138>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d007      	beq.n	8008640 <TIM_Base_SetConfig+0x48>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a40      	ldr	r2, [pc, #256]	; (8008734 <TIM_Base_SetConfig+0x13c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d003      	beq.n	8008640 <TIM_Base_SetConfig+0x48>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a3f      	ldr	r2, [pc, #252]	; (8008738 <TIM_Base_SetConfig+0x140>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d108      	bne.n	8008652 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a33      	ldr	r2, [pc, #204]	; (8008724 <TIM_Base_SetConfig+0x12c>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d023      	beq.n	80086a2 <TIM_Base_SetConfig+0xaa>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008660:	d01f      	beq.n	80086a2 <TIM_Base_SetConfig+0xaa>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a30      	ldr	r2, [pc, #192]	; (8008728 <TIM_Base_SetConfig+0x130>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d01b      	beq.n	80086a2 <TIM_Base_SetConfig+0xaa>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a2f      	ldr	r2, [pc, #188]	; (800872c <TIM_Base_SetConfig+0x134>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d017      	beq.n	80086a2 <TIM_Base_SetConfig+0xaa>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a2e      	ldr	r2, [pc, #184]	; (8008730 <TIM_Base_SetConfig+0x138>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d013      	beq.n	80086a2 <TIM_Base_SetConfig+0xaa>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a2d      	ldr	r2, [pc, #180]	; (8008734 <TIM_Base_SetConfig+0x13c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00f      	beq.n	80086a2 <TIM_Base_SetConfig+0xaa>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a2d      	ldr	r2, [pc, #180]	; (800873c <TIM_Base_SetConfig+0x144>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00b      	beq.n	80086a2 <TIM_Base_SetConfig+0xaa>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a2c      	ldr	r2, [pc, #176]	; (8008740 <TIM_Base_SetConfig+0x148>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d007      	beq.n	80086a2 <TIM_Base_SetConfig+0xaa>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a2b      	ldr	r2, [pc, #172]	; (8008744 <TIM_Base_SetConfig+0x14c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d003      	beq.n	80086a2 <TIM_Base_SetConfig+0xaa>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a26      	ldr	r2, [pc, #152]	; (8008738 <TIM_Base_SetConfig+0x140>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d108      	bne.n	80086b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a12      	ldr	r2, [pc, #72]	; (8008724 <TIM_Base_SetConfig+0x12c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d013      	beq.n	8008708 <TIM_Base_SetConfig+0x110>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a14      	ldr	r2, [pc, #80]	; (8008734 <TIM_Base_SetConfig+0x13c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d00f      	beq.n	8008708 <TIM_Base_SetConfig+0x110>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a14      	ldr	r2, [pc, #80]	; (800873c <TIM_Base_SetConfig+0x144>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00b      	beq.n	8008708 <TIM_Base_SetConfig+0x110>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a13      	ldr	r2, [pc, #76]	; (8008740 <TIM_Base_SetConfig+0x148>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d007      	beq.n	8008708 <TIM_Base_SetConfig+0x110>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a12      	ldr	r2, [pc, #72]	; (8008744 <TIM_Base_SetConfig+0x14c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d003      	beq.n	8008708 <TIM_Base_SetConfig+0x110>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a0d      	ldr	r2, [pc, #52]	; (8008738 <TIM_Base_SetConfig+0x140>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d103      	bne.n	8008710 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	615a      	str	r2, [r3, #20]
}
 8008716:	bf00      	nop
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40012c00 	.word	0x40012c00
 8008728:	40000400 	.word	0x40000400
 800872c:	40000800 	.word	0x40000800
 8008730:	40000c00 	.word	0x40000c00
 8008734:	40013400 	.word	0x40013400
 8008738:	40015000 	.word	0x40015000
 800873c:	40014000 	.word	0x40014000
 8008740:	40014400 	.word	0x40014400
 8008744:	40014800 	.word	0x40014800

08008748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	f023 0201 	bic.w	r2, r3, #1
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f023 030a 	bic.w	r3, r3, #10
 8008784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4313      	orrs	r3, r2
 800878c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b087      	sub	sp, #28
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	f023 0210 	bic.w	r2, r3, #16
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	031b      	lsls	r3, r3, #12
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	011b      	lsls	r3, r3, #4
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	621a      	str	r2, [r3, #32]
}
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800881c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	f043 0307 	orr.w	r3, r3, #7
 800882c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	609a      	str	r2, [r3, #8]
}
 8008834:	bf00      	nop
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800885a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	021a      	lsls	r2, r3, #8
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	431a      	orrs	r2, r3
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4313      	orrs	r3, r2
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	609a      	str	r2, [r3, #8]
}
 8008874:	bf00      	nop
 8008876:	371c      	adds	r7, #28
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f003 031f 	and.w	r3, r3, #31
 8008892:	2201      	movs	r2, #1
 8008894:	fa02 f303 	lsl.w	r3, r2, r3
 8008898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1a      	ldr	r2, [r3, #32]
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	43db      	mvns	r3, r3
 80088a2:	401a      	ands	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6a1a      	ldr	r2, [r3, #32]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	f003 031f 	and.w	r3, r3, #31
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	fa01 f303 	lsl.w	r3, r1, r3
 80088b8:	431a      	orrs	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	621a      	str	r2, [r3, #32]
}
 80088be:	bf00      	nop
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e074      	b.n	80089ce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a34      	ldr	r2, [pc, #208]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d009      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a33      	ldr	r2, [pc, #204]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d004      	beq.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a31      	ldr	r2, [pc, #196]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d108      	bne.n	8008934 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008928:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800893a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a21      	ldr	r2, [pc, #132]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d022      	beq.n	80089a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008964:	d01d      	beq.n	80089a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a1f      	ldr	r2, [pc, #124]	; (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d018      	beq.n	80089a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1d      	ldr	r2, [pc, #116]	; (80089ec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d013      	beq.n	80089a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1c      	ldr	r2, [pc, #112]	; (80089f0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00e      	beq.n	80089a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a15      	ldr	r2, [pc, #84]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d009      	beq.n	80089a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a18      	ldr	r2, [pc, #96]	; (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a11      	ldr	r2, [pc, #68]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d10c      	bne.n	80089bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	40012c00 	.word	0x40012c00
 80089e0:	40013400 	.word	0x40013400
 80089e4:	40015000 	.word	0x40015000
 80089e8:	40000400 	.word	0x40000400
 80089ec:	40000800 	.word	0x40000800
 80089f0:	40000c00 	.word	0x40000c00
 80089f4:	40014000 	.word	0x40014000

080089f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <__libc_init_array>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	4d0d      	ldr	r5, [pc, #52]	; (8008abc <__libc_init_array+0x38>)
 8008a88:	4c0d      	ldr	r4, [pc, #52]	; (8008ac0 <__libc_init_array+0x3c>)
 8008a8a:	1b64      	subs	r4, r4, r5
 8008a8c:	10a4      	asrs	r4, r4, #2
 8008a8e:	2600      	movs	r6, #0
 8008a90:	42a6      	cmp	r6, r4
 8008a92:	d109      	bne.n	8008aa8 <__libc_init_array+0x24>
 8008a94:	4d0b      	ldr	r5, [pc, #44]	; (8008ac4 <__libc_init_array+0x40>)
 8008a96:	4c0c      	ldr	r4, [pc, #48]	; (8008ac8 <__libc_init_array+0x44>)
 8008a98:	f000 f82e 	bl	8008af8 <_init>
 8008a9c:	1b64      	subs	r4, r4, r5
 8008a9e:	10a4      	asrs	r4, r4, #2
 8008aa0:	2600      	movs	r6, #0
 8008aa2:	42a6      	cmp	r6, r4
 8008aa4:	d105      	bne.n	8008ab2 <__libc_init_array+0x2e>
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aac:	4798      	blx	r3
 8008aae:	3601      	adds	r6, #1
 8008ab0:	e7ee      	b.n	8008a90 <__libc_init_array+0xc>
 8008ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ab6:	4798      	blx	r3
 8008ab8:	3601      	adds	r6, #1
 8008aba:	e7f2      	b.n	8008aa2 <__libc_init_array+0x1e>
 8008abc:	08008b64 	.word	0x08008b64
 8008ac0:	08008b64 	.word	0x08008b64
 8008ac4:	08008b64 	.word	0x08008b64
 8008ac8:	08008b68 	.word	0x08008b68

08008acc <memcpy>:
 8008acc:	440a      	add	r2, r1
 8008ace:	4291      	cmp	r1, r2
 8008ad0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008ad4:	d100      	bne.n	8008ad8 <memcpy+0xc>
 8008ad6:	4770      	bx	lr
 8008ad8:	b510      	push	{r4, lr}
 8008ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ae2:	4291      	cmp	r1, r2
 8008ae4:	d1f9      	bne.n	8008ada <memcpy+0xe>
 8008ae6:	bd10      	pop	{r4, pc}

08008ae8 <memset>:
 8008ae8:	4402      	add	r2, r0
 8008aea:	4603      	mov	r3, r0
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d100      	bne.n	8008af2 <memset+0xa>
 8008af0:	4770      	bx	lr
 8008af2:	f803 1b01 	strb.w	r1, [r3], #1
 8008af6:	e7f9      	b.n	8008aec <memset+0x4>

08008af8 <_init>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr

08008b04 <_fini>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr
